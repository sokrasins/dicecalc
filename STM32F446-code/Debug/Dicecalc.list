
Dicecalc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b96c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001838  0800bb3c  0800bb3c  0001bb3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d374  0800d374  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d374  0800d374  0001d374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d37c  0800d37c  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800d37c  0800d37c  0001d37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0800d388  0800d388  0001d388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800d394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000169c  2000015c  0800d4f0  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017f8  0800d4f0  000217f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000531d5  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007596  00000000  00000000  00073361  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002120  00000000  00000000  0007a8f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ee8  00000000  00000000  0007ca18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029d38  00000000  00000000  0007e900  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017fef  00000000  00000000  000a8638  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f03ea  00000000  00000000  000c0627  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b0a11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad24  00000000  00000000  001b0a8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000015c 	.word	0x2000015c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bb24 	.word	0x0800bb24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000160 	.word	0x20000160
 800020c:	0800bb24 	.word	0x0800bb24

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_ldivmod>:
 80002c0:	b97b      	cbnz	r3, 80002e2 <__aeabi_ldivmod+0x22>
 80002c2:	b972      	cbnz	r2, 80002e2 <__aeabi_ldivmod+0x22>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bfbe      	ittt	lt
 80002c8:	2000      	movlt	r0, #0
 80002ca:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ce:	e006      	blt.n	80002de <__aeabi_ldivmod+0x1e>
 80002d0:	bf08      	it	eq
 80002d2:	2800      	cmpeq	r0, #0
 80002d4:	bf1c      	itt	ne
 80002d6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002da:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002de:	f000 b9bd 	b.w	800065c <__aeabi_idiv0>
 80002e2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ea:	2900      	cmp	r1, #0
 80002ec:	db09      	blt.n	8000302 <__aeabi_ldivmod+0x42>
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	db1a      	blt.n	8000328 <__aeabi_ldivmod+0x68>
 80002f2:	f000 f84d 	bl	8000390 <__udivmoddi4>
 80002f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fe:	b004      	add	sp, #16
 8000300:	4770      	bx	lr
 8000302:	4240      	negs	r0, r0
 8000304:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000308:	2b00      	cmp	r3, #0
 800030a:	db1b      	blt.n	8000344 <__aeabi_ldivmod+0x84>
 800030c:	f000 f840 	bl	8000390 <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	4252      	negs	r2, r2
 8000322:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000326:	4770      	bx	lr
 8000328:	4252      	negs	r2, r2
 800032a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032e:	f000 f82f 	bl	8000390 <__udivmoddi4>
 8000332:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033a:	b004      	add	sp, #16
 800033c:	4240      	negs	r0, r0
 800033e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000342:	4770      	bx	lr
 8000344:	4252      	negs	r2, r2
 8000346:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034a:	f000 f821 	bl	8000390 <__udivmoddi4>
 800034e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000356:	b004      	add	sp, #16
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000370:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000374:	f000 b972 	b.w	800065c <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9e08      	ldr	r6, [sp, #32]
 8000396:	4604      	mov	r4, r0
 8000398:	4688      	mov	r8, r1
 800039a:	2b00      	cmp	r3, #0
 800039c:	d14b      	bne.n	8000436 <__udivmoddi4+0xa6>
 800039e:	428a      	cmp	r2, r1
 80003a0:	4615      	mov	r5, r2
 80003a2:	d967      	bls.n	8000474 <__udivmoddi4+0xe4>
 80003a4:	fab2 f282 	clz	r2, r2
 80003a8:	b14a      	cbz	r2, 80003be <__udivmoddi4+0x2e>
 80003aa:	f1c2 0720 	rsb	r7, r2, #32
 80003ae:	fa01 f302 	lsl.w	r3, r1, r2
 80003b2:	fa20 f707 	lsr.w	r7, r0, r7
 80003b6:	4095      	lsls	r5, r2
 80003b8:	ea47 0803 	orr.w	r8, r7, r3
 80003bc:	4094      	lsls	r4, r2
 80003be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003c8:	fa1f fc85 	uxth.w	ip, r5
 80003cc:	fb0e 8817 	mls	r8, lr, r7, r8
 80003d0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d4:	fb07 f10c 	mul.w	r1, r7, ip
 80003d8:	4299      	cmp	r1, r3
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x60>
 80003dc:	18eb      	adds	r3, r5, r3
 80003de:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80003e2:	f080 811b 	bcs.w	800061c <__udivmoddi4+0x28c>
 80003e6:	4299      	cmp	r1, r3
 80003e8:	f240 8118 	bls.w	800061c <__udivmoddi4+0x28c>
 80003ec:	3f02      	subs	r7, #2
 80003ee:	442b      	add	r3, r5
 80003f0:	1a5b      	subs	r3, r3, r1
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000400:	fb00 fc0c 	mul.w	ip, r0, ip
 8000404:	45a4      	cmp	ip, r4
 8000406:	d909      	bls.n	800041c <__udivmoddi4+0x8c>
 8000408:	192c      	adds	r4, r5, r4
 800040a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800040e:	f080 8107 	bcs.w	8000620 <__udivmoddi4+0x290>
 8000412:	45a4      	cmp	ip, r4
 8000414:	f240 8104 	bls.w	8000620 <__udivmoddi4+0x290>
 8000418:	3802      	subs	r0, #2
 800041a:	442c      	add	r4, r5
 800041c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000420:	eba4 040c 	sub.w	r4, r4, ip
 8000424:	2700      	movs	r7, #0
 8000426:	b11e      	cbz	r6, 8000430 <__udivmoddi4+0xa0>
 8000428:	40d4      	lsrs	r4, r2
 800042a:	2300      	movs	r3, #0
 800042c:	e9c6 4300 	strd	r4, r3, [r6]
 8000430:	4639      	mov	r1, r7
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0xbe>
 800043a:	2e00      	cmp	r6, #0
 800043c:	f000 80eb 	beq.w	8000616 <__udivmoddi4+0x286>
 8000440:	2700      	movs	r7, #0
 8000442:	e9c6 0100 	strd	r0, r1, [r6]
 8000446:	4638      	mov	r0, r7
 8000448:	4639      	mov	r1, r7
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f783 	clz	r7, r3
 8000452:	2f00      	cmp	r7, #0
 8000454:	d147      	bne.n	80004e6 <__udivmoddi4+0x156>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0xd0>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80fa 	bhi.w	8000654 <__udivmoddi4+0x2c4>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0303 	sbc.w	r3, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	4698      	mov	r8, r3
 800046a:	2e00      	cmp	r6, #0
 800046c:	d0e0      	beq.n	8000430 <__udivmoddi4+0xa0>
 800046e:	e9c6 4800 	strd	r4, r8, [r6]
 8000472:	e7dd      	b.n	8000430 <__udivmoddi4+0xa0>
 8000474:	b902      	cbnz	r2, 8000478 <__udivmoddi4+0xe8>
 8000476:	deff      	udf	#255	; 0xff
 8000478:	fab2 f282 	clz	r2, r2
 800047c:	2a00      	cmp	r2, #0
 800047e:	f040 808f 	bne.w	80005a0 <__udivmoddi4+0x210>
 8000482:	1b49      	subs	r1, r1, r5
 8000484:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000488:	fa1f f885 	uxth.w	r8, r5
 800048c:	2701      	movs	r7, #1
 800048e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000492:	0c23      	lsrs	r3, r4, #16
 8000494:	fb0e 111c 	mls	r1, lr, ip, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb08 f10c 	mul.w	r1, r8, ip
 80004a0:	4299      	cmp	r1, r3
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x124>
 80004a4:	18eb      	adds	r3, r5, r3
 80004a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0x122>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	f200 80cd 	bhi.w	800064c <__udivmoddi4+0x2bc>
 80004b2:	4684      	mov	ip, r0
 80004b4:	1a59      	subs	r1, r3, r1
 80004b6:	b2a3      	uxth	r3, r4
 80004b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004bc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004c0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004c4:	fb08 f800 	mul.w	r8, r8, r0
 80004c8:	45a0      	cmp	r8, r4
 80004ca:	d907      	bls.n	80004dc <__udivmoddi4+0x14c>
 80004cc:	192c      	adds	r4, r5, r4
 80004ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x14a>
 80004d4:	45a0      	cmp	r8, r4
 80004d6:	f200 80b6 	bhi.w	8000646 <__udivmoddi4+0x2b6>
 80004da:	4618      	mov	r0, r3
 80004dc:	eba4 0408 	sub.w	r4, r4, r8
 80004e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004e4:	e79f      	b.n	8000426 <__udivmoddi4+0x96>
 80004e6:	f1c7 0c20 	rsb	ip, r7, #32
 80004ea:	40bb      	lsls	r3, r7
 80004ec:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004f0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004f4:	fa01 f407 	lsl.w	r4, r1, r7
 80004f8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004fc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000500:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000504:	4325      	orrs	r5, r4
 8000506:	fbb3 f9f8 	udiv	r9, r3, r8
 800050a:	0c2c      	lsrs	r4, r5, #16
 800050c:	fb08 3319 	mls	r3, r8, r9, r3
 8000510:	fa1f fa8e 	uxth.w	sl, lr
 8000514:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000518:	fb09 f40a 	mul.w	r4, r9, sl
 800051c:	429c      	cmp	r4, r3
 800051e:	fa02 f207 	lsl.w	r2, r2, r7
 8000522:	fa00 f107 	lsl.w	r1, r0, r7
 8000526:	d90b      	bls.n	8000540 <__udivmoddi4+0x1b0>
 8000528:	eb1e 0303 	adds.w	r3, lr, r3
 800052c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000530:	f080 8087 	bcs.w	8000642 <__udivmoddi4+0x2b2>
 8000534:	429c      	cmp	r4, r3
 8000536:	f240 8084 	bls.w	8000642 <__udivmoddi4+0x2b2>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4473      	add	r3, lr
 8000540:	1b1b      	subs	r3, r3, r4
 8000542:	b2ad      	uxth	r5, r5
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3310 	mls	r3, r8, r0, r3
 800054c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000550:	fb00 fa0a 	mul.w	sl, r0, sl
 8000554:	45a2      	cmp	sl, r4
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x1da>
 8000558:	eb1e 0404 	adds.w	r4, lr, r4
 800055c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000560:	d26b      	bcs.n	800063a <__udivmoddi4+0x2aa>
 8000562:	45a2      	cmp	sl, r4
 8000564:	d969      	bls.n	800063a <__udivmoddi4+0x2aa>
 8000566:	3802      	subs	r0, #2
 8000568:	4474      	add	r4, lr
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	fba0 8902 	umull	r8, r9, r0, r2
 8000572:	eba4 040a 	sub.w	r4, r4, sl
 8000576:	454c      	cmp	r4, r9
 8000578:	46c2      	mov	sl, r8
 800057a:	464b      	mov	r3, r9
 800057c:	d354      	bcc.n	8000628 <__udivmoddi4+0x298>
 800057e:	d051      	beq.n	8000624 <__udivmoddi4+0x294>
 8000580:	2e00      	cmp	r6, #0
 8000582:	d069      	beq.n	8000658 <__udivmoddi4+0x2c8>
 8000584:	ebb1 050a 	subs.w	r5, r1, sl
 8000588:	eb64 0403 	sbc.w	r4, r4, r3
 800058c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000590:	40fd      	lsrs	r5, r7
 8000592:	40fc      	lsrs	r4, r7
 8000594:	ea4c 0505 	orr.w	r5, ip, r5
 8000598:	e9c6 5400 	strd	r5, r4, [r6]
 800059c:	2700      	movs	r7, #0
 800059e:	e747      	b.n	8000430 <__udivmoddi4+0xa0>
 80005a0:	f1c2 0320 	rsb	r3, r2, #32
 80005a4:	fa20 f703 	lsr.w	r7, r0, r3
 80005a8:	4095      	lsls	r5, r2
 80005aa:	fa01 f002 	lsl.w	r0, r1, r2
 80005ae:	fa21 f303 	lsr.w	r3, r1, r3
 80005b2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005b6:	4338      	orrs	r0, r7
 80005b8:	0c01      	lsrs	r1, r0, #16
 80005ba:	fbb3 f7fe 	udiv	r7, r3, lr
 80005be:	fa1f f885 	uxth.w	r8, r5
 80005c2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ca:	fb07 f308 	mul.w	r3, r7, r8
 80005ce:	428b      	cmp	r3, r1
 80005d0:	fa04 f402 	lsl.w	r4, r4, r2
 80005d4:	d907      	bls.n	80005e6 <__udivmoddi4+0x256>
 80005d6:	1869      	adds	r1, r5, r1
 80005d8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80005dc:	d22f      	bcs.n	800063e <__udivmoddi4+0x2ae>
 80005de:	428b      	cmp	r3, r1
 80005e0:	d92d      	bls.n	800063e <__udivmoddi4+0x2ae>
 80005e2:	3f02      	subs	r7, #2
 80005e4:	4429      	add	r1, r5
 80005e6:	1acb      	subs	r3, r1, r3
 80005e8:	b281      	uxth	r1, r0
 80005ea:	fbb3 f0fe 	udiv	r0, r3, lr
 80005ee:	fb0e 3310 	mls	r3, lr, r0, r3
 80005f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f6:	fb00 f308 	mul.w	r3, r0, r8
 80005fa:	428b      	cmp	r3, r1
 80005fc:	d907      	bls.n	800060e <__udivmoddi4+0x27e>
 80005fe:	1869      	adds	r1, r5, r1
 8000600:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000604:	d217      	bcs.n	8000636 <__udivmoddi4+0x2a6>
 8000606:	428b      	cmp	r3, r1
 8000608:	d915      	bls.n	8000636 <__udivmoddi4+0x2a6>
 800060a:	3802      	subs	r0, #2
 800060c:	4429      	add	r1, r5
 800060e:	1ac9      	subs	r1, r1, r3
 8000610:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000614:	e73b      	b.n	800048e <__udivmoddi4+0xfe>
 8000616:	4637      	mov	r7, r6
 8000618:	4630      	mov	r0, r6
 800061a:	e709      	b.n	8000430 <__udivmoddi4+0xa0>
 800061c:	4607      	mov	r7, r0
 800061e:	e6e7      	b.n	80003f0 <__udivmoddi4+0x60>
 8000620:	4618      	mov	r0, r3
 8000622:	e6fb      	b.n	800041c <__udivmoddi4+0x8c>
 8000624:	4541      	cmp	r1, r8
 8000626:	d2ab      	bcs.n	8000580 <__udivmoddi4+0x1f0>
 8000628:	ebb8 0a02 	subs.w	sl, r8, r2
 800062c:	eb69 020e 	sbc.w	r2, r9, lr
 8000630:	3801      	subs	r0, #1
 8000632:	4613      	mov	r3, r2
 8000634:	e7a4      	b.n	8000580 <__udivmoddi4+0x1f0>
 8000636:	4660      	mov	r0, ip
 8000638:	e7e9      	b.n	800060e <__udivmoddi4+0x27e>
 800063a:	4618      	mov	r0, r3
 800063c:	e795      	b.n	800056a <__udivmoddi4+0x1da>
 800063e:	4667      	mov	r7, ip
 8000640:	e7d1      	b.n	80005e6 <__udivmoddi4+0x256>
 8000642:	4681      	mov	r9, r0
 8000644:	e77c      	b.n	8000540 <__udivmoddi4+0x1b0>
 8000646:	3802      	subs	r0, #2
 8000648:	442c      	add	r4, r5
 800064a:	e747      	b.n	80004dc <__udivmoddi4+0x14c>
 800064c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000650:	442b      	add	r3, r5
 8000652:	e72f      	b.n	80004b4 <__udivmoddi4+0x124>
 8000654:	4638      	mov	r0, r7
 8000656:	e708      	b.n	800046a <__udivmoddi4+0xda>
 8000658:	4637      	mov	r7, r6
 800065a:	e6e9      	b.n	8000430 <__udivmoddi4+0xa0>

0800065c <__aeabi_idiv0>:
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <_ZN7ConsoleC1Ev>:
#include "Console.h"

#include "Device.h"


Console::Console() {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	this->m_uart = {0};
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4618      	mov	r0, r3
 800066c:	2340      	movs	r3, #64	; 0x40
 800066e:	461a      	mov	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f00a f985 	bl	800a980 <memset>
	this->m_uart.Init.BaudRate = 115200;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800067c:	605a      	str	r2, [r3, #4]
	this->m_uart.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
	this->m_uart.Init.StopBits = UART_STOPBITS_1;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
	this->m_uart.Init.Parity = UART_PARITY_NONE;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
	this->m_uart.Init.Mode = UART_MODE_TX_RX;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
	this->m_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
	this->m_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
}
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <_ZN7Console4openEP13USART_TypeDef>:

bool Console::open(USART_TypeDef *instance) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	if (instance == USART2) {
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <_ZN7Console4openEP13USART_TypeDef+0x44>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d112      	bne.n	80006e4 <_ZN7Console4openEP13USART_TypeDef+0x38>
		this->m_uart.Instance = instance;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	683a      	ldr	r2, [r7, #0]
 80006c2:	601a      	str	r2, [r3, #0]

		if (HAL_UART_Init(&(this->m_uart)) != HAL_OK)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f009 faae 	bl	8009c28 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	bf14      	ite	ne
 80006d2:	2301      	movne	r3, #1
 80006d4:	2300      	moveq	r3, #0
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <_ZN7Console4openEP13USART_TypeDef+0x34>
		{
			return false;
 80006dc:	2300      	movs	r3, #0
 80006de:	e002      	b.n	80006e6 <_ZN7Console4openEP13USART_TypeDef+0x3a>
		}
		return true;
 80006e0:	2301      	movs	r3, #1
 80006e2:	e000      	b.n	80006e6 <_ZN7Console4openEP13USART_TypeDef+0x3a>
	}
	return false;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40004400 	.word	0x40004400

080006f4 <DEV_Init>:
#include "stm32f4xx_hal.h"

static void SystemClock_Config(void);
static void MX_GPIO_Init(void);

void DEV_Init(void) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	HAL_Init();
 80006f8:	f007 fcec 	bl	80080d4 <HAL_Init>
	SystemClock_Config();
 80006fc:	f000 f804 	bl	8000708 <SystemClock_Config>
	MX_GPIO_Init();
 8000700:	f000 f870 	bl	80007e4 <MX_GPIO_Init>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <SystemClock_Config>:

// Set up MCU clock
static void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	2234      	movs	r2, #52	; 0x34
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f00a f932 	bl	800a980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <SystemClock_Config+0xd4>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a29      	ldr	r2, [pc, #164]	; (80007dc <SystemClock_Config+0xd4>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b27      	ldr	r3, [pc, #156]	; (80007dc <SystemClock_Config+0xd4>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000748:	2300      	movs	r3, #0
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <SystemClock_Config+0xd8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000754:	4a22      	ldr	r2, [pc, #136]	; (80007e0 <SystemClock_Config+0xd8>)
 8000756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <SystemClock_Config+0xd8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000770:	2310      	movs	r3, #16
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000774:	2302      	movs	r3, #2
 8000776:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000778:	2300      	movs	r3, #0
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800077c:	2310      	movs	r3, #16
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000780:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000784:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000786:	2304      	movs	r3, #4
 8000788:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4618      	mov	r0, r3
 8000798:	f008 faf0 	bl	8008d7c <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007a2:	f005 f855 	bl	8005850 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2302      	movs	r3, #2
 80007ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2102      	movs	r1, #2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f008 f820 	bl	8008808 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007ce:	f005 f83f 	bl	8005850 <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	3750      	adds	r7, #80	; 0x50
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b087      	sub	sp, #28
 80007e8:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	4b25      	ldr	r3, [pc, #148]	; (8000884 <MX_GPIO_Init+0xa0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a24      	ldr	r2, [pc, #144]	; (8000884 <MX_GPIO_Init+0xa0>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_GPIO_Init+0xa0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_GPIO_Init+0xa0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a1d      	ldr	r2, [pc, #116]	; (8000884 <MX_GPIO_Init+0xa0>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_GPIO_Init+0xa0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_GPIO_Init+0xa0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a16      	ldr	r2, [pc, #88]	; (8000884 <MX_GPIO_Init+0xa0>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_GPIO_Init+0xa0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_GPIO_Init+0xa0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <MX_GPIO_Init+0xa0>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <MX_GPIO_Init+0xa0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_GPIO_Init+0xa0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a08      	ldr	r2, [pc, #32]	; (8000884 <MX_GPIO_Init+0xa0>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_GPIO_Init+0xa0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
}
 8000876:	bf00      	nop
 8000878:	371c      	adds	r7, #28
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800

08000888 <_ZN4Gpio6enableE8GpioMode>:
void Gpio::set_pin(GPIO_TypeDef *port, uint16_t pin) {
	this->m_port = port;
	this->m_pin = pin;
}

void Gpio::enable(GpioMode mode) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	70fb      	strb	r3, [r7, #3]
	this->m_mode = mode;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	78fa      	ldrb	r2, [r7, #3]
 8000898:	725a      	strb	r2, [r3, #9]

	GPIO_InitTypeDef pin_init = {0};
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
	pin_init.Pin = this->m_pin;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	60fb      	str	r3, [r7, #12]
	pin_init.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]

	if (this->m_mode == GPIO_INPUT) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	7a5b      	ldrb	r3, [r3, #9]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d102      	bne.n	80008c2 <_ZN4Gpio6enableE8GpioMode+0x3a>
		pin_init.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	e001      	b.n	80008c6 <_ZN4Gpio6enableE8GpioMode+0x3e>
	} else {
		pin_init.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	613b      	str	r3, [r7, #16]
	}

	HAL_GPIO_Init(this->m_port, &pin_init);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f107 020c 	add.w	r2, r7, #12
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f007 fdd5 	bl	8008480 <HAL_GPIO_Init>
	this->enabled = true;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2201      	movs	r2, #1
 80008da:	721a      	strb	r2, [r3, #8]
}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <_ZN4Gpio9set_stateEi>:

void Gpio::set_state(int state) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
	if (!this->enabled) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	7a1b      	ldrb	r3, [r3, #8]
 80008f2:	f083 0301 	eor.w	r3, r3, #1
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d118      	bne.n	800092e <_ZN4Gpio9set_stateEi+0x4a>
		return;
	}

	if (this->m_mode != GPIO_OUTPUT) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	7a5b      	ldrb	r3, [r3, #9]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d116      	bne.n	8000932 <_ZN4Gpio9set_stateEi+0x4e>
		return;
	}

	if (state == 0) {
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d108      	bne.n	800091c <_ZN4Gpio9set_stateEi+0x38>
		HAL_GPIO_WritePin(this->m_port, this->m_pin, GPIO_PIN_RESET);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6858      	ldr	r0, [r3, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	2200      	movs	r2, #0
 8000914:	4619      	mov	r1, r3
 8000916:	f007 ff5d 	bl	80087d4 <HAL_GPIO_WritePin>
 800091a:	e00b      	b.n	8000934 <_ZN4Gpio9set_stateEi+0x50>
	} else {
		HAL_GPIO_WritePin(this->m_port, this->m_pin, GPIO_PIN_SET);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6858      	ldr	r0, [r3, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	2201      	movs	r2, #1
 8000926:	4619      	mov	r1, r3
 8000928:	f007 ff54 	bl	80087d4 <HAL_GPIO_WritePin>
 800092c:	e002      	b.n	8000934 <_ZN4Gpio9set_stateEi+0x50>
		return;
 800092e:	bf00      	nop
 8000930:	e000      	b.n	8000934 <_ZN4Gpio9set_stateEi+0x50>
		return;
 8000932:	bf00      	nop
	}
}
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <_ZN4Gpio9get_stateEv>:
	}

	HAL_GPIO_TogglePin(this->m_port, this->m_pin);
}

uint8_t Gpio::get_state() {
 800093a:	b580      	push	{r7, lr}
 800093c:	b084      	sub	sp, #16
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
	if (!this->enabled) {
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	7a1b      	ldrb	r3, [r3, #8]
 8000946:	f083 0301 	eor.w	r3, r3, #1
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <_ZN4Gpio9get_stateEv+0x1a>
		return 0;
 8000950:	2300      	movs	r3, #0
 8000952:	e00f      	b.n	8000974 <_ZN4Gpio9get_stateEv+0x3a>
	}

	GPIO_PinState state = HAL_GPIO_ReadPin(this->m_port, this->m_pin);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	4610      	mov	r0, r2
 8000960:	f007 ff20 	bl	80087a4 <HAL_GPIO_ReadPin>
 8000964:	4603      	mov	r3, r0
 8000966:	73fb      	strb	r3, [r7, #15]

	if (state == GPIO_PIN_SET) {
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d101      	bne.n	8000972 <_ZN4Gpio9get_stateEv+0x38>
		return 1;
 800096e:	2301      	movs	r3, #1
 8000970:	e000      	b.n	8000974 <_ZN4Gpio9get_stateEv+0x3a>
	}
	return 0;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <_ZN3SpiC1Ev>:
#include <stdint.h>
#include <string.h>

#include "Device.h"

Spi::Spi() {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	this->m_spi = {0};
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4618      	mov	r0, r3
 8000988:	2358      	movs	r3, #88	; 0x58
 800098a:	461a      	mov	r2, r3
 800098c:	2100      	movs	r1, #0
 800098e:	f009 fff7 	bl	800a980 <memset>
	this->m_spi.State = HAL_SPI_STATE_RESET;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2200      	movs	r2, #0
 8000996:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	this->m_spi.Init.Mode = SPI_MODE_MASTER;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009a0:	605a      	str	r2, [r3, #4]
	this->m_spi.Init.Direction = SPI_DIRECTION_2LINES;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
	this->m_spi.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
	this->m_spi.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
	this->m_spi.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
	this->m_spi.Init.NSS = SPI_NSS_SOFT;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c0:	619a      	str	r2, [r3, #24]
	this->m_spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2228      	movs	r2, #40	; 0x28
 80009c6:	61da      	str	r2, [r3, #28]
	this->m_spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
	this->m_spi.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	; 0x24
	this->m_spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	629a      	str	r2, [r3, #40]	; 0x28
	this->m_spi.Init.CRCPolynomial = 10;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	220a      	movs	r2, #10
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4618      	mov	r0, r3
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <_ZN3Spi4openEP11SPI_TypeDef>:

bool Spi::open(SPI_TypeDef *instance) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
	if (instance == SPI1) {
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <_ZN3Spi4openEP11SPI_TypeDef+0x44>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d112      	bne.n	8000a24 <_ZN3Spi4openEP11SPI_TypeDef+0x38>
		this->m_spi.Instance = instance;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	601a      	str	r2, [r3, #0]

		if (HAL_SPI_Init(&(this->m_spi)) != HAL_OK) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f008 fc12 	bl	8009230 <HAL_SPI_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	bf14      	ite	ne
 8000a12:	2301      	movne	r3, #1
 8000a14:	2300      	moveq	r3, #0
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <_ZN3Spi4openEP11SPI_TypeDef+0x34>
			return false;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	e002      	b.n	8000a26 <_ZN3Spi4openEP11SPI_TypeDef+0x3a>
		}
		return true;
 8000a20:	2301      	movs	r3, #1
 8000a22:	e000      	b.n	8000a26 <_ZN3Spi4openEP11SPI_TypeDef+0x3a>
	}
	return false;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40013000 	.word	0x40013000

08000a34 <_ZN3Spi10write_byteEh>:

void Spi::write_byte(uint8_t byte) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&this->m_spi, &byte, 1, 0xFFFF);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	1cf9      	adds	r1, r7, #3
 8000a44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f008 fc55 	bl	80092f8 <HAL_SPI_Transmit>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <_ZN4GpioC1Ev>:
	GPIO_TypeDef  *m_port;
	bool enabled;
	GpioMode m_mode;

public:
	Gpio() : m_pin(0), m_port(GPIOA), enabled(false) {};
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	801a      	strh	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <_ZN4GpioC1Ev+0x28>)
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	721a      	strb	r2, [r3, #8]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	40020000 	.word	0x40020000

08000a84 <_ZN4GpioC1EP12GPIO_TypeDeft>:
	Gpio(GPIO_TypeDef *port, uint16_t pin) : m_pin(pin), m_port(port), enabled(false) {};
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	80fb      	strh	r3, [r7, #6]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	88fa      	ldrh	r2, [r7, #6]
 8000a96:	801a      	strh	r2, [r3, #0]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	721a      	strb	r2, [r3, #8]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <_ZN6EpaperC1Ev>:
    0x00,0x00,0x00,0x00,0x00,                       // TP6 A~D RP6

    0x15,0x41,0xA8,0x32,0x30,0x0A,
};

Epaper::Epaper() {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b0a4      	sub	sp, #144	; 0x90
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ffca 	bl	8000a58 <_ZN4GpioC1Ev>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	330c      	adds	r3, #12
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ffc5 	bl	8000a58 <_ZN4GpioC1Ev>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3318      	adds	r3, #24
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ffc0 	bl	8000a58 <_ZN4GpioC1Ev>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3324      	adds	r3, #36	; 0x24
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ffbb 	bl	8000a58 <_ZN4GpioC1Ev>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3330      	adds	r3, #48	; 0x30
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff48 	bl	800097c <_ZN3SpiC1Ev>
	this->rst_pin = Gpio(EPD_RST_PORT, EPD_RST_PIN);
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af4:	4929      	ldr	r1, [pc, #164]	; (8000b9c <_ZN6EpaperC1Ev+0xe8>)
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ffc4 	bl	8000a84 <_ZN4GpioC1EP12GPIO_TypeDeft>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	461a      	mov	r2, r3
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	cb03      	ldmia	r3!, {r0, r1}
 8000b06:	6010      	str	r0, [r2, #0]
 8000b08:	6051      	str	r1, [r2, #4]
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	8113      	strh	r3, [r2, #8]
	this->dc_pin = Gpio(EPD_DC_PORT, EPD_DC_PIN);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	2240      	movs	r2, #64	; 0x40
 8000b14:	4922      	ldr	r1, [pc, #136]	; (8000ba0 <_ZN6EpaperC1Ev+0xec>)
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ffb4 	bl	8000a84 <_ZN4GpioC1EP12GPIO_TypeDeft>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f103 020c 	add.w	r2, r3, #12
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	cb03      	ldmia	r3!, {r0, r1}
 8000b28:	6010      	str	r0, [r2, #0]
 8000b2a:	6051      	str	r1, [r2, #4]
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	8113      	strh	r3, [r2, #8]
	this->cs_pin = Gpio(EPD_CS_PORT, EPD_CS_PIN);
 8000b30:	f107 0320 	add.w	r3, r7, #32
 8000b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b38:	4919      	ldr	r1, [pc, #100]	; (8000ba0 <_ZN6EpaperC1Ev+0xec>)
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ffa2 	bl	8000a84 <_ZN4GpioC1EP12GPIO_TypeDeft>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f103 0218 	add.w	r2, r3, #24
 8000b46:	f107 0320 	add.w	r3, r7, #32
 8000b4a:	cb03      	ldmia	r3!, {r0, r1}
 8000b4c:	6010      	str	r0, [r2, #0]
 8000b4e:	6051      	str	r1, [r2, #4]
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	8113      	strh	r3, [r2, #8]
	this->busy_pin = Gpio(EPD_BUSY_PORT, EPD_BUSY_PIN);
 8000b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5c:	4910      	ldr	r1, [pc, #64]	; (8000ba0 <_ZN6EpaperC1Ev+0xec>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff90 	bl	8000a84 <_ZN4GpioC1EP12GPIO_TypeDeft>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8000b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6e:	cb03      	ldmia	r3!, {r0, r1}
 8000b70:	6010      	str	r0, [r2, #0]
 8000b72:	6051      	str	r1, [r2, #4]
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	8113      	strh	r3, [r2, #8]

	this->port = Spi();
 8000b78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fefd 	bl	800097c <_ZN3SpiC1Ev>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3330      	adds	r3, #48	; 0x30
 8000b86:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000b8a:	2258      	movs	r2, #88	; 0x58
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f009 fed3 	bl	800a938 <memcpy>
}
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4618      	mov	r0, r3
 8000b96:	3790      	adds	r7, #144	; 0x90
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	40020800 	.word	0x40020800

08000ba4 <_ZN6Epaper4openEv>:

bool Epaper::open() {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	this->rst_pin.enable(GPIO_OUTPUT);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fe69 	bl	8000888 <_ZN4Gpio6enableE8GpioMode>
	this->dc_pin.enable(GPIO_OUTPUT);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	330c      	adds	r3, #12
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fe63 	bl	8000888 <_ZN4Gpio6enableE8GpioMode>
	this->cs_pin.enable(GPIO_OUTPUT);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3318      	adds	r3, #24
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fe5d 	bl	8000888 <_ZN4Gpio6enableE8GpioMode>
	this->busy_pin.enable(GPIO_INPUT);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3324      	adds	r3, #36	; 0x24
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fe57 	bl	8000888 <_ZN4Gpio6enableE8GpioMode>

	bool success = this->port.open(SPI1);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3330      	adds	r3, #48	; 0x30
 8000bde:	4905      	ldr	r1, [pc, #20]	; (8000bf4 <_ZN6Epaper4openEv+0x50>)
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff03 	bl	80009ec <_ZN3Spi4openEP11SPI_TypeDef>
 8000be6:	4603      	mov	r3, r0
 8000be8:	73fb      	strb	r3, [r7, #15]
	return success;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40013000 	.word	0x40013000

08000bf8 <_ZN6Epaper5resetEv>:

void Epaper::reset() {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	this->rst_pin.set_state(1);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2101      	movs	r1, #1
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fe6d 	bl	80008e4 <_ZN4Gpio9set_stateEi>
    Delay_ms(50);
 8000c0a:	2032      	movs	r0, #50	; 0x32
 8000c0c:	f007 fad4 	bl	80081b8 <HAL_Delay>
    this->rst_pin.set_state(0);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fe65 	bl	80008e4 <_ZN4Gpio9set_stateEi>
    Delay_ms(10);
 8000c1a:	200a      	movs	r0, #10
 8000c1c:	f007 facc 	bl	80081b8 <HAL_Delay>
    this->rst_pin.set_state(1);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2101      	movs	r1, #1
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fe5d 	bl	80008e4 <_ZN4Gpio9set_stateEi>
    Delay_ms(50);
 8000c2a:	2032      	movs	r0, #50	; 0x32
 8000c2c:	f007 fac4 	bl	80081b8 <HAL_Delay>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_ZN6Epaper8send_cmdEh>:

void Epaper::send_cmd(uint8_t reg) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	70fb      	strb	r3, [r7, #3]
	this->dc_pin.set_state(0);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	330c      	adds	r3, #12
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fe4a 	bl	80008e4 <_ZN4Gpio9set_stateEi>
    this->cs_pin.set_state(0);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3318      	adds	r3, #24
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fe44 	bl	80008e4 <_ZN4Gpio9set_stateEi>
    this->port.write_byte(reg);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3330      	adds	r3, #48	; 0x30
 8000c60:	78fa      	ldrb	r2, [r7, #3]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fee5 	bl	8000a34 <_ZN3Spi10write_byteEh>
    this->cs_pin.set_state(1);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3318      	adds	r3, #24
 8000c6e:	2101      	movs	r1, #1
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fe37 	bl	80008e4 <_ZN4Gpio9set_stateEi>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_ZN6Epaper9send_dataEh>:

void Epaper::send_data(uint8_t data) {
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	460b      	mov	r3, r1
 8000c88:	70fb      	strb	r3, [r7, #3]
	this->dc_pin.set_state(1);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	330c      	adds	r3, #12
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fe27 	bl	80008e4 <_ZN4Gpio9set_stateEi>
    this->cs_pin.set_state(0);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3318      	adds	r3, #24
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fe21 	bl	80008e4 <_ZN4Gpio9set_stateEi>
    this->port.write_byte(data);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3330      	adds	r3, #48	; 0x30
 8000ca6:	78fa      	ldrb	r2, [r7, #3]
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fec2 	bl	8000a34 <_ZN3Spi10write_byteEh>
    this->cs_pin.set_state(1);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3318      	adds	r3, #24
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fe14 	bl	80008e4 <_ZN4Gpio9set_stateEi>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_ZN6Epaper15wait_until_idleEv>:

void Epaper::wait_until_idle() {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	while(this->busy_pin.get_state() == 1) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3324      	adds	r3, #36	; 0x24
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fe32 	bl	800093a <_ZN4Gpio9get_stateEv>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	bf0c      	ite	eq
 8000cdc:	2301      	moveq	r3, #1
 8000cde:	2300      	movne	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <_ZN6Epaper15wait_until_idleEv+0x2a>
		Delay_ms(5);
 8000ce6:	2005      	movs	r0, #5
 8000ce8:	f007 fa66 	bl	80081b8 <HAL_Delay>
	while(this->busy_pin.get_state() == 1) {
 8000cec:	e7ee      	b.n	8000ccc <_ZN6Epaper15wait_until_idleEv+0x8>
	}
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <_ZN6Epaper15turn_on_displayEv>:

void Epaper::turn_on_display() {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
	this->send_cmd(0x22);
 8000cfe:	2122      	movs	r1, #34	; 0x22
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff99 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
	this->send_data(0xC7);
 8000d06:	21c7      	movs	r1, #199	; 0xc7
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ffb8 	bl	8000c7e <_ZN6Epaper9send_dataEh>
	this->send_cmd(0x20);
 8000d0e:	2120      	movs	r1, #32
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ff91 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
	this->wait_until_idle();
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffd4 	bl	8000cc4 <_ZN6Epaper15wait_until_idleEv>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_ZN6Epaper20turn_on_display_partEv>:

void Epaper::turn_on_display_part() {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	this->send_cmd(0x22);
 8000d2c:	2122      	movs	r1, #34	; 0x22
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ff82 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
	this->send_data(0x0C);
 8000d34:	210c      	movs	r1, #12
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffa1 	bl	8000c7e <_ZN6Epaper9send_dataEh>
	this->send_cmd(0x20);
 8000d3c:	2120      	movs	r1, #32
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ff7a 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
	this->wait_until_idle();
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ffbd 	bl	8000cc4 <_ZN6Epaper15wait_until_idleEv>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <_ZN6Epaper4initE10UpdateMode>:

void Epaper::init(UpdateMode mode) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
	uint8_t count = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
	this->reset();
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff47 	bl	8000bf8 <_ZN6Epaper5resetEv>

	if (mode == EPD_UPDATE_FULL) {
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f040 80bc 	bne.w	8000eea <_ZN6Epaper4initE10UpdateMode+0x196>

		this->wait_until_idle();
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ffa6 	bl	8000cc4 <_ZN6Epaper15wait_until_idleEv>
		this->send_cmd(0x12);
 8000d78:	2112      	movs	r1, #18
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ff5c 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->wait_until_idle();
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ff9f 	bl	8000cc4 <_ZN6Epaper15wait_until_idleEv>

		this->send_cmd(0x74);	// set analog block control
 8000d86:	2174      	movs	r1, #116	; 0x74
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ff55 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->send_data(0x54);
 8000d8e:	2154      	movs	r1, #84	; 0x54
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff74 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_cmd(0x7E);	// set digital block control
 8000d96:	217e      	movs	r1, #126	; 0x7e
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff4d 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->send_data(0x3B);
 8000d9e:	213b      	movs	r1, #59	; 0x3b
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff6c 	bl	8000c7e <_ZN6Epaper9send_dataEh>

		this->send_cmd(0x01);	// driver output control
 8000da6:	2101      	movs	r1, #1
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff45 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->send_data(0xF9);
 8000dae:	21f9      	movs	r1, #249	; 0xf9
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff64 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_data(0x00);
 8000db6:	2100      	movs	r1, #0
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff60 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_data(0x00);
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff5c 	bl	8000c7e <_ZN6Epaper9send_dataEh>

		this->send_cmd(0x11);	// data entry mode
 8000dc6:	2111      	movs	r1, #17
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff35 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->send_data(0x01);
 8000dce:	2101      	movs	r1, #1
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff54 	bl	8000c7e <_ZN6Epaper9send_dataEh>

		this->send_cmd(0x44);	// set Ram-X address start/end position
 8000dd6:	2144      	movs	r1, #68	; 0x44
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff2d 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->send_data(0x00);
 8000dde:	2100      	movs	r1, #0
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff4c 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_data(0x0F);
 8000de6:	210f      	movs	r1, #15
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff48 	bl	8000c7e <_ZN6Epaper9send_dataEh>

		this->send_cmd(0x45);	// set Ram-Y address start/end position
 8000dee:	2145      	movs	r1, #69	; 0x45
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff21 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->send_data(0xF9);
 8000df6:	21f9      	movs	r1, #249	; 0xf9
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff40 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_data(0x00);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff3c 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_data(0x00);
 8000e06:	2100      	movs	r1, #0
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff38 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_data(0x00);
 8000e0e:	2100      	movs	r1, #0
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff ff34 	bl	8000c7e <_ZN6Epaper9send_dataEh>

		this->send_cmd(0x3C);	// BorderWavefrom
 8000e16:	213c      	movs	r1, #60	; 0x3c
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff0d 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->send_data(0x03);
 8000e1e:	2103      	movs	r1, #3
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ff2c 	bl	8000c7e <_ZN6Epaper9send_dataEh>

		this->send_cmd(0x2C);	// VCOM Voltage
 8000e26:	212c      	movs	r1, #44	; 0x2c
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff05 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->send_data(0x55);
 8000e2e:	2155      	movs	r1, #85	; 0x55
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff24 	bl	8000c7e <_ZN6Epaper9send_dataEh>

		this->send_cmd(0x03);
 8000e36:	2103      	movs	r1, #3
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff fefd 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->send_data(Epaper::full_update_lut[70]);
 8000e3e:	2315      	movs	r3, #21
 8000e40:	4619      	mov	r1, r3
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ff1b 	bl	8000c7e <_ZN6Epaper9send_dataEh>

		this->send_cmd(0x04);
 8000e48:	2104      	movs	r1, #4
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff fef4 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->send_data(Epaper::full_update_lut[71]);
 8000e50:	2341      	movs	r3, #65	; 0x41
 8000e52:	4619      	mov	r1, r3
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff12 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_data(Epaper::full_update_lut[72]);
 8000e5a:	23a8      	movs	r3, #168	; 0xa8
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ff0d 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_data(Epaper::full_update_lut[73]);
 8000e64:	2332      	movs	r3, #50	; 0x32
 8000e66:	4619      	mov	r1, r3
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff08 	bl	8000c7e <_ZN6Epaper9send_dataEh>

		this->send_cmd(0x3A);	// Dummy line
 8000e6e:	213a      	movs	r1, #58	; 0x3a
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff fee1 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->send_data(Epaper::full_update_lut[74]);
 8000e76:	2330      	movs	r3, #48	; 0x30
 8000e78:	4619      	mov	r1, r3
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff feff 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_cmd(0x3B);
 8000e80:	213b      	movs	r1, #59	; 0x3b
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff fed8 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->send_data(Epaper::full_update_lut[75]);
 8000e88:	230a      	movs	r3, #10
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff fef6 	bl	8000c7e <_ZN6Epaper9send_dataEh>

		this->send_cmd(0x32);
 8000e92:	2132      	movs	r1, #50	; 0x32
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff fecf 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		for (count = 0; count < 70; count++) {
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	2b45      	cmp	r3, #69	; 0x45
 8000ea2:	d80a      	bhi.n	8000eba <_ZN6Epaper4initE10UpdateMode+0x166>
			this->send_data(Epaper::full_update_lut[count]);
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	4a3f      	ldr	r2, [pc, #252]	; (8000fa4 <_ZN6Epaper4initE10UpdateMode+0x250>)
 8000ea8:	5cd3      	ldrb	r3, [r2, r3]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff fee6 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		for (count = 0; count < 70; count++) {
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	e7f1      	b.n	8000e9e <_ZN6Epaper4initE10UpdateMode+0x14a>
		}

		this->send_cmd(0x4E);	// Set ram x address count to 0
 8000eba:	214e      	movs	r1, #78	; 0x4e
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff febb 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->send_data(0x00);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff feda 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_cmd(0x4F);	// Set ram y address count to 0x127
 8000eca:	214f      	movs	r1, #79	; 0x4f
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff feb3 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->send_data(0xF9);
 8000ed2:	21f9      	movs	r1, #249	; 0xf9
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff fed2 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_data(0x00);
 8000eda:	2100      	movs	r1, #0
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff fece 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->wait_until_idle();
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff feee 	bl	8000cc4 <_ZN6Epaper15wait_until_idleEv>
		this->send_data(0x01);

	} else {
		// ERROR: unsupported mode
	}
}
 8000ee8:	e058      	b.n	8000f9c <_ZN6Epaper4initE10UpdateMode+0x248>
	} else if (mode == EPD_UPDATE_PARTIAL) {
 8000eea:	78fb      	ldrb	r3, [r7, #3]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d155      	bne.n	8000f9c <_ZN6Epaper4initE10UpdateMode+0x248>
		this->send_cmd(0x2C);	// VCOM Voltage
 8000ef0:	212c      	movs	r1, #44	; 0x2c
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fea0 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->send_cmd(0x26);
 8000ef8:	2126      	movs	r1, #38	; 0x26
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fe9c 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->wait_until_idle();
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fedf 	bl	8000cc4 <_ZN6Epaper15wait_until_idleEv>
		this->send_cmd(0x32);
 8000f06:	2132      	movs	r1, #50	; 0x32
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff fe95 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		for(count = 0; count < 70; count++) {
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	2b45      	cmp	r3, #69	; 0x45
 8000f16:	d80a      	bhi.n	8000f2e <_ZN6Epaper4initE10UpdateMode+0x1da>
			this->send_data(Epaper::partial_update_lut[count]);
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <_ZN6Epaper4initE10UpdateMode+0x254>)
 8000f1c:	5cd3      	ldrb	r3, [r2, r3]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff feac 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		for(count = 0; count < 70; count++) {
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e7f1      	b.n	8000f12 <_ZN6Epaper4initE10UpdateMode+0x1be>
		this->send_cmd(0x37);
 8000f2e:	2137      	movs	r1, #55	; 0x37
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff fe81 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->send_data(0x00);
 8000f36:	2100      	movs	r1, #0
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff fea0 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_data(0x00);
 8000f3e:	2100      	movs	r1, #0
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff fe9c 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_data(0x00);
 8000f46:	2100      	movs	r1, #0
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff fe98 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_data(0x00);
 8000f4e:	2100      	movs	r1, #0
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fe94 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_data(0x40);
 8000f56:	2140      	movs	r1, #64	; 0x40
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff fe90 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_data(0x00);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff fe8c 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_data(0x00);
 8000f66:	2100      	movs	r1, #0
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff fe88 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_cmd(0x22);
 8000f6e:	2122      	movs	r1, #34	; 0x22
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff fe61 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->send_data(0xC0);
 8000f76:	21c0      	movs	r1, #192	; 0xc0
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff fe80 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		this->send_cmd(0x20);
 8000f7e:	2120      	movs	r1, #32
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff fe59 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->wait_until_idle();
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff fe9c 	bl	8000cc4 <_ZN6Epaper15wait_until_idleEv>
		this->send_cmd(0x3C);	// BorderWavefrom
 8000f8c:	213c      	movs	r1, #60	; 0x3c
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff fe52 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
		this->send_data(0x01);
 8000f94:	2101      	movs	r1, #1
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff fe71 	bl	8000c7e <_ZN6Epaper9send_dataEh>
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	0800bc34 	.word	0x0800bc34
 8000fa8:	0800bc80 	.word	0x0800bc80

08000fac <_ZN6Epaper12display_baseER5Image>:
	}
	this->turn_on_display();
	this->sleep();
}

void Epaper::display_base(Image& img) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
	uint8_t *image_buf = img.get_image();
 8000fb6:	6838      	ldr	r0, [r7, #0]
 8000fb8:	f001 f8ab 	bl	8002112 <_ZN5Image9get_imageEv>
 8000fbc:	6178      	str	r0, [r7, #20]
	uint16_t width = (EPD_WIDTH % 8 == 0) ? (EPD_WIDTH / 8 ) : (EPD_WIDTH / 8 + 1);
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	827b      	strh	r3, [r7, #18]
	uint16_t height = EPD_HEIGHT;
 8000fc2:	23fa      	movs	r3, #250	; 0xfa
 8000fc4:	823b      	strh	r3, [r7, #16]

	uint32_t addr = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
	this->send_cmd(0x24);
 8000fca:	2124      	movs	r1, #36	; 0x24
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff fe33 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
	for(uint16_t j = 0; j < height; j++) {
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	83fb      	strh	r3, [r7, #30]
 8000fd6:	8bfa      	ldrh	r2, [r7, #30]
 8000fd8:	8a3b      	ldrh	r3, [r7, #16]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d21c      	bcs.n	8001018 <_ZN6Epaper12display_baseER5Image+0x6c>
		for(uint16_t i = 0; i < width; i++) {
 8000fde:	2300      	movs	r3, #0
 8000fe0:	83bb      	strh	r3, [r7, #28]
 8000fe2:	8bba      	ldrh	r2, [r7, #28]
 8000fe4:	8a7b      	ldrh	r3, [r7, #18]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d212      	bcs.n	8001010 <_ZN6Epaper12display_baseER5Image+0x64>
			addr = i + j * width;
 8000fea:	8bba      	ldrh	r2, [r7, #28]
 8000fec:	8bfb      	ldrh	r3, [r7, #30]
 8000fee:	8a79      	ldrh	r1, [r7, #18]
 8000ff0:	fb01 f303 	mul.w	r3, r1, r3
 8000ff4:	4413      	add	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]
			this->send_data(image_buf[addr]);
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff fe3b 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		for(uint16_t i = 0; i < width; i++) {
 8001008:	8bbb      	ldrh	r3, [r7, #28]
 800100a:	3301      	adds	r3, #1
 800100c:	83bb      	strh	r3, [r7, #28]
 800100e:	e7e8      	b.n	8000fe2 <_ZN6Epaper12display_baseER5Image+0x36>
	for(uint16_t j = 0; j < height; j++) {
 8001010:	8bfb      	ldrh	r3, [r7, #30]
 8001012:	3301      	adds	r3, #1
 8001014:	83fb      	strh	r3, [r7, #30]
 8001016:	e7de      	b.n	8000fd6 <_ZN6Epaper12display_baseER5Image+0x2a>
		}
	}

	this->send_cmd(0x26);
 8001018:	2126      	movs	r1, #38	; 0x26
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fe0c 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
	for(uint16_t j = 0; j < height; j++) {
 8001020:	2300      	movs	r3, #0
 8001022:	837b      	strh	r3, [r7, #26]
 8001024:	8b7a      	ldrh	r2, [r7, #26]
 8001026:	8a3b      	ldrh	r3, [r7, #16]
 8001028:	429a      	cmp	r2, r3
 800102a:	d21c      	bcs.n	8001066 <_ZN6Epaper12display_baseER5Image+0xba>
		for(uint16_t i = 0; i < width; i++) {
 800102c:	2300      	movs	r3, #0
 800102e:	833b      	strh	r3, [r7, #24]
 8001030:	8b3a      	ldrh	r2, [r7, #24]
 8001032:	8a7b      	ldrh	r3, [r7, #18]
 8001034:	429a      	cmp	r2, r3
 8001036:	d212      	bcs.n	800105e <_ZN6Epaper12display_baseER5Image+0xb2>
			addr = i + j * width;
 8001038:	8b3a      	ldrh	r2, [r7, #24]
 800103a:	8b7b      	ldrh	r3, [r7, #26]
 800103c:	8a79      	ldrh	r1, [r7, #18]
 800103e:	fb01 f303 	mul.w	r3, r1, r3
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
			this->send_data(image_buf[addr]);
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	4619      	mov	r1, r3
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff fe14 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		for(uint16_t i = 0; i < width; i++) {
 8001056:	8b3b      	ldrh	r3, [r7, #24]
 8001058:	3301      	adds	r3, #1
 800105a:	833b      	strh	r3, [r7, #24]
 800105c:	e7e8      	b.n	8001030 <_ZN6Epaper12display_baseER5Image+0x84>
	for(uint16_t j = 0; j < height; j++) {
 800105e:	8b7b      	ldrh	r3, [r7, #26]
 8001060:	3301      	adds	r3, #1
 8001062:	837b      	strh	r3, [r7, #26]
 8001064:	e7de      	b.n	8001024 <_ZN6Epaper12display_baseER5Image+0x78>
		}
	}

	this->turn_on_display();
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff fe45 	bl	8000cf6 <_ZN6Epaper15turn_on_displayEv>
	this->sleep();
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 f841 	bl	80010f4 <_ZN6Epaper5sleepEv>
}
 8001072:	bf00      	nop
 8001074:	3720      	adds	r7, #32
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <_ZN6Epaper12display_partER5Image>:

void Epaper::display_part(Image& img) {
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
	uint8_t *image_buf = img.get_image();
 8001084:	6838      	ldr	r0, [r7, #0]
 8001086:	f001 f844 	bl	8002112 <_ZN5Image9get_imageEv>
 800108a:	6138      	str	r0, [r7, #16]
	uint16_t width = (EPD_WIDTH % 8 == 0) ? (EPD_WIDTH / 8 ) : (EPD_WIDTH / 8 + 1);
 800108c:	2310      	movs	r3, #16
 800108e:	81fb      	strh	r3, [r7, #14]
	uint16_t height = EPD_HEIGHT;
 8001090:	23fa      	movs	r3, #250	; 0xfa
 8001092:	81bb      	strh	r3, [r7, #12]

	this->send_cmd(0x24);
 8001094:	2124      	movs	r1, #36	; 0x24
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fdce 	bl	8000c38 <_ZN6Epaper8send_cmdEh>
	for(uint16_t j = 0; j < height; j++) {
 800109c:	2300      	movs	r3, #0
 800109e:	82fb      	strh	r3, [r7, #22]
 80010a0:	8afa      	ldrh	r2, [r7, #22]
 80010a2:	89bb      	ldrh	r3, [r7, #12]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d21b      	bcs.n	80010e0 <_ZN6Epaper12display_partER5Image+0x66>
		for(uint16_t i = 0; i < width; i++) {
 80010a8:	2300      	movs	r3, #0
 80010aa:	82bb      	strh	r3, [r7, #20]
 80010ac:	8aba      	ldrh	r2, [r7, #20]
 80010ae:	89fb      	ldrh	r3, [r7, #14]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d211      	bcs.n	80010d8 <_ZN6Epaper12display_partER5Image+0x5e>
			this->send_data(image_buf[i + j * width]);
 80010b4:	8aba      	ldrh	r2, [r7, #20]
 80010b6:	8afb      	ldrh	r3, [r7, #22]
 80010b8:	89f9      	ldrh	r1, [r7, #14]
 80010ba:	fb01 f303 	mul.w	r3, r1, r3
 80010be:	4413      	add	r3, r2
 80010c0:	461a      	mov	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4413      	add	r3, r2
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff fdd7 	bl	8000c7e <_ZN6Epaper9send_dataEh>
		for(uint16_t i = 0; i < width; i++) {
 80010d0:	8abb      	ldrh	r3, [r7, #20]
 80010d2:	3301      	adds	r3, #1
 80010d4:	82bb      	strh	r3, [r7, #20]
 80010d6:	e7e9      	b.n	80010ac <_ZN6Epaper12display_partER5Image+0x32>
	for(uint16_t j = 0; j < height; j++) {
 80010d8:	8afb      	ldrh	r3, [r7, #22]
 80010da:	3301      	adds	r3, #1
 80010dc:	82fb      	strh	r3, [r7, #22]
 80010de:	e7df      	b.n	80010a0 <_ZN6Epaper12display_partER5Image+0x26>
		}
	}
	this->turn_on_display_part();
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff fe1f 	bl	8000d24 <_ZN6Epaper20turn_on_display_partEv>
	this->sleep();
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f804 	bl	80010f4 <_ZN6Epaper5sleepEv>
}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <_ZN6Epaper5sleepEv>:

void Epaper::sleep() {
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

	this->send_cmd(0x10);	// Enter deep sleep
	this->send_data(0x01);
	Delay_ms(100);
	*/
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <_ZN9LineEntry9is_resultEv>:
		void add_symbol(Symbol& val);
		bool can_eval();
		string to_string();
		int size();
		bool get(int idx, Symbol* sym);
		bool is_result() { return this->m_result; };
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7b1b      	ldrb	r3, [r3, #12]
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <_ZN17ExpressionDisplay9num_linesEv>:
	void eval_expression(LineEntry *line);
public:
	ExpressionDisplay() {  };
	void new_line();
	void key_event(KeyEvent* event);
	int num_lines() { return this->m_stack.size(); };
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fa16 	bl	800155c <_ZNKSt6vectorIP9LineEntrySaIS1_EE4sizeEv>
 8001130:	4603      	mov	r3, r0
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <_ZN17ExpressionDisplay4lineEt>:
	LineEntry *line(uint16_t idx) { return this->m_stack[idx]; };
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	807b      	strh	r3, [r7, #2]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	887a      	ldrh	r2, [r7, #2]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fa16 	bl	800157e <_ZNSt6vectorIP9LineEntrySaIS1_EEixEj>
 8001152:	4603      	mov	r3, r0
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_ZN3GuiC1Ev>:

#include "EPD.h"
#include "ExpressionDisplay.h"
#include "LineEntry.h"

Gui::Gui() :
 800115e:	b580      	push	{r7, lr}
 8001160:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8001164:	b084      	sub	sp, #16
 8001166:	af02      	add	r7, sp, #8
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	3b04      	subs	r3, #4
 800116e:	6018      	str	r0, [r3, #0]
m_num_expr(1)
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	3b04      	subs	r3, #4
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fc9b 	bl	8000ab4 <_ZN6EpaperC1Ev>
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	3b04      	subs	r3, #4
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3388      	adds	r3, #136	; 0x88
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fa08 	bl	800159e <_ZN5ImageC1Ev>
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	3b04      	subs	r3, #4
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800119a:	331c      	adds	r3, #28
 800119c:	2201      	movs	r2, #1
 800119e:	601a      	str	r2, [r3, #0]
{
	this->m_img = Image(EPD_WIDTH, EPD_HEIGHT, 270, WHITE);
 80011a0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80011a4:	381c      	subs	r0, #28
 80011a6:	23ff      	movs	r3, #255	; 0xff
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80011ae:	22fa      	movs	r2, #250	; 0xfa
 80011b0:	217a      	movs	r1, #122	; 0x7a
 80011b2:	f000 fa2c 	bl	800160e <_ZN5ImageC1Etttt>
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	3b04      	subs	r3, #4
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011c2:	3b1c      	subs	r3, #28
 80011c4:	f102 0088 	add.w	r0, r2, #136	; 0x88
 80011c8:	4619      	mov	r1, r3
 80011ca:	f640 73b2 	movw	r3, #4018	; 0xfb2
 80011ce:	461a      	mov	r2, r3
 80011d0:	f009 fbb2 	bl	800a938 <memcpy>
	this->m_img.set_mirroring(MIRROR_HORIZONTAL);
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	3b04      	subs	r3, #4
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3388      	adds	r3, #136	; 0x88
 80011de:	2101      	movs	r1, #1
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 fac4 	bl	800176e <_ZN5Image13set_mirroringEh>
	this->m_img.clear(WHITE);
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	3b04      	subs	r3, #4
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	3388      	adds	r3, #136	; 0x88
 80011f0:	21ff      	movs	r1, #255	; 0xff
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fc3a 	bl	8001a6c <_ZN5Image5clearEt>
	this->draw_result_border();
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	3b04      	subs	r3, #4
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	f000 f98c 	bl	800151c <_ZN3Gui18draw_result_borderEv>
	this->draw_status_bar();
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	3b04      	subs	r3, #4
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	f000 f90a 	bl	8001424 <_ZN3Gui15draw_status_barEv>

	this->m_disp = Epaper();
 8001210:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fc4d 	bl	8000ab4 <_ZN6EpaperC1Ev>
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	3b04      	subs	r3, #4
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8001228:	2288      	movs	r2, #136	; 0x88
 800122a:	4619      	mov	r1, r3
 800122c:	f009 fb84 	bl	800a938 <memcpy>
}
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	3b04      	subs	r3, #4
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <_ZN3Gui4openEv>:

void Gui::open() {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	this->m_disp.open();
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fca8 	bl	8000ba4 <_ZN6Epaper4openEv>
	this->m_disp.init(EPD_UPDATE_FULL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fd7b 	bl	8000d54 <_ZN6Epaper4initE10UpdateMode>
	this->m_disp.display_base(this->m_img);
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3388      	adds	r3, #136	; 0x88
 8001264:	4619      	mov	r1, r3
 8001266:	4610      	mov	r0, r2
 8001268:	f7ff fea0 	bl	8000fac <_ZN6Epaper12display_baseER5Image>
	this->m_disp.init(EPD_UPDATE_PARTIAL);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2101      	movs	r1, #1
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fd6f 	bl	8000d54 <_ZN6Epaper4initE10UpdateMode>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <_ZN3Gui6updateER17ExpressionDisplay>:

void Gui::update(ExpressionDisplay& expr) {
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b093      	sub	sp, #76	; 0x4c
 8001284:	af04      	add	r7, sp, #16
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
	UpdateMode mode = EPD_UPDATE_PARTIAL;
 800128a:	2301      	movs	r3, #1
 800128c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	this->m_img.clear(WHITE);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3388      	adds	r3, #136	; 0x88
 8001294:	21ff      	movs	r1, #255	; 0xff
 8001296:	4618      	mov	r0, r3
 8001298:	f000 fbe8 	bl	8001a6c <_ZN5Image5clearEt>

	this->draw_result_border();
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f93d 	bl	800151c <_ZN3Gui18draw_result_borderEv>
	this->draw_status_bar();
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f8be 	bl	8001424 <_ZN3Gui15draw_status_barEv>

	int cur_lines = expr.num_lines();
 80012a8:	6838      	ldr	r0, [r7, #0]
 80012aa:	f7ff ff39 	bl	8001120 <_ZN17ExpressionDisplay9num_linesEv>
 80012ae:	6338      	str	r0, [r7, #48]	; 0x30
	if (cur_lines != this->m_num_expr) {
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80012b6:	331c      	adds	r3, #28
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012bc:	429a      	cmp	r2, r3
 80012be:	d002      	beq.n	80012c6 <_ZN3Gui6updateER17ExpressionDisplay+0x46>
		mode = EPD_UPDATE_FULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	this->m_num_expr = cur_lines;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80012cc:	331c      	adds	r3, #28
 80012ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012d0:	601a      	str	r2, [r3, #0]
	int last_line = 0;//cur_lines - MAX_EXPRESSIONS;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
	//if (last_line < 0) { last_line = 0; }


	bool first = true;
 80012d6:	2301      	movs	r3, #1
 80012d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t x_coord, y_coord = 100;
 80012dc:	2364      	movs	r3, #100	; 0x64
 80012de:	857b      	strh	r3, [r7, #42]	; 0x2a
	for (; cur_lines > last_line; cur_lines--) {
 80012e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dd67      	ble.n	80013b8 <_ZN3Gui6updateER17ExpressionDisplay+0x138>
		LineEntry *last_line = expr.line(cur_lines-1);
 80012e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	3b01      	subs	r3, #1
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4619      	mov	r1, r3
 80012f2:	6838      	ldr	r0, [r7, #0]
 80012f4:	f7ff ff21 	bl	800113a <_ZN17ExpressionDisplay4lineEt>
 80012f8:	6238      	str	r0, [r7, #32]
		string line_string = last_line->to_string();
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	6a39      	ldr	r1, [r7, #32]
 8001300:	4618      	mov	r0, r3
 8001302:	f006 f871 	bl	80073e8 <_ZN9LineEntry9to_stringB5cxx11Ev>
		x_coord = EXPRESSION_BORDER;
 8001306:	2305      	movs	r3, #5
 8001308:	85bb      	strh	r3, [r7, #44]	; 0x2c

		if(last_line->is_result()) {
 800130a:	6a38      	ldr	r0, [r7, #32]
 800130c:	f7ff fefc 	bl	8001108 <_ZN9LineEntry9is_resultEv>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <_ZN3Gui6updateER17ExpressionDisplay+0xa6>
			y_coord -= 20;
 8001316:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001318:	3b14      	subs	r3, #20
 800131a:	857b      	strh	r3, [r7, #42]	; 0x2a
			x_coord = this->result_x();
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 f86f 	bl	8001400 <_ZN3Gui8result_xEv>
 8001322:	4603      	mov	r3, r0
 8001324:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}

		if (y_coord <= 0) {
 8001326:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <_ZN3Gui6updateER17ExpressionDisplay+0xb0>
 800132c:	2400      	movs	r4, #0
			break;
 800132e:	e037      	b.n	80013a0 <_ZN3Gui6updateER17ExpressionDisplay+0x120>
		}

		this->m_img.draw_string(x_coord, y_coord, line_string.c_str(), &Font20, WHITE, BLACK);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f103 0488 	add.w	r4, r3, #136	; 0x88
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	4618      	mov	r0, r3
 800133c:	f009 fa4b 	bl	800a7d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001340:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001342:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8001344:	2300      	movs	r3, #0
 8001346:	9302      	str	r3, [sp, #8]
 8001348:	23ff      	movs	r3, #255	; 0xff
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <_ZN3Gui6updateER17ExpressionDisplay+0x17c>)
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	4603      	mov	r3, r0
 8001352:	4620      	mov	r0, r4
 8001354:	f000 fe88 	bl	8002068 <_ZN5Image11draw_stringEttPKcP6_tFonttt>
	    if (first) {
 8001358:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800135c:	2b00      	cmp	r3, #0
 800135e:	d01e      	beq.n	800139e <_ZN3Gui6updateER17ExpressionDisplay+0x11e>
	    	x_coord += line_string.length() * Font20.Width;
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4618      	mov	r0, r3
 8001366:	f009 f97e 	bl	800a666 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800136a:	4602      	mov	r2, r0
 800136c:	4b23      	ldr	r3, [pc, #140]	; (80013fc <_ZN3Gui6updateER17ExpressionDisplay+0x17c>)
 800136e:	889b      	ldrh	r3, [r3, #4]
 8001370:	fb03 f302 	mul.w	r3, r3, r2
 8001374:	b29a      	uxth	r2, r3
 8001376:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001378:	4413      	add	r3, r2
 800137a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    	this->m_img.draw_char(x_coord, y_coord, '_', &Font20, BLACK, WHITE);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8001382:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001384:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8001386:	23ff      	movs	r3, #255	; 0xff
 8001388:	9302      	str	r3, [sp, #8]
 800138a:	2300      	movs	r3, #0
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <_ZN3Gui6updateER17ExpressionDisplay+0x17c>)
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	235f      	movs	r3, #95	; 0x5f
 8001394:	f000 fdc4 	bl	8001f20 <_ZN5Image9draw_charEttcP6_tFonttt>
	    	first = false;
 8001398:	2300      	movs	r3, #0
 800139a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800139e:	2401      	movs	r4, #1
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	4618      	mov	r0, r3
 80013a6:	f009 f92d 	bl	800a604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013aa:	2c01      	cmp	r4, #1
 80013ac:	d104      	bne.n	80013b8 <_ZN3Gui6updateER17ExpressionDisplay+0x138>
		string line_string = last_line->to_string();
 80013ae:	bf00      	nop
	for (; cur_lines > last_line; cur_lines--) {
 80013b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b2:	3b01      	subs	r3, #1
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
 80013b6:	e793      	b.n	80012e0 <_ZN3Gui6updateER17ExpressionDisplay+0x60>
	    }
	}

	if (mode == EPD_UPDATE_PARTIAL) {
 80013b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d10c      	bne.n	80013da <_ZN3Gui6updateER17ExpressionDisplay+0x15a>
		//this->m_disp.set_power(1);
		this->m_disp.init(EPD_UPDATE_PARTIAL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2101      	movs	r1, #1
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fcc5 	bl	8000d54 <_ZN6Epaper4initE10UpdateMode>
		this->m_disp.display_part(this->m_img);
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3388      	adds	r3, #136	; 0x88
 80013d0:	4619      	mov	r1, r3
 80013d2:	4610      	mov	r0, r2
 80013d4:	f7ff fe51 	bl	800107a <_ZN6Epaper12display_partER5Image>
		//this->m_disp.set_power(1);
		this->m_disp.init(EPD_UPDATE_FULL);
		this->m_disp.display_base(this->m_img);
		//this->m_disp.set_power(0);
	}
}
 80013d8:	e00b      	b.n	80013f2 <_ZN3Gui6updateER17ExpressionDisplay+0x172>
		this->m_disp.init(EPD_UPDATE_FULL);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fcb8 	bl	8000d54 <_ZN6Epaper4initE10UpdateMode>
		this->m_disp.display_base(this->m_img);
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3388      	adds	r3, #136	; 0x88
 80013ea:	4619      	mov	r1, r3
 80013ec:	4610      	mov	r0, r2
 80013ee:	f7ff fddd 	bl	8000fac <_ZN6Epaper12display_baseER5Image>
}
 80013f2:	bf00      	nop
 80013f4:	373c      	adds	r7, #60	; 0x3c
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd90      	pop	{r4, r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000008 	.word	0x20000008

08001400 <_ZN3Gui8result_xEv>:

int Gui::result_x() {
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	return EPD_HEIGHT -
			 (1 * EXPRESSION_BORDER) -
			 (RESULT_CHARS * Font20.Width);
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <_ZN3Gui8result_xEv+0x20>)
 800140a:	889b      	ldrh	r3, [r3, #4]
 800140c:	461a      	mov	r2, r3
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	33f5      	adds	r3, #245	; 0xf5
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	20000008 	.word	0x20000008

08001424 <_ZN3Gui15draw_status_barEv>:

void Gui::draw_status_bar() {
 8001424:	b5b0      	push	{r4, r5, r7, lr}
 8001426:	b096      	sub	sp, #88	; 0x58
 8001428:	af04      	add	r7, sp, #16
 800142a:	6078      	str	r0, [r7, #4]
	string expr_banner = "Expression";
 800142c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001430:	4618      	mov	r0, r3
 8001432:	f009 f804 	bl	800a43e <_ZNSaIcEC1Ev>
 8001436:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800143a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143e:	4934      	ldr	r1, [pc, #208]	; (8001510 <_ZN3Gui15draw_status_barEv+0xec>)
 8001440:	4618      	mov	r0, r3
 8001442:	f009 f9f1 	bl	800a828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001446:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800144a:	4618      	mov	r0, r3
 800144c:	f008 fff8 	bl	800a440 <_ZNSaIcED1Ev>
	string result_banner = "Roll";
 8001450:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001454:	4618      	mov	r0, r3
 8001456:	f008 fff2 	bl	800a43e <_ZNSaIcEC1Ev>
 800145a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	492c      	ldr	r1, [pc, #176]	; (8001514 <_ZN3Gui15draw_status_barEv+0xf0>)
 8001464:	4618      	mov	r0, r3
 8001466:	f009 f9df 	bl	800a828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800146a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800146e:	4618      	mov	r0, r3
 8001470:	f008 ffe6 	bl	800a440 <_ZNSaIcED1Ev>
	int result_banner_loc =  this->result_x();
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ffc3 	bl	8001400 <_ZN3Gui8result_xEv>
 800147a:	6478      	str	r0, [r7, #68]	; 0x44

	this->m_img.draw_rect(0, 0, EPD_HEIGHT, 15, BLACK, POINT_SIZE_1X1, DRAW_FILL_FULL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8001482:	2301      	movs	r3, #1
 8001484:	9303      	str	r3, [sp, #12]
 8001486:	2301      	movs	r3, #1
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	2300      	movs	r3, #0
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	230f      	movs	r3, #15
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	23fa      	movs	r3, #250	; 0xfa
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	f000 fcba 	bl	8001e10 <_ZN5Image9draw_rectEttttt9PointSize9FillStyle>
	this->m_img.draw_string(EXPRESSION_BORDER, 2, expr_banner.c_str(),
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f103 0488 	add.w	r4, r3, #136	; 0x88
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	4618      	mov	r0, r3
 80014a8:	f009 f995 	bl	800a7d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80014ac:	4602      	mov	r2, r0
 80014ae:	23ff      	movs	r3, #255	; 0xff
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	2300      	movs	r3, #0
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <_ZN3Gui15draw_status_barEv+0xf4>)
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	4613      	mov	r3, r2
 80014bc:	2202      	movs	r2, #2
 80014be:	2105      	movs	r1, #5
 80014c0:	4620      	mov	r0, r4
 80014c2:	f000 fdd1 	bl	8002068 <_ZN5Image11draw_stringEttPKcP6_tFonttt>
			&Font12, BLACK, WHITE);
	this->m_img.draw_string(result_banner_loc, 2, result_banner.c_str(),
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f103 0488 	add.w	r4, r3, #136	; 0x88
 80014cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014ce:	b29d      	uxth	r5, r3
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	4618      	mov	r0, r3
 80014d6:	f009 f97e 	bl	800a7d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80014da:	4602      	mov	r2, r0
 80014dc:	23ff      	movs	r3, #255	; 0xff
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	2300      	movs	r3, #0
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <_ZN3Gui15draw_status_barEv+0xf4>)
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	4613      	mov	r3, r2
 80014ea:	2202      	movs	r2, #2
 80014ec:	4629      	mov	r1, r5
 80014ee:	4620      	mov	r0, r4
 80014f0:	f000 fdba 	bl	8002068 <_ZN5Image11draw_stringEttPKcP6_tFonttt>
	string result_banner = "Roll";
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	4618      	mov	r0, r3
 80014fa:	f009 f883 	bl	800a604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	string expr_banner = "Expression";
 80014fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001502:	4618      	mov	r0, r3
 8001504:	f009 f87e 	bl	800a604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			&Font12, BLACK, WHITE);

}
 8001508:	bf00      	nop
 800150a:	3748      	adds	r7, #72	; 0x48
 800150c:	46bd      	mov	sp, r7
 800150e:	bdb0      	pop	{r4, r5, r7, pc}
 8001510:	0800bb3c 	.word	0x0800bb3c
 8001514:	0800bb48 	.word	0x0800bb48
 8001518:	20000000 	.word	0x20000000

0800151c <_ZN3Gui18draw_result_borderEv>:

void Gui::draw_result_border() {
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af04      	add	r7, sp, #16
 8001522:	6078      	str	r0, [r7, #4]
	 uint16_t x = this->result_x() - EXPRESSION_BORDER;
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ff6b 	bl	8001400 <_ZN3Gui8result_xEv>
 800152a:	4603      	mov	r3, r0
 800152c:	b29b      	uxth	r3, r3
 800152e:	3b05      	subs	r3, #5
 8001530:	81fb      	strh	r3, [r7, #14]

	 this->m_img.draw_line(x, EPD_WIDTH, x, 0,
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8001538:	89fa      	ldrh	r2, [r7, #14]
 800153a:	89f9      	ldrh	r1, [r7, #14]
 800153c:	2300      	movs	r3, #0
 800153e:	9303      	str	r3, [sp, #12]
 8001540:	2301      	movs	r3, #1
 8001542:	9302      	str	r3, [sp, #8]
 8001544:	2300      	movs	r3, #0
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	2300      	movs	r3, #0
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	4613      	mov	r3, r2
 800154e:	227a      	movs	r2, #122	; 0x7a
 8001550:	f000 fba8 	bl	8001ca4 <_ZN5Image9draw_lineEttttt9PointSize9LineStyle>
			 BLACK, POINT_SIZE_1X1, LINE_STYLE_SOLID);
}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_ZNKSt6vectorIP9LineEntrySaIS1_EE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	461a      	mov	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	109b      	asrs	r3, r3, #2
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <_ZNSt6vectorIP9LineEntrySaIS1_EEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
      }
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <_ZN5ImageC1Ev>:

#include "Image.h"

#include <string.h>

Image::Image() :
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
m_width_byte(0),
m_height_byte(0),
m_rotate(ROTATE_0),
m_mirror(MIRROR_NONE),
m_scale(2),
m_color(WHITE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f8a3 2fa0 	strh.w	r2, [r3, #4000]	; 0xfa0
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f8a3 2fa2 	strh.w	r2, [r3, #4002]	; 0xfa2
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f8a3 2fa4 	strh.w	r2, [r3, #4004]	; 0xfa4
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f8a3 2fa6 	strh.w	r2, [r3, #4006]	; 0xfa6
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f8a3 2fa8 	strh.w	r2, [r3, #4008]	; 0xfa8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f8a3 2faa 	strh.w	r2, [r3, #4010]	; 0xfaa
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f8a3 2fac 	strh.w	r2, [r3, #4012]	; 0xfac
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2202      	movs	r2, #2
 80015ea:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	22ff      	movs	r2, #255	; 0xff
 80015f2:	f8a3 2fb0 	strh.w	r2, [r3, #4016]	; 0xfb0
{
	memset(m_img, 0, IMAGE_SIZE);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f009 f9be 	bl	800a980 <memset>
}
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_ZN5ImageC1Etttt>:

Image::Image(uint16_t width, uint16_t height, uint16_t rotate, uint16_t color) {
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	4608      	mov	r0, r1
 8001618:	4611      	mov	r1, r2
 800161a:	461a      	mov	r2, r3
 800161c:	4603      	mov	r3, r0
 800161e:	817b      	strh	r3, [r7, #10]
 8001620:	460b      	mov	r3, r1
 8001622:	813b      	strh	r3, [r7, #8]
 8001624:	4613      	mov	r3, r2
 8001626:	80fb      	strh	r3, [r7, #6]
	this->set_rotation(rotate);
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	4619      	mov	r1, r3
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f000 f881 	bl	8001734 <_ZN5Image12set_rotationEt>
	this->set_mirroring(MIRROR_NONE);
 8001632:	2100      	movs	r1, #0
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 f89a 	bl	800176e <_ZN5Image13set_mirroringEh>
	this->set_color(color);
 800163a:	8b3b      	ldrh	r3, [r7, #24]
 800163c:	4619      	mov	r1, r3
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 f8b1 	bl	80017a6 <_ZN5Image9set_colorEt>
	this->set_scale(2);
 8001644:	2102      	movs	r1, #2
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 f8c6 	bl	80017d8 <_ZN5Image9set_scaleEh>
	this->set_size(width, height);
 800164c:	893a      	ldrh	r2, [r7, #8]
 800164e:	897b      	ldrh	r3, [r7, #10]
 8001650:	4619      	mov	r1, r3
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 f805 	bl	8001662 <_ZN5Image8set_sizeEtt>
}
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_ZN5Image8set_sizeEtt>:

void Image::set_size(uint16_t width, uint16_t height) {
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	460b      	mov	r3, r1
 800166c:	807b      	strh	r3, [r7, #2]
 800166e:	4613      	mov	r3, r2
 8001670:	803b      	strh	r3, [r7, #0]
	this->m_width_mem = width;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	887a      	ldrh	r2, [r7, #2]
 8001676:	f8a3 2fa4 	strh.w	r2, [r3, #4004]	; 0xfa4
	this->m_height_mem = height;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	883a      	ldrh	r2, [r7, #0]
 800167e:	f8a3 2fa6 	strh.w	r2, [r3, #4006]	; 0xfa6
	if (this->m_scale == 2) {
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8001688:	2b02      	cmp	r3, #2
 800168a:	d117      	bne.n	80016bc <_ZN5Image8set_sizeEtt+0x5a>
		this->m_width_byte = (this->m_width_mem % 8 == 0)? (this->m_width_mem / 8 ): (this->m_width_mem / 8 + 1);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f8b3 3fa4 	ldrh.w	r3, [r3, #4004]	; 0xfa4
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	2b00      	cmp	r3, #0
 8001698:	d105      	bne.n	80016a6 <_ZN5Image8set_sizeEtt+0x44>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f8b3 3fa4 	ldrh.w	r3, [r3, #4004]	; 0xfa4
 80016a0:	08db      	lsrs	r3, r3, #3
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	e006      	b.n	80016b4 <_ZN5Image8set_sizeEtt+0x52>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f8b3 3fa4 	ldrh.w	r3, [r3, #4004]	; 0xfa4
 80016ac:	08db      	lsrs	r3, r3, #3
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	3301      	adds	r3, #1
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	f8a2 3fa8 	strh.w	r3, [r2, #4008]	; 0xfa8
 80016ba:	e016      	b.n	80016ea <_ZN5Image8set_sizeEtt+0x88>
	} else {
		this->m_width_byte = (this->m_width_mem % 4 == 0)? (this->m_width_mem / 4 ): (this->m_width_mem / 4 + 1);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f8b3 3fa4 	ldrh.w	r3, [r3, #4004]	; 0xfa4
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d105      	bne.n	80016d6 <_ZN5Image8set_sizeEtt+0x74>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f8b3 3fa4 	ldrh.w	r3, [r3, #4004]	; 0xfa4
 80016d0:	089b      	lsrs	r3, r3, #2
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	e006      	b.n	80016e4 <_ZN5Image8set_sizeEtt+0x82>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f8b3 3fa4 	ldrh.w	r3, [r3, #4004]	; 0xfa4
 80016dc:	089b      	lsrs	r3, r3, #2
 80016de:	b29b      	uxth	r3, r3
 80016e0:	3301      	adds	r3, #1
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	f8a2 3fa8 	strh.w	r3, [r2, #4008]	; 0xfa8
	}
	this->m_height_byte = height;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	883a      	ldrh	r2, [r7, #0]
 80016ee:	f8a3 2faa 	strh.w	r2, [r3, #4010]	; 0xfaa

	if(this->m_rotate == ROTATE_0 || this->m_rotate == ROTATE_180) {
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f8b3 3fac 	ldrh.w	r3, [r3, #4012]	; 0xfac
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <_ZN5Image8set_sizeEtt+0xa4>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f8b3 3fac 	ldrh.w	r3, [r3, #4012]	; 0xfac
 8001702:	2bb4      	cmp	r3, #180	; 0xb4
 8001704:	d108      	bne.n	8001718 <_ZN5Image8set_sizeEtt+0xb6>
		this->m_width = width;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	887a      	ldrh	r2, [r7, #2]
 800170a:	f8a3 2fa0 	strh.w	r2, [r3, #4000]	; 0xfa0
		this->m_height = height;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	883a      	ldrh	r2, [r7, #0]
 8001712:	f8a3 2fa2 	strh.w	r2, [r3, #4002]	; 0xfa2
 8001716:	e007      	b.n	8001728 <_ZN5Image8set_sizeEtt+0xc6>
	} else {
		this->m_width = height;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	883a      	ldrh	r2, [r7, #0]
 800171c:	f8a3 2fa0 	strh.w	r2, [r3, #4000]	; 0xfa0
		this->m_height = width;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	887a      	ldrh	r2, [r7, #2]
 8001724:	f8a3 2fa2 	strh.w	r2, [r3, #4002]	; 0xfa2
	}
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <_ZN5Image12set_rotationEt>:

void Image::set_rotation(uint16_t rotation) {
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
    if(rotation == ROTATE_0 ||
 8001740:	887b      	ldrh	r3, [r7, #2]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d009      	beq.n	800175a <_ZN5Image12set_rotationEt+0x26>
 8001746:	887b      	ldrh	r3, [r7, #2]
 8001748:	2b5a      	cmp	r3, #90	; 0x5a
 800174a:	d006      	beq.n	800175a <_ZN5Image12set_rotationEt+0x26>
    		rotation == ROTATE_90 ||
 800174c:	887b      	ldrh	r3, [r7, #2]
 800174e:	2bb4      	cmp	r3, #180	; 0xb4
 8001750:	d003      	beq.n	800175a <_ZN5Image12set_rotationEt+0x26>
			rotation == ROTATE_180 ||
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001758:	d103      	bne.n	8001762 <_ZN5Image12set_rotationEt+0x2e>
			rotation == ROTATE_270) {

    	this->m_rotate = rotation;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	887a      	ldrh	r2, [r7, #2]
 800175e:	f8a3 2fac 	strh.w	r2, [r3, #4012]	; 0xfac
    } else {
    	// error
    }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <_ZN5Image13set_mirroringEh>:

void Image::set_mirroring(uint8_t mirror) {
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	70fb      	strb	r3, [r7, #3]
    if(mirror == MIRROR_NONE || mirror == MIRROR_HORIZONTAL ||
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d008      	beq.n	8001792 <_ZN5Image13set_mirroringEh+0x24>
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d005      	beq.n	8001792 <_ZN5Image13set_mirroringEh+0x24>
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d002      	beq.n	8001792 <_ZN5Image13set_mirroringEh+0x24>
    		mirror == MIRROR_VERTICAL || mirror == MIRROR_ORIGIN) {
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	2b03      	cmp	r3, #3
 8001790:	d103      	bne.n	800179a <_ZN5Image13set_mirroringEh+0x2c>
         this->m_mirror = mirror;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	78fa      	ldrb	r2, [r7, #3]
 8001796:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
    } else {
        // error
    }
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <_ZN5Image9set_colorEt>:

void Image::set_color(uint16_t color) {
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	807b      	strh	r3, [r7, #2]
	if (color == WHITE || color == BLACK || color == RED) {
 80017b2:	887b      	ldrh	r3, [r7, #2]
 80017b4:	2bff      	cmp	r3, #255	; 0xff
 80017b6:	d005      	beq.n	80017c4 <_ZN5Image9set_colorEt+0x1e>
 80017b8:	887b      	ldrh	r3, [r7, #2]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <_ZN5Image9set_colorEt+0x1e>
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d103      	bne.n	80017cc <_ZN5Image9set_colorEt+0x26>
		this->m_color = color;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	887a      	ldrh	r2, [r7, #2]
 80017c8:	f8a3 2fb0 	strh.w	r2, [r3, #4016]	; 0xfb0
	} else {
		// error
	}
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_ZN5Image9set_scaleEh>:

void Image::set_scale(uint8_t scale) {
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	70fb      	strb	r3, [r7, #3]
    if(scale == 2 || scale == 4){
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d002      	beq.n	80017f0 <_ZN5Image9set_scaleEh+0x18>
 80017ea:	78fb      	ldrb	r3, [r7, #3]
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d103      	bne.n	80017f8 <_ZN5Image9set_scaleEh+0x20>
    	this->m_scale = scale;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
	} else {
		// error
    }
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_ZN5Image9set_pixelEttt>:

void Image::set_pixel(uint16_t x, uint16_t y, uint16_t color) {
 8001804:	b480      	push	{r7}
 8001806:	b08b      	sub	sp, #44	; 0x2c
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	4608      	mov	r0, r1
 800180e:	4611      	mov	r1, r2
 8001810:	461a      	mov	r2, r3
 8001812:	4603      	mov	r3, r0
 8001814:	817b      	strh	r3, [r7, #10]
 8001816:	460b      	mov	r3, r1
 8001818:	813b      	strh	r3, [r7, #8]
 800181a:	4613      	mov	r3, r2
 800181c:	80fb      	strh	r3, [r7, #6]
	if(x > this->m_width || y > this->m_height){
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f8b3 3fa0 	ldrh.w	r3, [r3, #4000]	; 0xfa0
 8001824:	897a      	ldrh	r2, [r7, #10]
 8001826:	429a      	cmp	r2, r3
 8001828:	f200 8116 	bhi.w	8001a58 <_ZN5Image9set_pixelEttt+0x254>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f8b3 3fa2 	ldrh.w	r3, [r3, #4002]	; 0xfa2
 8001832:	893a      	ldrh	r2, [r7, #8]
 8001834:	429a      	cmp	r2, r3
 8001836:	f200 810f 	bhi.w	8001a58 <_ZN5Image9set_pixelEttt+0x254>
		return;
	}

	uint16_t x_final, y_final;

	switch(this->m_rotate) {
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f8b3 3fac 	ldrh.w	r3, [r3, #4012]	; 0xfac
 8001840:	2b5a      	cmp	r3, #90	; 0x5a
 8001842:	d00f      	beq.n	8001864 <_ZN5Image9set_pixelEttt+0x60>
 8001844:	2b5a      	cmp	r3, #90	; 0x5a
 8001846:	dc02      	bgt.n	800184e <_ZN5Image9set_pixelEttt+0x4a>
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <_ZN5Image9set_pixelEttt+0x56>
	    x_final = y;
	    y_final = this->m_height_mem - x - 1;
	    break;

	default:
	    return;
 800184c:	e109      	b.n	8001a62 <_ZN5Image9set_pixelEttt+0x25e>
	switch(this->m_rotate) {
 800184e:	2bb4      	cmp	r3, #180	; 0xb4
 8001850:	d013      	beq.n	800187a <_ZN5Image9set_pixelEttt+0x76>
 8001852:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001856:	d021      	beq.n	800189c <_ZN5Image9set_pixelEttt+0x98>
	    return;
 8001858:	e103      	b.n	8001a62 <_ZN5Image9set_pixelEttt+0x25e>
		x_final = x;
 800185a:	897b      	ldrh	r3, [r7, #10]
 800185c:	84fb      	strh	r3, [r7, #38]	; 0x26
	    y_final = y;
 800185e:	893b      	ldrh	r3, [r7, #8]
 8001860:	84bb      	strh	r3, [r7, #36]	; 0x24
	    break;
 8001862:	e026      	b.n	80018b2 <_ZN5Image9set_pixelEttt+0xae>
		x_final = this->m_width_mem - y - 1;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f8b3 2fa4 	ldrh.w	r2, [r3, #4004]	; 0xfa4
 800186a:	893b      	ldrh	r3, [r7, #8]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	b29b      	uxth	r3, r3
 8001870:	3b01      	subs	r3, #1
 8001872:	84fb      	strh	r3, [r7, #38]	; 0x26
	    y_final = x;
 8001874:	897b      	ldrh	r3, [r7, #10]
 8001876:	84bb      	strh	r3, [r7, #36]	; 0x24
	    break;
 8001878:	e01b      	b.n	80018b2 <_ZN5Image9set_pixelEttt+0xae>
		x_final = this->m_width_mem - x - 1;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f8b3 2fa4 	ldrh.w	r2, [r3, #4004]	; 0xfa4
 8001880:	897b      	ldrh	r3, [r7, #10]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	b29b      	uxth	r3, r3
 8001886:	3b01      	subs	r3, #1
 8001888:	84fb      	strh	r3, [r7, #38]	; 0x26
		y_final = this->m_height_mem - y - 1;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f8b3 2fa6 	ldrh.w	r2, [r3, #4006]	; 0xfa6
 8001890:	893b      	ldrh	r3, [r7, #8]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	b29b      	uxth	r3, r3
 8001896:	3b01      	subs	r3, #1
 8001898:	84bb      	strh	r3, [r7, #36]	; 0x24
	    break;
 800189a:	e00a      	b.n	80018b2 <_ZN5Image9set_pixelEttt+0xae>
	    x_final = y;
 800189c:	893b      	ldrh	r3, [r7, #8]
 800189e:	84fb      	strh	r3, [r7, #38]	; 0x26
	    y_final = this->m_height_mem - x - 1;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f8b3 2fa6 	ldrh.w	r2, [r3, #4006]	; 0xfa6
 80018a6:	897b      	ldrh	r3, [r7, #10]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	3b01      	subs	r3, #1
 80018ae:	84bb      	strh	r3, [r7, #36]	; 0x24
	    break;
 80018b0:	bf00      	nop
	}

	switch(this->m_mirror) {
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f893 3fae 	ldrb.w	r3, [r3, #4014]	; 0xfae
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	f200 80cf 	bhi.w	8001a5c <_ZN5Image9set_pixelEttt+0x258>
 80018be:	a201      	add	r2, pc, #4	; (adr r2, 80018c4 <_ZN5Image9set_pixelEttt+0xc0>)
 80018c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c4:	0800191b 	.word	0x0800191b
 80018c8:	080018d5 	.word	0x080018d5
 80018cc:	080018e7 	.word	0x080018e7
 80018d0:	080018f9 	.word	0x080018f9
	case MIRROR_NONE:
	    break;

	case MIRROR_HORIZONTAL:
	    x_final = this->m_width_mem - x_final - 1;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f8b3 2fa4 	ldrh.w	r2, [r3, #4004]	; 0xfa4
 80018da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	b29b      	uxth	r3, r3
 80018e0:	3b01      	subs	r3, #1
 80018e2:	84fb      	strh	r3, [r7, #38]	; 0x26
	    break;
 80018e4:	e01a      	b.n	800191c <_ZN5Image9set_pixelEttt+0x118>

	case MIRROR_VERTICAL:
		y_final = this->m_height_mem - y_final - 1;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f8b3 2fa6 	ldrh.w	r2, [r3, #4006]	; 0xfa6
 80018ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	3b01      	subs	r3, #1
 80018f4:	84bb      	strh	r3, [r7, #36]	; 0x24
		break;
 80018f6:	e011      	b.n	800191c <_ZN5Image9set_pixelEttt+0x118>

	case MIRROR_ORIGIN:
		x_final = this->m_width_mem - x_final - 1;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f8b3 2fa4 	ldrh.w	r2, [r3, #4004]	; 0xfa4
 80018fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	b29b      	uxth	r3, r3
 8001904:	3b01      	subs	r3, #1
 8001906:	84fb      	strh	r3, [r7, #38]	; 0x26
		y_final = this->m_height_mem - y_final - 1;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f8b3 2fa6 	ldrh.w	r2, [r3, #4006]	; 0xfa6
 800190e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	84bb      	strh	r3, [r7, #36]	; 0x24
	    break;
 8001918:	e000      	b.n	800191c <_ZN5Image9set_pixelEttt+0x118>
	    break;
 800191a:	bf00      	nop

	default:
	    return;
	}

	if (x_final > this->m_width_mem || y_final > this->m_height_mem) {
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f8b3 3fa4 	ldrh.w	r3, [r3, #4004]	; 0xfa4
 8001922:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001924:	429a      	cmp	r2, r3
 8001926:	f200 809b 	bhi.w	8001a60 <_ZN5Image9set_pixelEttt+0x25c>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f8b3 3fa6 	ldrh.w	r3, [r3, #4006]	; 0xfa6
 8001930:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001932:	429a      	cmp	r2, r3
 8001934:	f200 8094 	bhi.w	8001a60 <_ZN5Image9set_pixelEttt+0x25c>
		// error
		return;
	}

	if(this->m_scale == 2){
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 800193e:	2b02      	cmp	r3, #2
 8001940:	d139      	bne.n	80019b6 <_ZN5Image9set_pixelEttt+0x1b2>
		uint32_t addr = x_final / 8 + y_final * this->m_width_byte;
 8001942:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	b29b      	uxth	r3, r3
 8001948:	4619      	mov	r1, r3
 800194a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	f8b2 2fa8 	ldrh.w	r2, [r2, #4008]	; 0xfa8
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	440b      	add	r3, r1
 8001958:	617b      	str	r3, [r7, #20]
		uint8_t r_data = this->m_img[addr];
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	4413      	add	r3, r2
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	74fb      	strb	r3, [r7, #19]

		if(color == BLACK) {
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d113      	bne.n	8001992 <_ZN5Image9set_pixelEttt+0x18e>
			this->m_img[addr] = r_data & ~(0x80 >> (x_final % 8));
 800196a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	2280      	movs	r2, #128	; 0x80
 8001972:	fa42 f303 	asr.w	r3, r2, r3
 8001976:	b25b      	sxtb	r3, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	b25a      	sxtb	r2, r3
 800197c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001980:	4013      	ands	r3, r2
 8001982:	b25b      	sxtb	r3, r3
 8001984:	b2d9      	uxtb	r1, r3
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	4413      	add	r3, r2
 800198c:	460a      	mov	r2, r1
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	e067      	b.n	8001a62 <_ZN5Image9set_pixelEttt+0x25e>
		} else {
			this->m_img[addr] = r_data | (0x80 >> (x_final % 8));
 8001992:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	fa42 f303 	asr.w	r3, r2, r3
 800199e:	b25a      	sxtb	r2, r3
 80019a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	b25b      	sxtb	r3, r3
 80019a8:	b2d9      	uxtb	r1, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	4413      	add	r3, r2
 80019b0:	460a      	mov	r2, r1
 80019b2:	701a      	strb	r2, [r3, #0]
 80019b4:	e055      	b.n	8001a62 <_ZN5Image9set_pixelEttt+0x25e>
		}

	 } else if(this->m_scale == 4) {
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d150      	bne.n	8001a62 <_ZN5Image9set_pixelEttt+0x25e>
		uint16_t width = (this->m_width_mem % 4 == 0)? (this->m_width_mem / 4 ): (this->m_width_mem / 4 + 1);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f8b3 3fa4 	ldrh.w	r3, [r3, #4004]	; 0xfa4
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d105      	bne.n	80019da <_ZN5Image9set_pixelEttt+0x1d6>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f8b3 3fa4 	ldrh.w	r3, [r3, #4004]	; 0xfa4
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	e006      	b.n	80019e8 <_ZN5Image9set_pixelEttt+0x1e4>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f8b3 3fa4 	ldrh.w	r3, [r3, #4004]	; 0xfa4
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	3301      	adds	r3, #1
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	847b      	strh	r3, [r7, #34]	; 0x22
		uint32_t addr = x_final / 4 + y_final * width;
 80019ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4619      	mov	r1, r3
 80019f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019f4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	440b      	add	r3, r1
 80019fc:	61fb      	str	r3, [r7, #28]
	    color = color % 4;		//Guaranteed color scale is 4  --- 0~3
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	80fb      	strh	r3, [r7, #6]
	    uint8_t r_data = this->m_img[addr];
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	76fb      	strb	r3, [r7, #27]

	    r_data = r_data & (~(0xC0 >> ((x_final % 4)*2)));
 8001a10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	22c0      	movs	r2, #192	; 0xc0
 8001a1a:	fa42 f303 	asr.w	r3, r2, r3
 8001a1e:	b25b      	sxtb	r3, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	b25a      	sxtb	r2, r3
 8001a24:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	b25b      	sxtb	r3, r3
 8001a2c:	76fb      	strb	r3, [r7, #27]
	    this->m_img[addr] =  r_data | (((color << 6) & 0xC0)>> ((x_final % 4)*2));
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	019b      	lsls	r3, r3, #6
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	fa42 f303 	asr.w	r3, r2, r3
 8001a40:	b25a      	sxtb	r2, r3
 8001a42:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	b2d9      	uxtb	r1, r3
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	4413      	add	r3, r2
 8001a52:	460a      	mov	r2, r1
 8001a54:	701a      	strb	r2, [r3, #0]
 8001a56:	e004      	b.n	8001a62 <_ZN5Image9set_pixelEttt+0x25e>
		return;
 8001a58:	bf00      	nop
 8001a5a:	e002      	b.n	8001a62 <_ZN5Image9set_pixelEttt+0x25e>
	    return;
 8001a5c:	bf00      	nop
 8001a5e:	e000      	b.n	8001a62 <_ZN5Image9set_pixelEttt+0x25e>
		return;
 8001a60:	bf00      	nop
	 }
}
 8001a62:	372c      	adds	r7, #44	; 0x2c
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_ZN5Image5clearEt>:

void Image::clear(uint16_t color) {
 8001a6c:	b480      	push	{r7}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	807b      	strh	r3, [r7, #2]
	if(this->m_scale == 2){
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d127      	bne.n	8001ad2 <_ZN5Image5clearEt+0x66>
		for (uint16_t y = 0; y < this->m_height_byte; y++) {
 8001a82:	2300      	movs	r3, #0
 8001a84:	82fb      	strh	r3, [r7, #22]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f8b3 3faa 	ldrh.w	r3, [r3, #4010]	; 0xfaa
 8001a8c:	8afa      	ldrh	r2, [r7, #22]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d267      	bcs.n	8001b62 <_ZN5Image5clearEt+0xf6>
			for (uint16_t x = 0; x < this->m_width_byte; x++ ) {	//8 pixel =  1 byte
 8001a92:	2300      	movs	r3, #0
 8001a94:	82bb      	strh	r3, [r7, #20]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f8b3 3fa8 	ldrh.w	r3, [r3, #4008]	; 0xfa8
 8001a9c:	8aba      	ldrh	r2, [r7, #20]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d213      	bcs.n	8001aca <_ZN5Image5clearEt+0x5e>
				uint32_t addr = x + y*this->m_width_byte;
 8001aa2:	8aba      	ldrh	r2, [r7, #20]
 8001aa4:	8afb      	ldrh	r3, [r7, #22]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	f8b1 1fa8 	ldrh.w	r1, [r1, #4008]	; 0xfa8
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]
				this->m_img[addr] = color;
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	b2d9      	uxtb	r1, r3
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	4413      	add	r3, r2
 8001abe:	460a      	mov	r2, r1
 8001ac0:	701a      	strb	r2, [r3, #0]
			for (uint16_t x = 0; x < this->m_width_byte; x++ ) {	//8 pixel =  1 byte
 8001ac2:	8abb      	ldrh	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	82bb      	strh	r3, [r7, #20]
 8001ac8:	e7e5      	b.n	8001a96 <_ZN5Image5clearEt+0x2a>
		for (uint16_t y = 0; y < this->m_height_byte; y++) {
 8001aca:	8afb      	ldrh	r3, [r7, #22]
 8001acc:	3301      	adds	r3, #1
 8001ace:	82fb      	strh	r3, [r7, #22]
 8001ad0:	e7d9      	b.n	8001a86 <_ZN5Image5clearEt+0x1a>
			}
		}
	} else if(this->m_scale == 4) {
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d142      	bne.n	8001b62 <_ZN5Image5clearEt+0xf6>
		color = color % 4;
 8001adc:	887b      	ldrh	r3, [r7, #2]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	807b      	strh	r3, [r7, #2]

		if(color == 0x00){
 8001ae4:	887b      	ldrh	r3, [r7, #2]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d102      	bne.n	8001af0 <_ZN5Image5clearEt+0x84>
			color = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	807b      	strh	r3, [r7, #2]
 8001aee:	e010      	b.n	8001b12 <_ZN5Image5clearEt+0xa6>
		} else if(color == 0x01) {
 8001af0:	887b      	ldrh	r3, [r7, #2]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d102      	bne.n	8001afc <_ZN5Image5clearEt+0x90>
			color = 0x55;
 8001af6:	2355      	movs	r3, #85	; 0x55
 8001af8:	807b      	strh	r3, [r7, #2]
 8001afa:	e00a      	b.n	8001b12 <_ZN5Image5clearEt+0xa6>
		} else if(color == 0x02) {
 8001afc:	887b      	ldrh	r3, [r7, #2]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d102      	bne.n	8001b08 <_ZN5Image5clearEt+0x9c>
			color = 0xAA;
 8001b02:	23aa      	movs	r3, #170	; 0xaa
 8001b04:	807b      	strh	r3, [r7, #2]
 8001b06:	e004      	b.n	8001b12 <_ZN5Image5clearEt+0xa6>
		} else if(color == 0x03) {
 8001b08:	887b      	ldrh	r3, [r7, #2]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d101      	bne.n	8001b12 <_ZN5Image5clearEt+0xa6>
			color = 0xff;
 8001b0e:	23ff      	movs	r3, #255	; 0xff
 8001b10:	807b      	strh	r3, [r7, #2]
		}

		for (uint16_t y = 0; y < this->m_height_byte; y++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	827b      	strh	r3, [r7, #18]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f8b3 3faa 	ldrh.w	r3, [r3, #4010]	; 0xfaa
 8001b1c:	8a7a      	ldrh	r2, [r7, #18]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d21f      	bcs.n	8001b62 <_ZN5Image5clearEt+0xf6>
			for (uint16_t x = 0; x < this->m_width_byte; x++ ) {	//8 pixel =  1 byte
 8001b22:	2300      	movs	r3, #0
 8001b24:	823b      	strh	r3, [r7, #16]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f8b3 3fa8 	ldrh.w	r3, [r3, #4008]	; 0xfa8
 8001b2c:	8a3a      	ldrh	r2, [r7, #16]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d213      	bcs.n	8001b5a <_ZN5Image5clearEt+0xee>
				uint32_t addr = x + y*this->m_width_byte;
 8001b32:	8a3a      	ldrh	r2, [r7, #16]
 8001b34:	8a7b      	ldrh	r3, [r7, #18]
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	f8b1 1fa8 	ldrh.w	r1, [r1, #4008]	; 0xfa8
 8001b3c:	fb01 f303 	mul.w	r3, r1, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
				this->m_img[addr] = color;
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	b2d9      	uxtb	r1, r3
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	460a      	mov	r2, r1
 8001b50:	701a      	strb	r2, [r3, #0]
			for (uint16_t x = 0; x < this->m_width_byte; x++ ) {	//8 pixel =  1 byte
 8001b52:	8a3b      	ldrh	r3, [r7, #16]
 8001b54:	3301      	adds	r3, #1
 8001b56:	823b      	strh	r3, [r7, #16]
 8001b58:	e7e5      	b.n	8001b26 <_ZN5Image5clearEt+0xba>
		for (uint16_t y = 0; y < this->m_height_byte; y++) {
 8001b5a:	8a7b      	ldrh	r3, [r7, #18]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	827b      	strh	r3, [r7, #18]
 8001b60:	e7d9      	b.n	8001b16 <_ZN5Image5clearEt+0xaa>
			}
		}
	}
}
 8001b62:	bf00      	nop
 8001b64:	371c      	adds	r7, #28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <_ZN5Image10draw_pointEttt9PointSize10PointStyle>:
	    }
	}
}

void Image::draw_point(uint16_t x, uint16_t y, uint16_t color,
		PointSize weight, PointStyle style) {
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	4608      	mov	r0, r1
 8001b78:	4611      	mov	r1, r2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	817b      	strh	r3, [r7, #10]
 8001b80:	460b      	mov	r3, r1
 8001b82:	813b      	strh	r3, [r7, #8]
 8001b84:	4613      	mov	r3, r2
 8001b86:	80fb      	strh	r3, [r7, #6]

    if (x > this->m_width || y > this->m_height) {
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f8b3 3fa0 	ldrh.w	r3, [r3, #4000]	; 0xfa0
 8001b8e:	897a      	ldrh	r2, [r7, #10]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	f200 8082 	bhi.w	8001c9a <_ZN5Image10draw_pointEttt9PointSize10PointStyle+0x12c>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f8b3 3fa2 	ldrh.w	r3, [r3, #4002]	; 0xfa2
 8001b9c:	893a      	ldrh	r2, [r7, #8]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d87b      	bhi.n	8001c9a <_ZN5Image10draw_pointEttt9PointSize10PointStyle+0x12c>
    	// error
        return;
    }

    int16_t x_dir_num , y_dir_num;
    if (style == POINT_STYLE_AROUND) {
 8001ba2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d149      	bne.n	8001c3e <_ZN5Image10draw_pointEttt9PointSize10PointStyle+0xd0>
        for (x_dir_num = 0; x_dir_num < 2 * weight - 1; x_dir_num++) {
 8001baa:	2300      	movs	r3, #0
 8001bac:	82fb      	strh	r3, [r7, #22]
 8001bae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001bb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	da6e      	bge.n	8001c9c <_ZN5Image10draw_pointEttt9PointSize10PointStyle+0x12e>
            for (y_dir_num = 0; y_dir_num < 2 * weight - 1; y_dir_num++) {
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	82bb      	strh	r3, [r7, #20]
 8001bc2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001bc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	da2e      	bge.n	8001c30 <_ZN5Image10draw_pointEttt9PointSize10PointStyle+0xc2>
                if(x + x_dir_num - weight < 0 || y + y_dir_num - weight < 0) {
 8001bd2:	897a      	ldrh	r2, [r7, #10]
 8001bd4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bd8:	441a      	add	r2, r3
 8001bda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db25      	blt.n	8001c30 <_ZN5Image10draw_pointEttt9PointSize10PointStyle+0xc2>
 8001be4:	893a      	ldrh	r2, [r7, #8]
 8001be6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bea:	441a      	add	r2, r3
 8001bec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	db1c      	blt.n	8001c30 <_ZN5Image10draw_pointEttt9PointSize10PointStyle+0xc2>
                    break;
                }
                this->set_pixel(x + x_dir_num - weight, y + y_dir_num - weight, color);
 8001bf6:	8afa      	ldrh	r2, [r7, #22]
 8001bf8:	897b      	ldrh	r3, [r7, #10]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	b299      	uxth	r1, r3
 8001c08:	8aba      	ldrh	r2, [r7, #20]
 8001c0a:	893b      	ldrh	r3, [r7, #8]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f7ff fdf1 	bl	8001804 <_ZN5Image9set_pixelEttt>
            for (y_dir_num = 0; y_dir_num < 2 * weight - 1; y_dir_num++) {
 8001c22:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3301      	adds	r3, #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	82bb      	strh	r3, [r7, #20]
 8001c2e:	e7c8      	b.n	8001bc2 <_ZN5Image10draw_pointEttt9PointSize10PointStyle+0x54>
        for (x_dir_num = 0; x_dir_num < 2 * weight - 1; x_dir_num++) {
 8001c30:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	3301      	adds	r3, #1
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	82fb      	strh	r3, [r7, #22]
 8001c3c:	e7b7      	b.n	8001bae <_ZN5Image10draw_pointEttt9PointSize10PointStyle+0x40>
            }
        }
    } else {
        for (x_dir_num = 0; x_dir_num < weight; x_dir_num++) {
 8001c3e:	2300      	movs	r3, #0
 8001c40:	82fb      	strh	r3, [r7, #22]
 8001c42:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001c46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	da26      	bge.n	8001c9c <_ZN5Image10draw_pointEttt9PointSize10PointStyle+0x12e>
            for (y_dir_num = 0; y_dir_num < weight; y_dir_num++) {
 8001c4e:	2300      	movs	r3, #0
 8001c50:	82bb      	strh	r3, [r7, #20]
 8001c52:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	da16      	bge.n	8001c8c <_ZN5Image10draw_pointEttt9PointSize10PointStyle+0x11e>
                this->set_pixel(x + x_dir_num - 1, y + y_dir_num - 1, color);
 8001c5e:	8afa      	ldrh	r2, [r7, #22]
 8001c60:	897b      	ldrh	r3, [r7, #10]
 8001c62:	4413      	add	r3, r2
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b299      	uxth	r1, r3
 8001c6a:	8aba      	ldrh	r2, [r7, #20]
 8001c6c:	893b      	ldrh	r3, [r7, #8]
 8001c6e:	4413      	add	r3, r2
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	3b01      	subs	r3, #1
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f7ff fdc3 	bl	8001804 <_ZN5Image9set_pixelEttt>
            for (y_dir_num = 0; y_dir_num < weight; y_dir_num++) {
 8001c7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	3301      	adds	r3, #1
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	82bb      	strh	r3, [r7, #20]
 8001c8a:	e7e2      	b.n	8001c52 <_ZN5Image10draw_pointEttt9PointSize10PointStyle+0xe4>
        for (x_dir_num = 0; x_dir_num < weight; x_dir_num++) {
 8001c8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	82fb      	strh	r3, [r7, #22]
 8001c98:	e7d3      	b.n	8001c42 <_ZN5Image10draw_pointEttt9PointSize10PointStyle+0xd4>
        return;
 8001c9a:	bf00      	nop
            }
        }
    }
}
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <_ZN5Image9draw_lineEttttt9PointSize9LineStyle>:

void Image::draw_line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,
		uint16_t color, PointSize weight, LineStyle style) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08e      	sub	sp, #56	; 0x38
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	4608      	mov	r0, r1
 8001cae:	4611      	mov	r1, r2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	817b      	strh	r3, [r7, #10]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	813b      	strh	r3, [r7, #8]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	80fb      	strh	r3, [r7, #6]

    if (x1 > this->m_width || y1 > this->m_height ||
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f8b3 3fa0 	ldrh.w	r3, [r3, #4000]	; 0xfa0
 8001cc4:	897a      	ldrh	r2, [r7, #10]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	f200 8097 	bhi.w	8001dfa <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0x156>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f8b3 3fa2 	ldrh.w	r3, [r3, #4002]	; 0xfa2
 8001cd2:	893a      	ldrh	r2, [r7, #8]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	f200 8090 	bhi.w	8001dfa <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0x156>
        x2 > this->m_width || y2 > this->m_height) {
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f8b3 3fa0 	ldrh.w	r3, [r3, #4000]	; 0xfa0
    if (x1 > this->m_width || y1 > this->m_height ||
 8001ce0:	88fa      	ldrh	r2, [r7, #6]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	f200 8089 	bhi.w	8001dfa <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0x156>
        x2 > this->m_width || y2 > this->m_height) {
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f8b3 3fa2 	ldrh.w	r3, [r3, #4002]	; 0xfa2
 8001cee:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	f200 8082 	bhi.w	8001dfa <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0x156>
        // error
        return;
    }

    uint16_t x_point = x1;
 8001cf6:	897b      	ldrh	r3, [r7, #10]
 8001cf8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t y_point = y1;
 8001cfa:	893b      	ldrh	r3, [r7, #8]
 8001cfc:	85bb      	strh	r3, [r7, #44]	; 0x2c
    int dx = (int)x2 - (int)x1 >= 0 ? x2 - x1 : x1 - x2;
 8001cfe:	88fa      	ldrh	r2, [r7, #6]
 8001d00:	897b      	ldrh	r3, [r7, #10]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bfb8      	it	lt
 8001d08:	425b      	neglt	r3, r3
 8001d0a:	623b      	str	r3, [r7, #32]
    int dy = (int)y2 - (int)y1 <= 0 ? y2 - y1 : y1 - y2;
 8001d0c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001d0e:	893b      	ldrh	r3, [r7, #8]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	bfb8      	it	lt
 8001d16:	425b      	neglt	r3, r3
 8001d18:	425b      	negs	r3, r3
 8001d1a:	61fb      	str	r3, [r7, #28]

    // Increment direction, 1 is positive, -1 is counter;
    int x_add_way = x1 < x2 ? 1 : -1;
 8001d1c:	897a      	ldrh	r2, [r7, #10]
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d201      	bcs.n	8001d28 <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0x84>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e001      	b.n	8001d2c <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0x88>
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d2c:	61bb      	str	r3, [r7, #24]
    int y_add_way = x1 < x2 ? 1 : -1;
 8001d2e:	897a      	ldrh	r2, [r7, #10]
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d201      	bcs.n	8001d3a <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0x96>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e001      	b.n	8001d3e <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0x9a>
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d3e:	617b      	str	r3, [r7, #20]

    //Cumulative error
    int esp = dx + dy;
 8001d40:	6a3a      	ldr	r2, [r7, #32]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	4413      	add	r3, r2
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
    char dotted_len = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    for (;;) {
        dotted_len++;
 8001d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d52:	3301      	adds	r3, #1
 8001d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        //Painted dotted line, 2 point is really virtual
        if (style == LINE_STYLE_DOTTED && dotted_len % 3 == 0) {
 8001d58:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d11b      	bne.n	8001d98 <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0xf4>
 8001d60:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001d64:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0x168>)
 8001d66:	fba3 1302 	umull	r1, r3, r3, r2
 8001d6a:	0859      	lsrs	r1, r3, #1
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	440b      	add	r3, r1
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10e      	bne.n	8001d98 <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0xf4>
        	this->draw_point(x_point, y_point, IMAGE_BACKGROUND, weight, POINT_STYLE_DEFAULT);
 8001d7a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001d7c:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8001d7e:	2301      	movs	r3, #1
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	23ff      	movs	r3, #255	; 0xff
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f7ff feef 	bl	8001b6e <_ZN5Image10draw_pointEttt9PointSize10PointStyle>
            dotted_len = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d96:	e00b      	b.n	8001db0 <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0x10c>
        } else {
        	this->draw_point(x_point, y_point, color, weight, POINT_STYLE_DEFAULT);
 8001d98:	8fb8      	ldrh	r0, [r7, #60]	; 0x3c
 8001d9a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001d9c:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8001d9e:	2301      	movs	r3, #1
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	4603      	mov	r3, r0
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f7ff fedf 	bl	8001b6e <_ZN5Image10draw_pointEttt9PointSize10PointStyle>
        }
        if (2 * esp >= dy) {
 8001db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	dc0c      	bgt.n	8001dd4 <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0x130>
            if (x_point == x2) {
 8001dba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001dbc:	88fb      	ldrh	r3, [r7, #6]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d01d      	beq.n	8001dfe <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0x15a>
                break;
            }
            esp += dy;
 8001dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
            x_point += x_add_way;
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dd0:	4413      	add	r3, r2
 8001dd2:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
        if (2 * esp <= dx) {
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	6a3a      	ldr	r2, [r7, #32]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dbb7      	blt.n	8001d4e <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0xaa>
            if (y_point == y2) {
 8001dde:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001de0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d00d      	beq.n	8001e02 <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0x15e>
                break;
            }
            esp += dx;
 8001de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	4413      	add	r3, r2
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
            y_point += y_add_way;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001df4:	4413      	add	r3, r2
 8001df6:	85bb      	strh	r3, [r7, #44]	; 0x2c
        dotted_len++;
 8001df8:	e7a9      	b.n	8001d4e <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0xaa>
        return;
 8001dfa:	bf00      	nop
 8001dfc:	e002      	b.n	8001e04 <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0x160>
                break;
 8001dfe:	bf00      	nop
 8001e00:	e000      	b.n	8001e04 <_ZN5Image9draw_lineEttttt9PointSize9LineStyle+0x160>
                break;
 8001e02:	bf00      	nop
        }
    }
}
 8001e04:	3730      	adds	r7, #48	; 0x30
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	aaaaaaab 	.word	0xaaaaaaab

08001e10 <_ZN5Image9draw_rectEttttt9PointSize9FillStyle>:


void Image::draw_rect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,
		uint16_t color, PointSize weight, FillStyle style) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af04      	add	r7, sp, #16
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	4608      	mov	r0, r1
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4603      	mov	r3, r0
 8001e20:	817b      	strh	r3, [r7, #10]
 8001e22:	460b      	mov	r3, r1
 8001e24:	813b      	strh	r3, [r7, #8]
 8001e26:	4613      	mov	r3, r2
 8001e28:	80fb      	strh	r3, [r7, #6]

    if (x1 > this->m_width || y1 > this->m_height ||
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f8b3 3fa0 	ldrh.w	r3, [r3, #4000]	; 0xfa0
 8001e30:	897a      	ldrh	r2, [r7, #10]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d870      	bhi.n	8001f18 <_ZN5Image9draw_rectEttttt9PointSize9FillStyle+0x108>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f8b3 3fa2 	ldrh.w	r3, [r3, #4002]	; 0xfa2
 8001e3c:	893a      	ldrh	r2, [r7, #8]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d86a      	bhi.n	8001f18 <_ZN5Image9draw_rectEttttt9PointSize9FillStyle+0x108>
        x2 > this->m_width || y2 > this->m_height) {
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f8b3 3fa0 	ldrh.w	r3, [r3, #4000]	; 0xfa0
    if (x1 > this->m_width || y1 > this->m_height ||
 8001e48:	88fa      	ldrh	r2, [r7, #6]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d864      	bhi.n	8001f18 <_ZN5Image9draw_rectEttttt9PointSize9FillStyle+0x108>
        x2 > this->m_width || y2 > this->m_height) {
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f8b3 3fa2 	ldrh.w	r3, [r3, #4002]	; 0xfa2
 8001e54:	8c3a      	ldrh	r2, [r7, #32]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d85e      	bhi.n	8001f18 <_ZN5Image9draw_rectEttttt9PointSize9FillStyle+0x108>
        // error
        return;
    }

	if (style) {
 8001e5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d019      	beq.n	8001e96 <_ZN5Image9draw_rectEttttt9PointSize9FillStyle+0x86>
		uint16_t y;
	    for(y = y1; y < y2; y++) {
 8001e62:	893b      	ldrh	r3, [r7, #8]
 8001e64:	82fb      	strh	r3, [r7, #22]
 8001e66:	8afa      	ldrh	r2, [r7, #22]
 8001e68:	8c3b      	ldrh	r3, [r7, #32]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d255      	bcs.n	8001f1a <_ZN5Image9draw_rectEttttt9PointSize9FillStyle+0x10a>
	    	this->draw_line(x1, y, x2, y, color , weight, LINE_STYLE_SOLID);
 8001e6e:	88f8      	ldrh	r0, [r7, #6]
 8001e70:	8afa      	ldrh	r2, [r7, #22]
 8001e72:	8979      	ldrh	r1, [r7, #10]
 8001e74:	2300      	movs	r3, #0
 8001e76:	9303      	str	r3, [sp, #12]
 8001e78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001e7c:	9302      	str	r3, [sp, #8]
 8001e7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	8afb      	ldrh	r3, [r7, #22]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	4603      	mov	r3, r0
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7ff ff0b 	bl	8001ca4 <_ZN5Image9draw_lineEttttt9PointSize9LineStyle>
	    for(y = y1; y < y2; y++) {
 8001e8e:	8afb      	ldrh	r3, [r7, #22]
 8001e90:	3301      	adds	r3, #1
 8001e92:	82fb      	strh	r3, [r7, #22]
 8001e94:	e7e7      	b.n	8001e66 <_ZN5Image9draw_rectEttttt9PointSize9FillStyle+0x56>
	    }
	} else {
	    this->draw_line(x1, y1, x2, y1, color, weight, LINE_STYLE_SOLID);
 8001e96:	88f8      	ldrh	r0, [r7, #6]
 8001e98:	893a      	ldrh	r2, [r7, #8]
 8001e9a:	8979      	ldrh	r1, [r7, #10]
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	9303      	str	r3, [sp, #12]
 8001ea0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ea4:	9302      	str	r3, [sp, #8]
 8001ea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	893b      	ldrh	r3, [r7, #8]
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	4603      	mov	r3, r0
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f7ff fef7 	bl	8001ca4 <_ZN5Image9draw_lineEttttt9PointSize9LineStyle>
	    this->draw_line(x1, y1, x1, y2, color, weight, LINE_STYLE_SOLID);
 8001eb6:	8978      	ldrh	r0, [r7, #10]
 8001eb8:	893a      	ldrh	r2, [r7, #8]
 8001eba:	8979      	ldrh	r1, [r7, #10]
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	9303      	str	r3, [sp, #12]
 8001ec0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ec4:	9302      	str	r3, [sp, #8]
 8001ec6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	8c3b      	ldrh	r3, [r7, #32]
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	4603      	mov	r3, r0
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f7ff fee7 	bl	8001ca4 <_ZN5Image9draw_lineEttttt9PointSize9LineStyle>
	    this->draw_line(x2, y2, x2, y1, color, weight, LINE_STYLE_SOLID);
 8001ed6:	88f8      	ldrh	r0, [r7, #6]
 8001ed8:	8c3a      	ldrh	r2, [r7, #32]
 8001eda:	88f9      	ldrh	r1, [r7, #6]
 8001edc:	2300      	movs	r3, #0
 8001ede:	9303      	str	r3, [sp, #12]
 8001ee0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ee4:	9302      	str	r3, [sp, #8]
 8001ee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ee8:	9301      	str	r3, [sp, #4]
 8001eea:	893b      	ldrh	r3, [r7, #8]
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	4603      	mov	r3, r0
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f7ff fed7 	bl	8001ca4 <_ZN5Image9draw_lineEttttt9PointSize9LineStyle>
	    this->draw_line(x2, y2, x1, y2, color, weight, LINE_STYLE_SOLID);
 8001ef6:	8978      	ldrh	r0, [r7, #10]
 8001ef8:	8c3a      	ldrh	r2, [r7, #32]
 8001efa:	88f9      	ldrh	r1, [r7, #6]
 8001efc:	2300      	movs	r3, #0
 8001efe:	9303      	str	r3, [sp, #12]
 8001f00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f04:	9302      	str	r3, [sp, #8]
 8001f06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	8c3b      	ldrh	r3, [r7, #32]
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	4603      	mov	r3, r0
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f7ff fec7 	bl	8001ca4 <_ZN5Image9draw_lineEttttt9PointSize9LineStyle>
 8001f16:	e000      	b.n	8001f1a <_ZN5Image9draw_rectEttttt9PointSize9FillStyle+0x10a>
        return;
 8001f18:	bf00      	nop
	}
}
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_ZN5Image9draw_charEttcP6_tFonttt>:
        }
    }
}

void Image::draw_char(uint16_t x, uint16_t y, const char ascii_char, sFONT* Font,
		uint16_t fg_color, uint16_t bg_color) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	4608      	mov	r0, r1
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4603      	mov	r3, r0
 8001f30:	817b      	strh	r3, [r7, #10]
 8001f32:	460b      	mov	r3, r1
 8001f34:	813b      	strh	r3, [r7, #8]
 8001f36:	4613      	mov	r3, r2
 8001f38:	71fb      	strb	r3, [r7, #7]

	uint16_t row, col;

	if (x > this->m_width || y > this->m_height) {
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f8b3 3fa0 	ldrh.w	r3, [r3, #4000]	; 0xfa0
 8001f40:	897a      	ldrh	r2, [r7, #10]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	f200 808c 	bhi.w	8002060 <_ZN5Image9draw_charEttcP6_tFonttt+0x140>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f8b3 3fa2 	ldrh.w	r3, [r3, #4002]	; 0xfa2
 8001f4e:	893a      	ldrh	r2, [r7, #8]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	f200 8085 	bhi.w	8002060 <_ZN5Image9draw_charEttcP6_tFonttt+0x140>
	    // error
		return;
	}

	uint32_t char_offset = (ascii_char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	3b20      	subs	r3, #32
 8001f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f5c:	88d2      	ldrh	r2, [r2, #6]
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f64:	8892      	ldrh	r2, [r2, #4]
 8001f66:	08d2      	lsrs	r2, r2, #3
 8001f68:	b292      	uxth	r2, r2
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f6e:	8892      	ldrh	r2, [r2, #4]
 8001f70:	f002 0207 	and.w	r2, r2, #7
 8001f74:	2a00      	cmp	r2, #0
 8001f76:	d001      	beq.n	8001f7c <_ZN5Image9draw_charEttcP6_tFonttt+0x5c>
 8001f78:	2201      	movs	r2, #1
 8001f7a:	e000      	b.n	8001f7e <_ZN5Image9draw_charEttcP6_tFonttt+0x5e>
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	440a      	add	r2, r1
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	617b      	str	r3, [r7, #20]
	const unsigned char *ptr = &Font->table[char_offset];
 8001f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]

	for (row = 0; row < Font->Height; row++) {
 8001f90:	2300      	movs	r3, #0
 8001f92:	83fb      	strh	r3, [r7, #30]
 8001f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f96:	88db      	ldrh	r3, [r3, #6]
 8001f98:	8bfa      	ldrh	r2, [r7, #30]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d261      	bcs.n	8002062 <_ZN5Image9draw_charEttcP6_tFonttt+0x142>
	    for (col = 0; col < Font->Width; col++) {
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	83bb      	strh	r3, [r7, #28]
 8001fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa4:	889b      	ldrh	r3, [r3, #4]
 8001fa6:	8bba      	ldrh	r2, [r7, #28]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d24c      	bcs.n	8002046 <_ZN5Image9draw_charEttcP6_tFonttt+0x126>

	        //To determine whether the font background color and screen background color is consistent
	        if (FONT_BACKGROUND == bg_color) { //this process is to speed up the scan
 8001fac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001fae:	2bff      	cmp	r3, #255	; 0xff
 8001fb0:	d118      	bne.n	8001fe4 <_ZN5Image9draw_charEttcP6_tFonttt+0xc4>
	            if (*ptr & (0x80 >> (col % 8))) {
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	8bbb      	ldrh	r3, [r7, #28]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	2280      	movs	r2, #128	; 0x80
 8001fc0:	fa42 f303 	asr.w	r3, r2, r3
 8001fc4:	400b      	ands	r3, r1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d031      	beq.n	800202e <_ZN5Image9draw_charEttcP6_tFonttt+0x10e>
	                this->set_pixel(x + col, y + row, fg_color);
 8001fca:	897a      	ldrh	r2, [r7, #10]
 8001fcc:	8bbb      	ldrh	r3, [r7, #28]
 8001fce:	4413      	add	r3, r2
 8001fd0:	b299      	uxth	r1, r3
 8001fd2:	893a      	ldrh	r2, [r7, #8]
 8001fd4:	8bfb      	ldrh	r3, [r7, #30]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f7ff fc11 	bl	8001804 <_ZN5Image9set_pixelEttt>
 8001fe2:	e024      	b.n	800202e <_ZN5Image9draw_charEttcP6_tFonttt+0x10e>
	            }
	        } else {
	            if (*ptr & (0x80 >> (col % 8))) {
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	8bbb      	ldrh	r3, [r7, #28]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	2280      	movs	r2, #128	; 0x80
 8001ff2:	fa42 f303 	asr.w	r3, r2, r3
 8001ff6:	400b      	ands	r3, r1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00c      	beq.n	8002016 <_ZN5Image9draw_charEttcP6_tFonttt+0xf6>
	                this->set_pixel(x + col, y + row, fg_color);
 8001ffc:	897a      	ldrh	r2, [r7, #10]
 8001ffe:	8bbb      	ldrh	r3, [r7, #28]
 8002000:	4413      	add	r3, r2
 8002002:	b299      	uxth	r1, r3
 8002004:	893a      	ldrh	r2, [r7, #8]
 8002006:	8bfb      	ldrh	r3, [r7, #30]
 8002008:	4413      	add	r3, r2
 800200a:	b29a      	uxth	r2, r3
 800200c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f7ff fbf8 	bl	8001804 <_ZN5Image9set_pixelEttt>
 8002014:	e00b      	b.n	800202e <_ZN5Image9draw_charEttcP6_tFonttt+0x10e>
	            } else {
	                this->set_pixel(x + col, y + row, bg_color);
 8002016:	897a      	ldrh	r2, [r7, #10]
 8002018:	8bbb      	ldrh	r3, [r7, #28]
 800201a:	4413      	add	r3, r2
 800201c:	b299      	uxth	r1, r3
 800201e:	893a      	ldrh	r2, [r7, #8]
 8002020:	8bfb      	ldrh	r3, [r7, #30]
 8002022:	4413      	add	r3, r2
 8002024:	b29a      	uxth	r2, r3
 8002026:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f7ff fbeb 	bl	8001804 <_ZN5Image9set_pixelEttt>
	            }
	        }

	        //One pixel is 8 bits
	        if (col % 8 == 7) {
 800202e:	8bbb      	ldrh	r3, [r7, #28]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	2b07      	cmp	r3, #7
 8002036:	d102      	bne.n	800203e <_ZN5Image9draw_charEttcP6_tFonttt+0x11e>
	            ptr++;
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	3301      	adds	r3, #1
 800203c:	61bb      	str	r3, [r7, #24]
	    for (col = 0; col < Font->Width; col++) {
 800203e:	8bbb      	ldrh	r3, [r7, #28]
 8002040:	3301      	adds	r3, #1
 8002042:	83bb      	strh	r3, [r7, #28]
 8002044:	e7ad      	b.n	8001fa2 <_ZN5Image9draw_charEttcP6_tFonttt+0x82>
	        }
	    }// Write a line

	    if (Font->Width % 8 != 0) {
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	889b      	ldrh	r3, [r3, #4]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <_ZN5Image9draw_charEttcP6_tFonttt+0x138>
	        ptr++;
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	3301      	adds	r3, #1
 8002056:	61bb      	str	r3, [r7, #24]
	for (row = 0; row < Font->Height; row++) {
 8002058:	8bfb      	ldrh	r3, [r7, #30]
 800205a:	3301      	adds	r3, #1
 800205c:	83fb      	strh	r3, [r7, #30]
 800205e:	e799      	b.n	8001f94 <_ZN5Image9draw_charEttcP6_tFonttt+0x74>
		return;
 8002060:	bf00      	nop
	    }
	}// Write all
}
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <_ZN5Image11draw_stringEttPKcP6_tFonttt>:

void Image::draw_string(uint16_t x, uint16_t y, const char * string, sFONT* Font,
		uint16_t fg_color, uint16_t bg_color) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af04      	add	r7, sp, #16
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	817b      	strh	r3, [r7, #10]
 8002076:	4613      	mov	r3, r2
 8002078:	813b      	strh	r3, [r7, #8]

	uint16_t cur_x = x;
 800207a:	897b      	ldrh	r3, [r7, #10]
 800207c:	82fb      	strh	r3, [r7, #22]
	uint16_t cur_y = y;
 800207e:	893b      	ldrh	r3, [r7, #8]
 8002080:	82bb      	strh	r3, [r7, #20]

	if (x > this->m_width || y > this->m_height) {
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f8b3 3fa0 	ldrh.w	r3, [r3, #4000]	; 0xfa0
 8002088:	897a      	ldrh	r2, [r7, #10]
 800208a:	429a      	cmp	r2, r3
 800208c:	d83d      	bhi.n	800210a <_ZN5Image11draw_stringEttPKcP6_tFonttt+0xa2>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f8b3 3fa2 	ldrh.w	r3, [r3, #4002]	; 0xfa2
 8002094:	893a      	ldrh	r2, [r7, #8]
 8002096:	429a      	cmp	r2, r3
 8002098:	d837      	bhi.n	800210a <_ZN5Image11draw_stringEttPKcP6_tFonttt+0xa2>
	    // error
	    return;
	}

	while (*string != '\0') {
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d034      	beq.n	800210c <_ZN5Image11draw_stringEttPKcP6_tFonttt+0xa4>
	    if ((cur_x + Font->Width ) > this->m_width) {
 80020a2:	8afb      	ldrh	r3, [r7, #22]
 80020a4:	6a3a      	ldr	r2, [r7, #32]
 80020a6:	8892      	ldrh	r2, [r2, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	f8b2 2fa0 	ldrh.w	r2, [r2, #4000]	; 0xfa0
 80020b0:	4293      	cmp	r3, r2
 80020b2:	dd06      	ble.n	80020c2 <_ZN5Image11draw_stringEttPKcP6_tFonttt+0x5a>
	        cur_x = x;
 80020b4:	897b      	ldrh	r3, [r7, #10]
 80020b6:	82fb      	strh	r3, [r7, #22]
	        cur_y += Font->Height;
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	88da      	ldrh	r2, [r3, #6]
 80020bc:	8abb      	ldrh	r3, [r7, #20]
 80020be:	4413      	add	r3, r2
 80020c0:	82bb      	strh	r3, [r7, #20]
	    }

	    if ((cur_y  + Font->Height ) > this->m_height) {
 80020c2:	8abb      	ldrh	r3, [r7, #20]
 80020c4:	6a3a      	ldr	r2, [r7, #32]
 80020c6:	88d2      	ldrh	r2, [r2, #6]
 80020c8:	4413      	add	r3, r2
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	f8b2 2fa2 	ldrh.w	r2, [r2, #4002]	; 0xfa2
 80020d0:	4293      	cmp	r3, r2
 80020d2:	dd03      	ble.n	80020dc <_ZN5Image11draw_stringEttPKcP6_tFonttt+0x74>
	        cur_x = x;
 80020d4:	897b      	ldrh	r3, [r7, #10]
 80020d6:	82fb      	strh	r3, [r7, #22]
	        cur_y = y;
 80020d8:	893b      	ldrh	r3, [r7, #8]
 80020da:	82bb      	strh	r3, [r7, #20]
	    }

	    this->draw_char(cur_x, cur_y, *string, Font, bg_color, fg_color);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7818      	ldrb	r0, [r3, #0]
 80020e0:	8aba      	ldrh	r2, [r7, #20]
 80020e2:	8af9      	ldrh	r1, [r7, #22]
 80020e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020e6:	9302      	str	r3, [sp, #8]
 80020e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	4603      	mov	r3, r0
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f7ff ff14 	bl	8001f20 <_ZN5Image9draw_charEttcP6_tFonttt>

	    //The next character of the address
	    string++;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3301      	adds	r3, #1
 80020fc:	607b      	str	r3, [r7, #4]
	    cur_x += Font->Width;
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	889a      	ldrh	r2, [r3, #4]
 8002102:	8afb      	ldrh	r3, [r7, #22]
 8002104:	4413      	add	r3, r2
 8002106:	82fb      	strh	r3, [r7, #22]
	while (*string != '\0') {
 8002108:	e7c7      	b.n	800209a <_ZN5Image11draw_stringEttPKcP6_tFonttt+0x32>
	    return;
 800210a:	bf00      	nop
	}
}
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <_ZN5Image9get_imageEv>:
						(unsigned char)image_buffer[addr+ (this->m_height_byte)*this->m_width_byte*(region - 1)];
		}
	}
}

uint8_t* Image::get_image() {
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
	return this->m_img;
 800211a:	687b      	ldr	r3, [r7, #4]
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <_ZN5TokenD1Ev>:
	TOKEN_NUMBER, TOKEN_OPERATOR, TOKEN_ROLL, TOKEN_NONE
};

class Token {
public:
	virtual ~Token() {};
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	4a04      	ldr	r2, [pc, #16]	; (800215c <_ZN5TokenD1Ev+0x1c>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	0800d0c8 	.word	0x0800d0c8

08002160 <_ZN5TokenD0Ev>:
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ffe9 	bl	8002140 <_ZN5TokenD1Ev>
 800216e:	2104      	movs	r1, #4
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f008 f926 	bl	800a3c2 <_ZdlPvj>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <_ZN5TokenC1Ev>:
class Token {
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <_ZN5TokenC1Ev+0x1c>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	0800d0c8 	.word	0x0800d0c8

080021a0 <_ZN8OperatorD1Ev>:
protected:
	OperatorTokenType m_optype;
	int m_order;
public:
	Operator() : m_optype(OPTYPE_NONE), m_order(LOWEST_ORDER) {};
	virtual ~Operator() {};
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <_ZN8OperatorD1Ev+0x20>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ffc5 	bl	8002140 <_ZN5TokenD1Ev>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	0800d0b0 	.word	0x0800d0b0

080021c4 <_ZN8OperatorD0Ev>:
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ffe7 	bl	80021a0 <_ZN8OperatorD1Ev>
 80021d2:	210c      	movs	r1, #12
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f008 f8f4 	bl	800a3c2 <_ZdlPvj>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <_ZN8OperatorC1E17OperatorTokenTypei>:
	Operator(OperatorTokenType op_type, int order) : m_optype(op_type), m_order(order) {};
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	460b      	mov	r3, r1
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	72fb      	strb	r3, [r7, #11]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ffc3 	bl	8002180 <_ZN5TokenC1Ev>
 80021fa:	4a07      	ldr	r2, [pc, #28]	; (8002218 <_ZN8OperatorC1E17OperatorTokenTypei+0x34>)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	7afa      	ldrb	r2, [r7, #11]
 8002204:	711a      	strb	r2, [r3, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	0800d0b0 	.word	0x0800d0b0

0800221c <_ZN8Operator8get_typeEv>:
	TokenType get_type() override { return TOKEN_OPERATOR; };
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	2301      	movs	r3, #1
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <_ZN8Operator7op_typeEv>:
	virtual int eval(int left, int right) = 0;
	OperatorTokenType op_type() { return m_optype; };
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	791b      	ldrb	r3, [r3, #4]
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <_ZN8Operator5orderEv>:
	int order() { return m_order; };
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <_ZN3AddC1Ev>:

#include "Operator.h"

class Add : public Operator {
public:
	Add() : Operator(OPTYPE_ADDITION, 3) {};
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2203      	movs	r2, #3
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ffb6 	bl	80021e4 <_ZN8OperatorC1E17OperatorTokenTypei>
 8002278:	4a03      	ldr	r2, [pc, #12]	; (8002288 <_ZN3AddC1Ev+0x24>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	0800d098 	.word	0x0800d098

0800228c <_ZN3Add4evalEii>:
	int eval(int left, int right) override { return left + right; };
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <_ZN3SubC1Ev>:

#include "Operator.h"

class Sub : public Operator {
public:
	Sub() : Operator(OPTYPE_SUBTRACTION, 3) {};
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2203      	movs	r2, #3
 80022b8:	2101      	movs	r1, #1
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff ff92 	bl	80021e4 <_ZN8OperatorC1E17OperatorTokenTypei>
 80022c0:	4a03      	ldr	r2, [pc, #12]	; (80022d0 <_ZN3SubC1Ev+0x24>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	0800d080 	.word	0x0800d080

080022d4 <_ZN3Sub4evalEii>:
	int eval(int left, int right) override { return left - right; };
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	4618      	mov	r0, r3
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <_ZN4MultC1Ev>:

#include "Operator.h"

class Mult : public Operator {
public:
	Mult() : Operator(OPTYPE_MULTIPLICATION, 2) {};
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	2102      	movs	r1, #2
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff ff6e 	bl	80021e4 <_ZN8OperatorC1E17OperatorTokenTypei>
 8002308:	4a03      	ldr	r2, [pc, #12]	; (8002318 <_ZN4MultC1Ev+0x24>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	0800d068 	.word	0x0800d068

0800231c <_ZN4Mult4evalEii>:
	int eval(int left, int right) override { return left * right; };
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	fb02 f303 	mul.w	r3, r2, r3
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_ZN3DivC1Ev>:

#include "Operator.h"

class Div : public Operator {
public:
	Div() : Operator(OPTYPE_DIVISION, 2) {};
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	2103      	movs	r1, #3
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ff4a 	bl	80021e4 <_ZN8OperatorC1E17OperatorTokenTypei>
 8002350:	4a03      	ldr	r2, [pc, #12]	; (8002360 <_ZN3DivC1Ev+0x24>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	0800d050 	.word	0x0800d050

08002364 <_ZN3Div4evalEii>:
	int eval(int left, int right) override { return left / right; };
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	fb92 f3f3 	sdiv	r3, r2, r3
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_ZN7LiteralD1Ev>:

#include "Token.h"

class Literal : public Token {
public:
	virtual ~Literal() {}
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <_ZN7LiteralD1Ev+0x20>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fed3 	bl	8002140 <_ZN5TokenD1Ev>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	0800d038 	.word	0x0800d038

080023a8 <_ZN7LiteralD0Ev>:
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ffe7 	bl	8002384 <_ZN7LiteralD1Ev>
 80023b6:	2104      	movs	r1, #4
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f008 f802 	bl	800a3c2 <_ZdlPvj>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <_ZN7LiteralC1Ev>:
class Literal : public Token {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fed4 	bl	8002180 <_ZN5TokenC1Ev>
 80023d8:	4a03      	ldr	r2, [pc, #12]	; (80023e8 <_ZN7LiteralC1Ev+0x20>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	0800d038 	.word	0x0800d038

080023ec <_ZN4RollC1Eii>:
class Roll : public Literal {
	int m_sides;
	int m_rolls;
public:
	Roll() : m_sides(0), m_rolls(0) {};
	Roll(int sides, int rolls) : m_sides(sides), m_rolls(rolls) {};
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ffe4 	bl	80023c8 <_ZN7LiteralC1Ev>
 8002400:	4a06      	ldr	r2, [pc, #24]	; (800241c <_ZN4RollC1Eii+0x30>)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	0800d0dc 	.word	0x0800d0dc

08002420 <_ZN4Roll9set_sidesEi>:
	void set_sides(int sides) { m_sides = sides; };
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_ZN4Roll9get_sidesEv>:
	void set_rolls(int rolls) { m_rolls = rolls; };
	int value() override;
	TokenType get_type() override { return TOKEN_ROLL; };

	int get_sides() { return m_sides; };
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <_ZN4Roll9get_rollsEv>:
	int get_rolls() { return m_rolls; };
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_ZN6NumberC1Ev>:
#include "Literal.h"

class Number : public Literal {
	int m_value;
public:
	Number() : m_value(0) {};
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ffa6 	bl	80023c8 <_ZN7LiteralC1Ev>
 800247c:	4a05      	ldr	r2, [pc, #20]	; (8002494 <_ZN6NumberC1Ev+0x28>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	0800d020 	.word	0x0800d020

08002498 <_ZN6NumberC1Ei>:
	Number(int value) : m_value(value) {};
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff8f 	bl	80023c8 <_ZN7LiteralC1Ev>
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <_ZN6NumberC1Ei+0x28>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	0800d020 	.word	0x0800d020

080024c4 <_ZN6Number5valueEv>:
	void add_least_sig_digit(int new_digit);
	int value() override { return m_value; };
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <_ZN6Number8get_typeEv>:
	TokenType get_type() override { return TOKEN_NUMBER; };
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	2300      	movs	r3, #0
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <_ZN10Expression9add_tokenER5Token>:
#include "Mult.h"
#include "Div.h"
#include "Roll.h"
#include "Number.h"

void Expression::add_token(Token& token) {
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
	m_expr.push_back(&token);
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	f107 030c 	add.w	r3, r7, #12
 8002506:	4619      	mov	r1, r3
 8002508:	4610      	mov	r0, r2
 800250a:	f000 fbfb 	bl	8002d04 <_ZNSt6vectorIP5TokenSaIS1_EE9push_backEOS1_>
}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <_ZN10ExpressionD1Ev>:

Expression::~Expression() {
 8002516:	b590      	push	{r4, r7, lr}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
	for (uint16_t i=0; i<m_expr.size(); i++) {
 800251e:	2300      	movs	r3, #0
 8002520:	81fb      	strh	r3, [r7, #14]
 8002522:	89fc      	ldrh	r4, [r7, #14]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fbfd 	bl	8002d26 <_ZNKSt6vectorIP5TokenSaIS1_EE4sizeEv>
 800252c:	4603      	mov	r3, r0
 800252e:	429c      	cmp	r4, r3
 8002530:	bf34      	ite	cc
 8002532:	2301      	movcc	r3, #1
 8002534:	2300      	movcs	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d015      	beq.n	8002568 <_ZN10ExpressionD1Ev+0x52>
		Token *token = m_expr[i];
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	89fa      	ldrh	r2, [r7, #14]
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fc00 	bl	8002d48 <_ZNSt6vectorIP5TokenSaIS1_EEixEj>
 8002548:	4603      	mov	r3, r0
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60bb      	str	r3, [r7, #8]
		delete token;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <_ZN10ExpressionD1Ev+0x4a>
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	3304      	adds	r3, #4
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68b8      	ldr	r0, [r7, #8]
 800255e:	4798      	blx	r3
	for (uint16_t i=0; i<m_expr.size(); i++) {
 8002560:	89fb      	ldrh	r3, [r7, #14]
 8002562:	3301      	adds	r3, #1
 8002564:	81fb      	strh	r3, [r7, #14]
 8002566:	e7dc      	b.n	8002522 <_ZN10ExpressionD1Ev+0xc>
Expression::~Expression() {
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fba4 	bl	8002cb8 <_ZNSt6vectorIP5TokenSaIS1_EED1Ev>
	}
}
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	bd90      	pop	{r4, r7, pc}

0800257a <_ZN10Expression8can_evalEv>:

bool Expression::can_eval() {
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
	if (m_expr.size() == 0) {
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fbce 	bl	8002d26 <_ZNKSt6vectorIP5TokenSaIS1_EE4sizeEv>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf0c      	ite	eq
 8002590:	2301      	moveq	r3, #1
 8002592:	2300      	movne	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <_ZN10Expression8can_evalEv+0x24>
		return false;
 800259a:	2300      	movs	r3, #0
 800259c:	e010      	b.n	80025c0 <_ZN10Expression8can_evalEv+0x46>
	}

	if (m_expr.size() % 2 == 0) {
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fbc0 	bl	8002d26 <_ZNKSt6vectorIP5TokenSaIS1_EE4sizeEv>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <_ZN10Expression8can_evalEv+0x44>
		return false;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e000      	b.n	80025c0 <_ZN10Expression8can_evalEv+0x46>
	}

	// TODO: Check calc-ability

	return true;
 80025be:	2301      	movs	r3, #1
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <_ZN10Expression21find_highest_order_opEv>:

int Expression::find_highest_order_op() {
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b089      	sub	sp, #36	; 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	int first_order = LOWEST_ORDER;
 80025d0:	230a      	movs	r3, #10
 80025d2:	61fb      	str	r3, [r7, #28]
	int idx = -1;
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025d8:	61bb      	str	r3, [r7, #24]

	for (uint16_t i=0; i<m_expr.size(); i++) {
 80025da:	2300      	movs	r3, #0
 80025dc:	82fb      	strh	r3, [r7, #22]
 80025de:	8afc      	ldrh	r4, [r7, #22]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fb9f 	bl	8002d26 <_ZNKSt6vectorIP5TokenSaIS1_EE4sizeEv>
 80025e8:	4603      	mov	r3, r0
 80025ea:	429c      	cmp	r4, r3
 80025ec:	bf34      	ite	cc
 80025ee:	2301      	movcc	r3, #1
 80025f0:	2300      	movcs	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d026      	beq.n	8002646 <_ZN10Expression21find_highest_order_opEv+0x7e>
		Token *next_token = m_expr[i];
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	8afa      	ldrh	r2, [r7, #22]
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fba2 	bl	8002d48 <_ZNSt6vectorIP5TokenSaIS1_EEixEj>
 8002604:	4603      	mov	r3, r0
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	613b      	str	r3, [r7, #16]
		if (next_token->get_type() == TOKEN_OPERATOR) {
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3308      	adds	r3, #8
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6938      	ldr	r0, [r7, #16]
 8002614:	4798      	blx	r3
 8002616:	4603      	mov	r3, r0
 8002618:	2b01      	cmp	r3, #1
 800261a:	bf0c      	ite	eq
 800261c:	2301      	moveq	r3, #1
 800261e:	2300      	movne	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <_ZN10Expression21find_highest_order_opEv+0x76>
			int this_order = ((Operator *)next_token)->order();
 8002626:	6938      	ldr	r0, [r7, #16]
 8002628:	f7ff fe0f 	bl	800224a <_ZN8Operator5orderEv>
 800262c:	60f8      	str	r0, [r7, #12]
			if (this_order < first_order) {
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	429a      	cmp	r2, r3
 8002634:	da03      	bge.n	800263e <_ZN10Expression21find_highest_order_opEv+0x76>
				first_order = this_order;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	61fb      	str	r3, [r7, #28]
				idx = i;
 800263a:	8afb      	ldrh	r3, [r7, #22]
 800263c:	61bb      	str	r3, [r7, #24]
	for (uint16_t i=0; i<m_expr.size(); i++) {
 800263e:	8afb      	ldrh	r3, [r7, #22]
 8002640:	3301      	adds	r3, #1
 8002642:	82fb      	strh	r3, [r7, #22]
 8002644:	e7cb      	b.n	80025de <_ZN10Expression21find_highest_order_opEv+0x16>
			}
		}
	}
	return idx;
 8002646:	69bb      	ldr	r3, [r7, #24]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3724      	adds	r7, #36	; 0x24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd90      	pop	{r4, r7, pc}

08002650 <_ZN10Expression4evalEv>:

bool Expression::eval() {
 8002650:	b5b0      	push	{r4, r5, r7, lr}
 8002652:	b098      	sub	sp, #96	; 0x60
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	if (!this->can_eval()) {
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ff8e 	bl	800257a <_ZN10Expression8can_evalEv>
 800265e:	4603      	mov	r3, r0
 8002660:	f083 0301 	eor.w	r3, r3, #1
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <_ZN10Expression4evalEv+0x1e>
		return false;
 800266a:	2300      	movs	r3, #0
 800266c:	e107      	b.n	800287e <_ZN10Expression4evalEv+0x22e>
	}

	size_t vec_size = this->m_expr.size();
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4618      	mov	r0, r3
 8002672:	f000 fb58 	bl	8002d26 <_ZNKSt6vectorIP5TokenSaIS1_EE4sizeEv>
 8002676:	65f8      	str	r0, [r7, #92]	; 0x5c

	while ((vec_size > 1)) {
 8002678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800267a:	2b01      	cmp	r3, #1
 800267c:	f240 80c0 	bls.w	8002800 <_ZN10Expression4evalEv+0x1b0>
		// Find next operation to evaluate
		int op_idx = find_highest_order_op();
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ffa1 	bl	80025c8 <_ZN10Expression21find_highest_order_opEv>
 8002686:	65b8      	str	r0, [r7, #88]	; 0x58
		if (op_idx < 0) { return false; }
 8002688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800268a:	2b00      	cmp	r3, #0
 800268c:	da01      	bge.n	8002692 <_ZN10Expression4evalEv+0x42>
 800268e:	2300      	movs	r3, #0
 8002690:	e0f5      	b.n	800287e <_ZN10Expression4evalEv+0x22e>

		// Get neighbor tokens
		Operator* op = (Operator *)this->m_expr[op_idx];
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fb55 	bl	8002d48 <_ZNSt6vectorIP5TokenSaIS1_EEixEj>
 800269e:	4603      	mov	r3, r0
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	657b      	str	r3, [r7, #84]	; 0x54
		Literal* left_val = (Literal *)this->m_expr[op_idx-1];
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026a8:	3b01      	subs	r3, #1
 80026aa:	4619      	mov	r1, r3
 80026ac:	4610      	mov	r0, r2
 80026ae:	f000 fb4b 	bl	8002d48 <_ZNSt6vectorIP5TokenSaIS1_EEixEj>
 80026b2:	4603      	mov	r3, r0
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	653b      	str	r3, [r7, #80]	; 0x50
		Literal* right_val = (Literal *)this->m_expr[op_idx+1];
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026bc:	3301      	adds	r3, #1
 80026be:	4619      	mov	r1, r3
 80026c0:	4610      	mov	r0, r2
 80026c2:	f000 fb41 	bl	8002d48 <_ZNSt6vectorIP5TokenSaIS1_EEixEj>
 80026c6:	4603      	mov	r3, r0
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	64fb      	str	r3, [r7, #76]	; 0x4c

		// Evaluate operation
		int result = op->eval(left_val->value(), right_val->value());
 80026cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	330c      	adds	r3, #12
 80026d2:	681c      	ldr	r4, [r3, #0]
 80026d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	330c      	adds	r3, #12
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80026de:	4798      	blx	r3
 80026e0:	4605      	mov	r5, r0
 80026e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	330c      	adds	r3, #12
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80026ec:	4798      	blx	r3
 80026ee:	4603      	mov	r3, r0
 80026f0:	461a      	mov	r2, r3
 80026f2:	4629      	mov	r1, r5
 80026f4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80026f6:	47a0      	blx	r4
 80026f8:	64b8      	str	r0, [r7, #72]	; 0x48

		// Remove consumed tokens
		this->m_expr.erase(this->m_expr.begin()+(op_idx-1), this->m_expr.begin()+(op_idx+2));
 80026fa:	687c      	ldr	r4, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fb32 	bl	8002d68 <_ZNSt6vectorIP5TokenSaIS1_EE5beginEv>
 8002704:	4603      	mov	r3, r0
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800270a:	1e5a      	subs	r2, r3, #1
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fb38 	bl	8002d88 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEplEi>
 8002718:	4603      	mov	r3, r0
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	f107 0210 	add.w	r2, r7, #16
 8002720:	f107 030c 	add.w	r3, r7, #12
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fb46 	bl	8002db8 <_ZN9__gnu_cxx17__normal_iteratorIPKP5TokenSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fb1a 	bl	8002d68 <_ZNSt6vectorIP5TokenSaIS1_EE5beginEv>
 8002734:	4603      	mov	r3, r0
 8002736:	623b      	str	r3, [r7, #32]
 8002738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800273a:	1c9a      	adds	r2, r3, #2
 800273c:	f107 0320 	add.w	r3, r7, #32
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f000 fb20 	bl	8002d88 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEplEi>
 8002748:	4603      	mov	r3, r0
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	f107 021c 	add.w	r2, r7, #28
 8002750:	f107 0318 	add.w	r3, r7, #24
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fb2e 	bl	8002db8 <_ZN9__gnu_cxx17__normal_iteratorIPKP5TokenSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	68f9      	ldr	r1, [r7, #12]
 8002760:	4620      	mov	r0, r4
 8002762:	f000 fb3a 	bl	8002dda <_ZNSt6vectorIP5TokenSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EES8_>
		delete op;
 8002766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <_ZN10Expression4evalEv+0x128>
 800276c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3304      	adds	r3, #4
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002776:	4798      	blx	r3
		delete left_val;
 8002778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <_ZN10Expression4evalEv+0x13a>
 800277e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3304      	adds	r3, #4
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002788:	4798      	blx	r3
		delete right_val;
 800278a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <_ZN10Expression4evalEv+0x14c>
 8002790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3304      	adds	r3, #4
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800279a:	4798      	blx	r3

		//Add result as a new token
		Number *result_literal = new Number(result);
 800279c:	2008      	movs	r0, #8
 800279e:	f007 fe12 	bl	800a3c6 <_Znwj>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461c      	mov	r4, r3
 80027a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80027a8:	4620      	mov	r0, r4
 80027aa:	f7ff fe75 	bl	8002498 <_ZN6NumberC1Ei>
 80027ae:	647c      	str	r4, [r7, #68]	; 0x44
		this->m_expr.insert(this->m_expr.begin()+(op_idx-1), result_literal);
 80027b0:	687c      	ldr	r4, [r7, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fad7 	bl	8002d68 <_ZNSt6vectorIP5TokenSaIS1_EE5beginEv>
 80027ba:	4603      	mov	r3, r0
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027c0:	1e5a      	subs	r2, r3, #1
 80027c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fadd 	bl	8002d88 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEplEi>
 80027ce:	4603      	mov	r3, r0
 80027d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 faeb 	bl	8002db8 <_ZN9__gnu_cxx17__normal_iteratorIPKP5TokenSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 80027e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e4:	633b      	str	r3, [r7, #48]	; 0x30
 80027e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027ea:	461a      	mov	r2, r3
 80027ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ee:	4620      	mov	r0, r4
 80027f0:	f000 fb2c 	bl	8002e4c <_ZNSt6vectorIP5TokenSaIS1_EE6insertEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEOS1_>

		vec_size = this->m_expr.size();
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 fa95 	bl	8002d26 <_ZNKSt6vectorIP5TokenSaIS1_EE4sizeEv>
 80027fc:	65f8      	str	r0, [r7, #92]	; 0x5c
	while ((vec_size > 1)) {
 80027fe:	e73b      	b.n	8002678 <_ZN10Expression4evalEv+0x28>
	}

	// If the last token is a roll, then we need to evaluate
	// it, and push a number back to the stack
	Token *last_token = this->m_expr.back();
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fb36 	bl	8002e74 <_ZNSt6vectorIP5TokenSaIS1_EE4backEv>
 8002808:	4603      	mov	r3, r0
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	643b      	str	r3, [r7, #64]	; 0x40
	if (last_token->get_type() == TOKEN_ROLL) {
 800280e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	3308      	adds	r3, #8
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002818:	4798      	blx	r3
 800281a:	4603      	mov	r3, r0
 800281c:	2b02      	cmp	r3, #2
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d028      	beq.n	800287c <_ZN10Expression4evalEv+0x22c>
		Roll *last_roll = (Roll *)last_token;
 800282a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800282c:	63fb      	str	r3, [r7, #60]	; 0x3c
		this->m_expr.clear();
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fb3a 	bl	8002eaa <_ZNSt6vectorIP5TokenSaIS1_EE5clearEv>
		Number *final_result = new Number(last_roll->value());
 8002836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	330c      	adds	r3, #12
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002840:	4798      	blx	r3
 8002842:	4605      	mov	r5, r0
 8002844:	2008      	movs	r0, #8
 8002846:	f007 fdbe 	bl	800a3c6 <_Znwj>
 800284a:	4603      	mov	r3, r0
 800284c:	461c      	mov	r4, r3
 800284e:	4629      	mov	r1, r5
 8002850:	4620      	mov	r0, r4
 8002852:	f7ff fe21 	bl	8002498 <_ZN6NumberC1Ei>
 8002856:	63bc      	str	r4, [r7, #56]	; 0x38
		delete last_token;
 8002858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <_ZN10Expression4evalEv+0x21a>
 800285e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3304      	adds	r3, #4
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002868:	4798      	blx	r3
		this->m_expr.push_back(final_result);
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286e:	637b      	str	r3, [r7, #52]	; 0x34
 8002870:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002874:	4619      	mov	r1, r3
 8002876:	4610      	mov	r0, r2
 8002878:	f000 fa44 	bl	8002d04 <_ZNSt6vectorIP5TokenSaIS1_EE9push_backEOS1_>
	}

	return true;
 800287c:	2301      	movs	r3, #1
}
 800287e:	4618      	mov	r0, r3
 8002880:	3760      	adds	r7, #96	; 0x60
 8002882:	46bd      	mov	sp, r7
 8002884:	bdb0      	pop	{r4, r5, r7, pc}

08002886 <_ZN6SymbolC1Ev>:
	IntegerSymbol as_int;
	OperatorSymbol as_op;
	RandSymbol as_rand;
};

struct Symbol {
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3304      	adds	r3, #4
 8002892:	4618      	mov	r0, r3
 8002894:	f007 feaf 	bl	800a5f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <_ZN6SymbolD1Ev>:
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3304      	adds	r3, #4
 80028ae:	4618      	mov	r0, r3
 80028b0:	f007 fea8 	bl	800a604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <_ZN10Expression18convert_from_entryER9LineEntry>:


// TODO: Convert LineEntry to be an iterable, so this method can be streamlined
bool Expression::convert_from_entry(LineEntry& entry) {
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b093      	sub	sp, #76	; 0x4c
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
	m_expr.clear();
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 faec 	bl	8002eaa <_ZNSt6vectorIP5TokenSaIS1_EE5clearEv>
	Token* new_token;
	TokenType last_token_type = TOKEN_NONE;
 80028d2:	2303      	movs	r3, #3
 80028d4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	for (int i=0; i<entry.size(); i++) {
 80028d8:	2300      	movs	r3, #0
 80028da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028dc:	6838      	ldr	r0, [r7, #0]
 80028de:	f004 fdb0 	bl	8007442 <_ZN9LineEntry4sizeEv>
 80028e2:	4602      	mov	r2, r0
 80028e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e6:	4293      	cmp	r3, r2
 80028e8:	bfb4      	ite	lt
 80028ea:	2301      	movlt	r3, #1
 80028ec:	2300      	movge	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80f6 	beq.w	8002ae2 <_ZN10Expression18convert_from_entryER9LineEntry+0x222>
		Symbol sym;
 80028f6:	f107 030c 	add.w	r3, r7, #12
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ffc3 	bl	8002886 <_ZN6SymbolC1Ev>
		bool success = entry.get(i, &sym);
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	461a      	mov	r2, r3
 8002906:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002908:	6838      	ldr	r0, [r7, #0]
 800290a:	f004 fdc1 	bl	8007490 <_ZN9LineEntry3getEiP6Symbol>
 800290e:	4603      	mov	r3, r0
 8002910:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		if (m_expr.empty()) {
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fad5 	bl	8002ec6 <_ZNKSt6vectorIP5TokenSaIS1_EE5emptyEv>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <_ZN10Expression18convert_from_entryER9LineEntry+0x6a>
			last_token_type = TOKEN_NONE;
 8002922:	2303      	movs	r3, #3
 8002924:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002928:	e00d      	b.n	8002946 <_ZN10Expression18convert_from_entryER9LineEntry+0x86>
		} else {
			last_token_type = m_expr.back()->get_type();
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4618      	mov	r0, r3
 800292e:	f000 faa1 	bl	8002e74 <_ZNSt6vectorIP5TokenSaIS1_EE4backEv>
 8002932:	4603      	mov	r3, r0
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	3208      	adds	r2, #8
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	4790      	blx	r2
 8002940:	4603      	mov	r3, r0
 8002942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		}

		switch(sym.type) {
 8002946:	7b3b      	ldrb	r3, [r7, #12]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d042      	beq.n	80029d2 <_ZN10Expression18convert_from_entryER9LineEntry+0x112>
 800294c:	2b02      	cmp	r3, #2
 800294e:	f000 808d 	beq.w	8002a6c <_ZN10Expression18convert_from_entryER9LineEntry+0x1ac>
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 80bc 	bne.w	8002ad0 <_ZN10Expression18convert_from_entryER9LineEntry+0x210>

		case SYMBOL_OPERATOR:
			switch(sym.data.as_op.op_type) {
 8002958:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800295c:	2b03      	cmp	r3, #3
 800295e:	d833      	bhi.n	80029c8 <_ZN10Expression18convert_from_entryER9LineEntry+0x108>
 8002960:	a201      	add	r2, pc, #4	; (adr r2, 8002968 <_ZN10Expression18convert_from_entryER9LineEntry+0xa8>)
 8002962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002966:	bf00      	nop
 8002968:	080029a1 	.word	0x080029a1
 800296c:	080029b5 	.word	0x080029b5
 8002970:	08002979 	.word	0x08002979
 8002974:	0800298d 	.word	0x0800298d

			case SYMBOL_ADDITION:
				new_token = new Add();
 8002978:	200c      	movs	r0, #12
 800297a:	f007 fd24 	bl	800a3c6 <_Znwj>
 800297e:	4603      	mov	r3, r0
 8002980:	461c      	mov	r4, r3
 8002982:	4620      	mov	r0, r4
 8002984:	f7ff fc6e 	bl	8002264 <_ZN3AddC1Ev>
 8002988:	647c      	str	r4, [r7, #68]	; 0x44
				break;
 800298a:	e01d      	b.n	80029c8 <_ZN10Expression18convert_from_entryER9LineEntry+0x108>

			case SYMBOL_SUBTRACTION:
				new_token = new Sub();
 800298c:	200c      	movs	r0, #12
 800298e:	f007 fd1a 	bl	800a3c6 <_Znwj>
 8002992:	4603      	mov	r3, r0
 8002994:	461c      	mov	r4, r3
 8002996:	4620      	mov	r0, r4
 8002998:	f7ff fc88 	bl	80022ac <_ZN3SubC1Ev>
 800299c:	647c      	str	r4, [r7, #68]	; 0x44
				break;
 800299e:	e013      	b.n	80029c8 <_ZN10Expression18convert_from_entryER9LineEntry+0x108>

			case SYMBOL_MULTIPLICATION:
				new_token = new Mult();
 80029a0:	200c      	movs	r0, #12
 80029a2:	f007 fd10 	bl	800a3c6 <_Znwj>
 80029a6:	4603      	mov	r3, r0
 80029a8:	461c      	mov	r4, r3
 80029aa:	4620      	mov	r0, r4
 80029ac:	f7ff fca2 	bl	80022f4 <_ZN4MultC1Ev>
 80029b0:	647c      	str	r4, [r7, #68]	; 0x44
				break;
 80029b2:	e009      	b.n	80029c8 <_ZN10Expression18convert_from_entryER9LineEntry+0x108>

			case SYMBOL_DIVISION:
				new_token = new Div();
 80029b4:	200c      	movs	r0, #12
 80029b6:	f007 fd06 	bl	800a3c6 <_Znwj>
 80029ba:	4603      	mov	r3, r0
 80029bc:	461c      	mov	r4, r3
 80029be:	4620      	mov	r0, r4
 80029c0:	f7ff fcbc 	bl	800233c <_ZN3DivC1Ev>
 80029c4:	647c      	str	r4, [r7, #68]	; 0x44
				break;
 80029c6:	bf00      	nop
			}
			add_token(*new_token);
 80029c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff fd91 	bl	80024f2 <_ZN10Expression9add_tokenER5Token>
			break;
 80029d0:	e07e      	b.n	8002ad0 <_ZN10Expression18convert_from_entryER9LineEntry+0x210>

		case SYMBOL_INTEGER:
			new_token = new Number();
 80029d2:	2008      	movs	r0, #8
 80029d4:	f007 fcf7 	bl	800a3c6 <_Znwj>
 80029d8:	4603      	mov	r3, r0
 80029da:	461c      	mov	r4, r3
 80029dc:	4620      	mov	r0, r4
 80029de:	f7ff fd45 	bl	800246c <_ZN6NumberC1Ev>
 80029e2:	647c      	str	r4, [r7, #68]	; 0x44
			do {
				((Number*)new_token)->add_least_sig_digit(sym.data.as_int.value);
 80029e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e6:	4619      	mov	r1, r3
 80029e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80029ea:	f001 f9a7 	bl	8003d3c <_ZN6Number19add_least_sig_digitEi>
				success = entry.get(++i, &sym);
 80029ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f0:	3301      	adds	r3, #1
 80029f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029f4:	f107 030c 	add.w	r3, r7, #12
 80029f8:	461a      	mov	r2, r3
 80029fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029fc:	6838      	ldr	r0, [r7, #0]
 80029fe:	f004 fd47 	bl	8007490 <_ZN9LineEntry3getEiP6Symbol>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			} while (success && (sym.type == SYMBOL_INTEGER));
 8002a08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a0c:	f083 0301 	eor.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d103      	bne.n	8002a1e <_ZN10Expression18convert_from_entryER9LineEntry+0x15e>
 8002a16:	7b3b      	ldrb	r3, [r7, #12]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d100      	bne.n	8002a1e <_ZN10Expression18convert_from_entryER9LineEntry+0x15e>
			do {
 8002a1c:	e7e2      	b.n	80029e4 <_ZN10Expression18convert_from_entryER9LineEntry+0x124>
			i--;
 8002a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a20:	3b01      	subs	r3, #1
 8002a22:	63fb      	str	r3, [r7, #60]	; 0x3c

			if (last_token_type == TOKEN_ROLL) {
 8002a24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d11a      	bne.n	8002a62 <_ZN10Expression18convert_from_entryER9LineEntry+0x1a2>
				int literal_val = ((Literal*)new_token)->value();
 8002a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	330c      	adds	r3, #12
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002a36:	4798      	blx	r3
 8002a38:	62f8      	str	r0, [r7, #44]	; 0x2c
				((Roll *)m_expr.back())->set_sides(literal_val);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fa19 	bl	8002e74 <_ZNSt6vectorIP5TokenSaIS1_EE4backEv>
 8002a42:	4603      	mov	r3, r0
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fce9 	bl	8002420 <_ZN4Roll9set_sidesEi>
				delete new_token;
 8002a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d03c      	beq.n	8002ace <_ZN10Expression18convert_from_entryER9LineEntry+0x20e>
 8002a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002a5e:	4798      	blx	r3
			} else {
				add_token(*new_token);
			}
			break;
 8002a60:	e035      	b.n	8002ace <_ZN10Expression18convert_from_entryER9LineEntry+0x20e>
				add_token(*new_token);
 8002a62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff fd44 	bl	80024f2 <_ZN10Expression9add_tokenER5Token>
			break;
 8002a6a:	e030      	b.n	8002ace <_ZN10Expression18convert_from_entryER9LineEntry+0x20e>

		case SYMBOL_RAND:
			int num_rolls = 1;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	63bb      	str	r3, [r7, #56]	; 0x38
			if (last_token_type == TOKEN_NUMBER) {
 8002a70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d11a      	bne.n	8002aae <_ZN10Expression18convert_from_entryER9LineEntry+0x1ee>
				Number *last_lit = (Number *)m_expr.back();
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f9fa 	bl	8002e74 <_ZNSt6vectorIP5TokenSaIS1_EE4backEv>
 8002a80:	4603      	mov	r3, r0
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	633b      	str	r3, [r7, #48]	; 0x30
				num_rolls = last_lit->value();
 8002a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a90:	4798      	blx	r3
 8002a92:	63b8      	str	r0, [r7, #56]	; 0x38
				m_expr.pop_back();
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fa30 	bl	8002efc <_ZNSt6vectorIP5TokenSaIS1_EE8pop_backEv>
				delete last_lit;
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <_ZN10Expression18convert_from_entryER9LineEntry+0x1ee>
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aac:	4798      	blx	r3
			}

			new_token = new Roll(0, num_rolls);
 8002aae:	200c      	movs	r0, #12
 8002ab0:	f007 fc89 	bl	800a3c6 <_Znwj>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	461c      	mov	r4, r3
 8002ab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aba:	2100      	movs	r1, #0
 8002abc:	4620      	mov	r0, r4
 8002abe:	f7ff fc95 	bl	80023ec <_ZN4RollC1Eii>
 8002ac2:	647c      	str	r4, [r7, #68]	; 0x44
			add_token(*new_token);
 8002ac4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff fd13 	bl	80024f2 <_ZN10Expression9add_tokenER5Token>
			break;
 8002acc:	e000      	b.n	8002ad0 <_ZN10Expression18convert_from_entryER9LineEntry+0x210>
			break;
 8002ace:	bf00      	nop
		Symbol sym;
 8002ad0:	f107 030c 	add.w	r3, r7, #12
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fee4 	bl	80028a2 <_ZN6SymbolD1Ev>
	for (int i=0; i<entry.size(); i++) {
 8002ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002adc:	3301      	adds	r3, #1
 8002ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae0:	e6fc      	b.n	80028dc <_ZN10Expression18convert_from_entryER9LineEntry+0x1c>
		}

	}
	return true;
 8002ae2:	2301      	movs	r3, #1
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	374c      	adds	r7, #76	; 0x4c
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd90      	pop	{r4, r7, pc}

08002aec <_ZN10Expression14write_to_entryER9LineEntry>:

bool Expression::write_to_entry(LineEntry& entry) {
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b089      	sub	sp, #36	; 0x24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
	for (uint16_t i=0; i<this->m_expr.size(); i++) {
 8002af6:	2300      	movs	r3, #0
 8002af8:	83fb      	strh	r3, [r7, #30]
 8002afa:	8bfc      	ldrh	r4, [r7, #30]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f911 	bl	8002d26 <_ZNKSt6vectorIP5TokenSaIS1_EE4sizeEv>
 8002b04:	4603      	mov	r3, r0
 8002b06:	429c      	cmp	r4, r3
 8002b08:	bf34      	ite	cc
 8002b0a:	2301      	movcc	r3, #1
 8002b0c:	2300      	movcs	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d07c      	beq.n	8002c0e <_ZN10Expression14write_to_entryER9LineEntry+0x122>
		Token* token = m_expr[i];
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	8bfa      	ldrh	r2, [r7, #30]
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f914 	bl	8002d48 <_ZNSt6vectorIP5TokenSaIS1_EEixEj>
 8002b20:	4603      	mov	r3, r0
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	61bb      	str	r3, [r7, #24]

		switch(token->get_type()) {
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3308      	adds	r3, #8
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69b8      	ldr	r0, [r7, #24]
 8002b30:	4798      	blx	r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d011      	beq.n	8002b5c <_ZN10Expression14write_to_entryER9LineEntry+0x70>
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d047      	beq.n	8002bcc <_ZN10Expression14write_to_entryER9LineEntry+0xe0>
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d000      	beq.n	8002b42 <_ZN10Expression14write_to_entryER9LineEntry+0x56>
			this->write_number_to_entry(sides, entry);
			break;
		}

		default:
			break;
 8002b40:	e061      	b.n	8002c06 <_ZN10Expression14write_to_entryER9LineEntry+0x11a>
			int token_val = ((Number *)token)->value();
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	330c      	adds	r3, #12
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	69b8      	ldr	r0, [r7, #24]
 8002b4c:	4798      	blx	r3
 8002b4e:	60f8      	str	r0, [r7, #12]
			this->write_number_to_entry(token_val, entry);
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	68f9      	ldr	r1, [r7, #12]
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f85f 	bl	8002c18 <_ZN10Expression21write_number_to_entryEiR9LineEntry>
			break;
 8002b5a:	e054      	b.n	8002c06 <_ZN10Expression14write_to_entryER9LineEntry+0x11a>
			switch(((Operator *)token)->op_type()) {
 8002b5c:	69b8      	ldr	r0, [r7, #24]
 8002b5e:	f7ff fb68 	bl	8002232 <_ZN8Operator7op_typeEv>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d82f      	bhi.n	8002bc8 <_ZN10Expression14write_to_entryER9LineEntry+0xdc>
 8002b68:	a201      	add	r2, pc, #4	; (adr r2, 8002b70 <_ZN10Expression14write_to_entryER9LineEntry+0x84>)
 8002b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6e:	bf00      	nop
 8002b70:	08002b81 	.word	0x08002b81
 8002b74:	08002b93 	.word	0x08002b93
 8002b78:	08002ba5 	.word	0x08002ba5
 8002b7c:	08002bb7 	.word	0x08002bb7
				entry.add_symbol(Symbols::op(SYMBOL_ADDITION));
 8002b80:	2002      	movs	r0, #2
 8002b82:	f005 f89f 	bl	8007cc4 <_ZN7Symbols2opE18OperatorSymbolType>
 8002b86:	4603      	mov	r3, r0
 8002b88:	4619      	mov	r1, r3
 8002b8a:	6838      	ldr	r0, [r7, #0]
 8002b8c:	f004 fc1a 	bl	80073c4 <_ZN9LineEntry10add_symbolER6Symbol>
				break;
 8002b90:	e01b      	b.n	8002bca <_ZN10Expression14write_to_entryER9LineEntry+0xde>
				entry.add_symbol(Symbols::op(SYMBOL_SUBTRACTION));
 8002b92:	2003      	movs	r0, #3
 8002b94:	f005 f896 	bl	8007cc4 <_ZN7Symbols2opE18OperatorSymbolType>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6838      	ldr	r0, [r7, #0]
 8002b9e:	f004 fc11 	bl	80073c4 <_ZN9LineEntry10add_symbolER6Symbol>
				break;
 8002ba2:	e012      	b.n	8002bca <_ZN10Expression14write_to_entryER9LineEntry+0xde>
				entry.add_symbol(Symbols::op(SYMBOL_MULTIPLICATION));
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f005 f88d 	bl	8007cc4 <_ZN7Symbols2opE18OperatorSymbolType>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4619      	mov	r1, r3
 8002bae:	6838      	ldr	r0, [r7, #0]
 8002bb0:	f004 fc08 	bl	80073c4 <_ZN9LineEntry10add_symbolER6Symbol>
				break;
 8002bb4:	e009      	b.n	8002bca <_ZN10Expression14write_to_entryER9LineEntry+0xde>
				entry.add_symbol(Symbols::op(SYMBOL_DIVISION));
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f005 f884 	bl	8007cc4 <_ZN7Symbols2opE18OperatorSymbolType>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	6838      	ldr	r0, [r7, #0]
 8002bc2:	f004 fbff 	bl	80073c4 <_ZN9LineEntry10add_symbolER6Symbol>
				break;
 8002bc6:	e000      	b.n	8002bca <_ZN10Expression14write_to_entryER9LineEntry+0xde>
				break;
 8002bc8:	bf00      	nop
			break;
 8002bca:	e01c      	b.n	8002c06 <_ZN10Expression14write_to_entryER9LineEntry+0x11a>
			int sides = ((Roll *)token)->get_sides();
 8002bcc:	69b8      	ldr	r0, [r7, #24]
 8002bce:	f7ff fc35 	bl	800243c <_ZN4Roll9get_sidesEv>
 8002bd2:	6178      	str	r0, [r7, #20]
			int rolls = ((Roll *)token)->get_rolls();
 8002bd4:	69b8      	ldr	r0, [r7, #24]
 8002bd6:	f7ff fc3d 	bl	8002454 <_ZN4Roll9get_rollsEv>
 8002bda:	6138      	str	r0, [r7, #16]
			if (rolls != 1) {
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d004      	beq.n	8002bec <_ZN10Expression14write_to_entryER9LineEntry+0x100>
				this->write_number_to_entry(rolls, entry);
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	6939      	ldr	r1, [r7, #16]
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f816 	bl	8002c18 <_ZN10Expression21write_number_to_entryEiR9LineEntry>
			entry.add_symbol(Symbols::rand());
 8002bec:	f005 f884 	bl	8007cf8 <_ZN7Symbols4randEv>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6838      	ldr	r0, [r7, #0]
 8002bf6:	f004 fbe5 	bl	80073c4 <_ZN9LineEntry10add_symbolER6Symbol>
			this->write_number_to_entry(sides, entry);
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	6979      	ldr	r1, [r7, #20]
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f80a 	bl	8002c18 <_ZN10Expression21write_number_to_entryEiR9LineEntry>
			break;
 8002c04:	bf00      	nop
	for (uint16_t i=0; i<this->m_expr.size(); i++) {
 8002c06:	8bfb      	ldrh	r3, [r7, #30]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	83fb      	strh	r3, [r7, #30]
 8002c0c:	e775      	b.n	8002afa <_ZN10Expression14write_to_entryER9LineEntry+0xe>
		}
	}
	return true;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3724      	adds	r7, #36	; 0x24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd90      	pop	{r4, r7, pc}

08002c18 <_ZN10Expression21write_number_to_entryEiR9LineEntry>:

void Expression::write_number_to_entry(int num, LineEntry& entry) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
	int num_digits = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
	int factor = 1;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	623b      	str	r3, [r7, #32]

	while (num / factor > 0) {
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	dd09      	ble.n	8002c4c <_ZN10Expression21write_number_to_entryEiR9LineEntry+0x34>
		num_digits++;
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
		factor *= 10;
 8002c3e:	6a3a      	ldr	r2, [r7, #32]
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	623b      	str	r3, [r7, #32]
	while (num / factor > 0) {
 8002c4a:	e7ef      	b.n	8002c2c <_ZN10Expression21write_number_to_entryEiR9LineEntry+0x14>
	}

	for (int i=num_digits; i>0; i--) {
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	dd2c      	ble.n	8002cb0 <_ZN10Expression21write_number_to_entryEiR9LineEntry+0x98>
		factor = 1;
 8002c56:	2301      	movs	r3, #1
 8002c58:	623b      	str	r3, [r7, #32]
		for (int j=0; j<(i-1); j++) {
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	da09      	bge.n	8002c7c <_ZN10Expression21write_number_to_entryEiR9LineEntry+0x64>
			factor *= 10;
 8002c68:	6a3a      	ldr	r2, [r7, #32]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	623b      	str	r3, [r7, #32]
		for (int j=0; j<(i-1); j++) {
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	3301      	adds	r3, #1
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	e7f0      	b.n	8002c5e <_ZN10Expression21write_number_to_entryEiR9LineEntry+0x46>
		}

		int digit = num / factor;
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c84:	617b      	str	r3, [r7, #20]
		entry.add_symbol(Symbols::num(digit));
 8002c86:	6978      	ldr	r0, [r7, #20]
 8002c88:	f005 f802 	bl	8007c90 <_ZN7Symbols3numEi>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4619      	mov	r1, r3
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f004 fb97 	bl	80073c4 <_ZN9LineEntry10add_symbolER6Symbol>

		num = num % factor;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	6a3a      	ldr	r2, [r7, #32]
 8002c9a:	fb93 f2f2 	sdiv	r2, r3, r2
 8002c9e:	6a39      	ldr	r1, [r7, #32]
 8002ca0:	fb01 f202 	mul.w	r2, r1, r2
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	60bb      	str	r3, [r7, #8]
	for (int i=num_digits; i>0; i--) {
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	e7cf      	b.n	8002c50 <_ZN10Expression21write_number_to_entryEiR9LineEntry+0x38>
	}
}
 8002cb0:	bf00      	nop
 8002cb2:	3728      	adds	r7, #40	; 0x28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_ZNSt6vectorIP5TokenSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002cb8:	b5b0      	push	{r4, r5, r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681c      	ldr	r4, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f950 	bl	8002f70 <_ZNSt12_Vector_baseIP5TokenSaIS1_EE19_M_get_Tp_allocatorEv>
 8002cd0:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	f000 f955 	bl	8002f86 <_ZSt8_DestroyIPP5TokenS1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f92c 	bl	8002f3c <_ZNSt12_Vector_baseIP5TokenSaIS1_EED1Ev>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bdb0      	pop	{r4, r5, r7, pc}

08002cee <_ZSt4moveIRP5TokenEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <_ZNSt6vectorIP5TokenSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8002d0e:	6838      	ldr	r0, [r7, #0]
 8002d10:	f7ff ffed 	bl	8002cee <_ZSt4moveIRP5TokenEONSt16remove_referenceIT_E4typeEOS4_>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4619      	mov	r1, r3
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f94d 	bl	8002fb8 <_ZNSt6vectorIP5TokenSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <_ZNKSt6vectorIP5TokenSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	461a      	mov	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	109b      	asrs	r3, r3, #2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <_ZNSt6vectorIP5TokenSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
      }
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <_ZNSt6vectorIP5TokenSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	f107 030c 	add.w	r3, r7, #12
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 f94b 	bl	8003014 <_ZN9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEplEi>:
      __normal_iterator&
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	f107 020c 	add.w	r2, r7, #12
 8002da2:	f107 0308 	add.w	r3, r7, #8
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 f933 	bl	8003014 <_ZN9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <_ZN9__gnu_cxx17__normal_iteratorIPKP5TokenSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 8002dc2:	6838      	ldr	r0, [r7, #0]
 8002dc4:	f000 f936 	bl	8003034 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEE4baseEv>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <_ZNSt6vectorIP5TokenSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EES8_>:
       *  pointers, the pointed-to memory is not touched in any way.
       *  Managing the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __first, const_iterator __last)
 8002dda:	b590      	push	{r4, r7, lr}
 8002ddc:	b087      	sub	sp, #28
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
      {
	const auto __beg = begin();
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f7ff ffbe 	bl	8002d68 <_ZNSt6vectorIP5TokenSaIS1_EE5beginEv>
 8002dec:	4603      	mov	r3, r0
 8002dee:	617b      	str	r3, [r7, #20]
	const auto __cbeg = cbegin();
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f92a 	bl	800304a <_ZNKSt6vectorIP5TokenSaIS1_EE6cbeginEv>
 8002df6:	4603      	mov	r3, r0
 8002df8:	613b      	str	r3, [r7, #16]
	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
 8002dfa:	f107 0210 	add.w	r2, r7, #16
 8002dfe:	f107 0308 	add.w	r3, r7, #8
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 f934 	bl	8003072 <_ZN9__gnu_cxxmiIPKP5TokenSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff ffb8 	bl	8002d88 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEplEi>
 8002e18:	4604      	mov	r4, r0
 8002e1a:	f107 0210 	add.w	r2, r7, #16
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f925 	bl	8003072 <_ZN9__gnu_cxxmiIPKP5TokenSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	f107 0314 	add.w	r3, r7, #20
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ffa9 	bl	8002d88 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEplEi>
 8002e36:	4603      	mov	r3, r0
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f92e 	bl	800309e <_ZNSt6vectorIP5TokenSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_>
 8002e42:	4603      	mov	r3, r0
      }
 8002e44:	4618      	mov	r0, r3
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd90      	pop	{r4, r7, pc}

08002e4c <_ZNSt6vectorIP5TokenSaIS1_EE6insertEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEOS1_>:
      insert(const_iterator __position, value_type&& __x)
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
      { return _M_insert_rval(__position, std::move(__x)); }
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ff48 	bl	8002cee <_ZSt4moveIRP5TokenEONSt16remove_referenceIT_E4typeEOS4_>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	461a      	mov	r2, r3
 8002e62:	68b9      	ldr	r1, [r7, #8]
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f961 	bl	800312c <_ZNSt6vectorIP5TokenSaIS1_EE14_M_insert_rvalEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEOS1_>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <_ZNSt6vectorIP5TokenSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f9cf 	bl	8003220 <_ZNSt6vectorIP5TokenSaIS1_EE3endEv>
 8002e82:	4603      	mov	r3, r0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	f107 030c 	add.w	r3, r7, #12
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 f9d8 	bl	8003242 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEmiEi>
 8002e92:	4603      	mov	r3, r0
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	f107 0308 	add.w	r3, r7, #8
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f9ea 	bl	8003274 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEdeEv>
 8002ea0:	4603      	mov	r3, r0
      }
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <_ZNSt6vectorIP5TokenSaIS1_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f9e7 	bl	800328c <_ZNSt6vectorIP5TokenSaIS1_EE15_M_erase_at_endEPS1_>
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <_ZNKSt6vectorIP5TokenSaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f9f4 	bl	80032bc <_ZNKSt6vectorIP5TokenSaIS1_EE5beginEv>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fa03 	bl	80032e4 <_ZNKSt6vectorIP5TokenSaIS1_EE3endEv>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	f107 020c 	add.w	r2, r7, #12
 8002ee6:	f107 0308 	add.w	r3, r7, #8
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 fa0d 	bl	800330c <_ZN9__gnu_cxxeqIPKP5TokenSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <_ZNSt6vectorIP5TokenSaIS1_EE8pop_backEv>:
      pop_back() _GLIBCXX_NOEXCEPT
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	--this->_M_impl._M_finish;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	1f1a      	subs	r2, r3, #4
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	605a      	str	r2, [r3, #4]
	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4619      	mov	r1, r3
 8002f16:	4610      	mov	r0, r2
 8002f18:	f000 fa10 	bl	800333c <_ZNSt16allocator_traitsISaIP5TokenEE7destroyIS1_EEvRS2_PT_>
      }
 8002f1c:	bf00      	nop
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <_ZNSt12_Vector_baseIP5TokenSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 fa12 	bl	8003356 <_ZNSaIP5TokenED1Ev>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <_ZNSt12_Vector_baseIP5TokenSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6819      	ldr	r1, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8002f56:	461a      	mov	r2, r3
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fa08 	bl	800336e <_ZNSt12_Vector_baseIP5TokenSaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ffdf 	bl	8002f24 <_ZNSt12_Vector_baseIP5TokenSaIS1_EE12_Vector_implD1Ev>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <_ZNSt12_Vector_baseIP5TokenSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <_ZSt8_DestroyIPP5TokenS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 f9fd 	bl	8003394 <_ZSt8_DestroyIPP5TokenEvT_S3_>
    }
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <_ZSt7forwardIP5TokenEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <_ZNSt6vectorIP5TokenSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8002fb8:	b5b0      	push	{r4, r5, r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d011      	beq.n	8002ff2 <_ZNSt6vectorIP5TokenSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002fce:	687c      	ldr	r4, [r7, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685d      	ldr	r5, [r3, #4]
 8002fd4:	6838      	ldr	r0, [r7, #0]
 8002fd6:	f7ff ffe4 	bl	8002fa2 <_ZSt7forwardIP5TokenEOT_RNSt16remove_referenceIS2_E4typeE>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4629      	mov	r1, r5
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f000 f9e4 	bl	80033ae <_ZNSt16allocator_traitsISaIP5TokenEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	1d1a      	adds	r2, r3, #4
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8002ff0:	e00c      	b.n	800300c <_ZNSt6vectorIP5TokenSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f914 	bl	8003220 <_ZNSt6vectorIP5TokenSaIS1_EE3endEv>
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	6838      	ldr	r0, [r7, #0]
 8002ffc:	f7ff ffd1 	bl	8002fa2 <_ZSt7forwardIP5TokenEOT_RNSt16remove_referenceIS2_E4typeE>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	4621      	mov	r1, r4
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f9e4 	bl	80033d4 <_ZNSt6vectorIP5TokenSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bdb0      	pop	{r4, r5, r7, pc}

08003014 <_ZN9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <_ZNKSt6vectorIP5TokenSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	f107 020c 	add.w	r2, r7, #12
 800305c:	f107 0308 	add.w	r3, r7, #8
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fa42 	bl	80034ec <_ZN9__gnu_cxx17__normal_iteratorIPKP5TokenSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <_ZN9__gnu_cxxmiIPKP5TokenSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003072:	b590      	push	{r4, r7, lr}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fa45 	bl	800350c <_ZNK9__gnu_cxx17__normal_iteratorIPKP5TokenSt6vectorIS2_SaIS2_EEE4baseEv>
 8003082:	4603      	mov	r3, r0
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	461c      	mov	r4, r3
 8003088:	6838      	ldr	r0, [r7, #0]
 800308a:	f000 fa3f 	bl	800350c <_ZNK9__gnu_cxx17__normal_iteratorIPKP5TokenSt6vectorIS2_SaIS2_EEE4baseEv>
 800308e:	4603      	mov	r3, r0
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	1ae3      	subs	r3, r4, r3
 8003094:	109b      	asrs	r3, r3, #2
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	bd90      	pop	{r4, r7, pc}

0800309e <_ZNSt6vectorIP5TokenSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_>:
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
 800309e:	b590      	push	{r4, r7, lr}
 80030a0:	b087      	sub	sp, #28
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 80030aa:	1d3a      	adds	r2, r7, #4
 80030ac:	f107 0308 	add.w	r3, r7, #8
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fa35 	bl	8003522 <_ZN9__gnu_cxxneIPP5TokenSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d031      	beq.n	8003122 <_ZNSt6vectorIP5TokenSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_+0x84>
	{
	  if (__last != end())
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f8ae 	bl	8003220 <_ZNSt6vectorIP5TokenSaIS1_EE3endEv>
 80030c4:	4603      	mov	r3, r0
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	f107 0210 	add.w	r2, r7, #16
 80030cc:	1d3b      	adds	r3, r7, #4
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fa26 	bl	8003522 <_ZN9__gnu_cxxneIPP5TokenSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <_ZNSt6vectorIP5TokenSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_+0x50>
	    _GLIBCXX_MOVE3(__last, end(), __first);
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f89f 	bl	8003220 <_ZNSt6vectorIP5TokenSaIS1_EE3endEv>
 80030e2:	4603      	mov	r3, r0
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	4619      	mov	r1, r3
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fa32 	bl	8003552 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
	  _M_erase_at_end(__first.base() + (end() - __last));
 80030ee:	f107 0308 	add.w	r3, r7, #8
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff ff9e 	bl	8003034 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEE4baseEv>
 80030f8:	4603      	mov	r3, r0
 80030fa:	681c      	ldr	r4, [r3, #0]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f88f 	bl	8003220 <_ZNSt6vectorIP5TokenSaIS1_EE3endEv>
 8003102:	4603      	mov	r3, r0
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	1d3a      	adds	r2, r7, #4
 8003108:	f107 0314 	add.w	r3, r7, #20
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fa37 	bl	8003582 <_ZN9__gnu_cxxmiIPP5TokenSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8003114:	4603      	mov	r3, r0
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4423      	add	r3, r4
 800311a:	4619      	mov	r1, r3
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f8b5 	bl	800328c <_ZNSt6vectorIP5TokenSaIS1_EE15_M_erase_at_endEPS1_>
	}
      return __first;
 8003122:	68bb      	ldr	r3, [r7, #8]
    }
 8003124:	4618      	mov	r0, r3
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	bd90      	pop	{r4, r7, pc}

0800312c <_ZNSt6vectorIP5TokenSaIS1_EE14_M_insert_rvalEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEOS1_>:
      }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    auto
    vector<_Tp, _Alloc>::
 800312c:	b5b0      	push	{r4, r5, r7, lr}
 800312e:	b08c      	sub	sp, #48	; 0x30
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
    _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator
    {
      const auto __n = __position - cbegin();
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7ff ff86 	bl	800304a <_ZNKSt6vectorIP5TokenSaIS1_EE6cbeginEv>
 800313e:	4603      	mov	r3, r0
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	f107 0214 	add.w	r2, r7, #20
 8003146:	f107 0308 	add.w	r3, r7, #8
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff90 	bl	8003072 <_ZN9__gnu_cxxmiIPKP5TokenSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8003152:	62f8      	str	r0, [r7, #44]	; 0x2c
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	429a      	cmp	r2, r3
 800315e:	d037      	beq.n	80031d0 <_ZNSt6vectorIP5TokenSaIS1_EE14_M_insert_rvalEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEOS1_+0xa4>
	if (__position == cend())
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 fa24 	bl	80035ae <_ZNKSt6vectorIP5TokenSaIS1_EE4cendEv>
 8003166:	4603      	mov	r3, r0
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	f107 0218 	add.w	r2, r7, #24
 800316e:	f107 0308 	add.w	r3, r7, #8
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f000 f8c9 	bl	800330c <_ZN9__gnu_cxxeqIPKP5TokenSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d011      	beq.n	80031a4 <_ZNSt6vectorIP5TokenSaIS1_EE14_M_insert_rvalEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEOS1_+0x78>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003180:	68fc      	ldr	r4, [r7, #12]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	685d      	ldr	r5, [r3, #4]
				     std::move(__v));
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff fdb1 	bl	8002cee <_ZSt4moveIRP5TokenEONSt16remove_referenceIT_E4typeEOS4_>
 800318c:	4603      	mov	r3, r0
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800318e:	461a      	mov	r2, r3
 8003190:	4629      	mov	r1, r5
 8003192:	4620      	mov	r0, r4
 8003194:	f000 f90b 	bl	80033ae <_ZNSt16allocator_traitsISaIP5TokenEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	1d1a      	adds	r2, r3, #4
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	e02a      	b.n	80031fa <_ZNSt6vectorIP5TokenSaIS1_EE14_M_insert_rvalEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEOS1_+0xce>
	  }
	else
	  _M_insert_aux(begin() + __n, std::move(__v));
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f7ff fddf 	bl	8002d68 <_ZNSt6vectorIP5TokenSaIS1_EE5beginEv>
 80031aa:	4603      	mov	r3, r0
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	f107 031c 	add.w	r3, r7, #28
 80031b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fde7 	bl	8002d88 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEplEi>
 80031ba:	4604      	mov	r4, r0
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff fd96 	bl	8002cee <_ZSt4moveIRP5TokenEONSt16remove_referenceIT_E4typeEOS4_>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	4621      	mov	r1, r4
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fa04 	bl	80035d6 <_ZNSt6vectorIP5TokenSaIS1_EE13_M_insert_auxIS1_EEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEOT_>
 80031ce:	e014      	b.n	80031fa <_ZNSt6vectorIP5TokenSaIS1_EE14_M_insert_rvalEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEOS1_+0xce>
      else
	_M_realloc_insert(begin() + __n, std::move(__v));
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7ff fdc9 	bl	8002d68 <_ZNSt6vectorIP5TokenSaIS1_EE5beginEv>
 80031d6:	4603      	mov	r3, r0
 80031d8:	623b      	str	r3, [r7, #32]
 80031da:	f107 0320 	add.w	r3, r7, #32
 80031de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fdd1 	bl	8002d88 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEplEi>
 80031e6:	4604      	mov	r4, r0
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff fd80 	bl	8002cee <_ZSt4moveIRP5TokenEONSt16remove_referenceIT_E4typeEOS4_>
 80031ee:	4603      	mov	r3, r0
 80031f0:	461a      	mov	r2, r3
 80031f2:	4621      	mov	r1, r4
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f8ed 	bl	80033d4 <_ZNSt6vectorIP5TokenSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>

      return iterator(this->_M_impl._M_start + __n);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
 8003206:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800320a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800320e:	4611      	mov	r1, r2
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff feff 	bl	8003014 <_ZN9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003218:	4618      	mov	r0, r3
 800321a:	3730      	adds	r7, #48	; 0x30
 800321c:	46bd      	mov	sp, r7
 800321e:	bdb0      	pop	{r4, r5, r7, pc}

08003220 <_ZNSt6vectorIP5TokenSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	1d1a      	adds	r2, r3, #4
 800322c:	f107 030c 	add.w	r3, r7, #12
 8003230:	4611      	mov	r1, r2
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff feee 	bl	8003014 <_ZN9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	425b      	negs	r3, r3
 8003256:	4413      	add	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	f107 020c 	add.w	r2, r7, #12
 800325e:	f107 0308 	add.w	r3, r7, #8
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fed5 	bl	8003014 <_ZN9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <_ZNSt6vectorIP5TokenSaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800328c:	b590      	push	{r4, r7, lr}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685c      	ldr	r4, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fe67 	bl	8002f70 <_ZNSt12_Vector_baseIP5TokenSaIS1_EE19_M_get_Tp_allocatorEv>
 80032a2:	4603      	mov	r3, r0
 80032a4:	461a      	mov	r2, r3
 80032a6:	4621      	mov	r1, r4
 80032a8:	6838      	ldr	r0, [r7, #0]
 80032aa:	f7ff fe6c 	bl	8002f86 <_ZSt8_DestroyIPP5TokenS1_EvT_S3_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	605a      	str	r2, [r3, #4]
      }
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd90      	pop	{r4, r7, pc}

080032bc <_ZNKSt6vectorIP5TokenSaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	f107 020c 	add.w	r2, r7, #12
 80032ce:	f107 0308 	add.w	r3, r7, #8
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 f909 	bl	80034ec <_ZN9__gnu_cxx17__normal_iteratorIPKP5TokenSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <_ZNKSt6vectorIP5TokenSaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	f107 020c 	add.w	r2, r7, #12
 80032f6:	f107 0308 	add.w	r3, r7, #8
 80032fa:	4611      	mov	r1, r2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 f8f5 	bl	80034ec <_ZN9__gnu_cxx17__normal_iteratorIPKP5TokenSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <_ZN9__gnu_cxxeqIPKP5TokenSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800330c:	b590      	push	{r4, r7, lr}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f8f8 	bl	800350c <_ZNK9__gnu_cxx17__normal_iteratorIPKP5TokenSt6vectorIS2_SaIS2_EEE4baseEv>
 800331c:	4603      	mov	r3, r0
 800331e:	681c      	ldr	r4, [r3, #0]
 8003320:	6838      	ldr	r0, [r7, #0]
 8003322:	f000 f8f3 	bl	800350c <_ZNK9__gnu_cxx17__normal_iteratorIPKP5TokenSt6vectorIS2_SaIS2_EEE4baseEv>
 8003326:	4603      	mov	r3, r0
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	429c      	cmp	r4, r3
 800332c:	bf0c      	ite	eq
 800332e:	2301      	moveq	r3, #1
 8003330:	2300      	movne	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bd90      	pop	{r4, r7, pc}

0800333c <_ZNSt16allocator_traitsISaIP5TokenEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8003346:	6839      	ldr	r1, [r7, #0]
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f97f 	bl	800364c <_ZN9__gnu_cxx13new_allocatorIP5TokenE7destroyIS2_EEvPT_>
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <_ZNSaIP5TokenED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f97f 	bl	8003662 <_ZN9__gnu_cxx13new_allocatorIP5TokenED1Ev>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <_ZNSt12_Vector_baseIP5TokenSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800336e:	b580      	push	{r7, lr}
 8003370:	b084      	sub	sp, #16
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
	if (__p)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <_ZNSt12_Vector_baseIP5TokenSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	4618      	mov	r0, r3
 8003388:	f000 f976 	bl	8003678 <_ZNSt16allocator_traitsISaIP5TokenEE10deallocateERS2_PS1_j>
      }
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <_ZSt8_DestroyIPP5TokenEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800339e:	6839      	ldr	r1, [r7, #0]
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f978 	bl	8003696 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5TokenEEvT_S5_>
    }
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <_ZNSt16allocator_traitsISaIP5TokenEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff fdf1 	bl	8002fa2 <_ZSt7forwardIP5TokenEOT_RNSt16remove_referenceIS2_E4typeE>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f970 	bl	80036ac <_ZN9__gnu_cxx13new_allocatorIP5TokenE9constructIS2_JS2_EEEvPT_DpOT0_>
 80033cc:	bf00      	nop
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <_ZNSt6vectorIP5TokenSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80033d4:	b5b0      	push	{r4, r5, r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 80033e0:	4a41      	ldr	r2, [pc, #260]	; (80034e8 <_ZNSt6vectorIP5TokenSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 80033e2:	2101      	movs	r1, #1
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f979 	bl	80036dc <_ZNKSt6vectorIP5TokenSaIS1_EE12_M_check_lenEjPKc>
 80033ea:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7ff fcbb 	bl	8002d68 <_ZNSt6vectorIP5TokenSaIS1_EE5beginEv>
 80033f2:	4603      	mov	r3, r0
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	f107 0214 	add.w	r2, r7, #20
 80033fa:	f107 0308 	add.w	r3, r7, #8
 80033fe:	4611      	mov	r1, r2
 8003400:	4618      	mov	r0, r3
 8003402:	f000 f8be 	bl	8003582 <_ZN9__gnu_cxxmiIPP5TokenSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8003406:	4603      	mov	r3, r0
 8003408:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f9ac 	bl	800376c <_ZNSt12_Vector_baseIP5TokenSaIS1_EE11_M_allocateEj>
 8003414:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800341a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	18d5      	adds	r5, r2, r3
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff fdbc 	bl	8002fa2 <_ZSt7forwardIP5TokenEOT_RNSt16remove_referenceIS2_E4typeE>
 800342a:	4603      	mov	r3, r0
 800342c:	461a      	mov	r2, r3
 800342e:	4629      	mov	r1, r5
 8003430:	4620      	mov	r0, r4
 8003432:	f7ff ffbc 	bl	80033ae <_ZNSt16allocator_traitsISaIP5TokenEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8003436:	2300      	movs	r3, #0
 8003438:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681c      	ldr	r4, [r3, #0]
 800343e:	f107 0308 	add.w	r3, r7, #8
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fdf6 	bl	8003034 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEE4baseEv>
 8003448:	4603      	mov	r3, r0
 800344a:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff fd8e 	bl	8002f70 <_ZNSt12_Vector_baseIP5TokenSaIS1_EE19_M_get_Tp_allocatorEv>
 8003454:	4603      	mov	r3, r0
	  __new_finish
 8003456:	69fa      	ldr	r2, [r7, #28]
 8003458:	4629      	mov	r1, r5
 800345a:	4620      	mov	r0, r4
 800345c:	f000 f99a 	bl	8003794 <_ZSt34__uninitialized_move_if_noexcept_aIPP5TokenS2_SaIS1_EET0_T_S5_S4_RT1_>
 8003460:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	3304      	adds	r3, #4
 8003466:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8003468:	f107 0308 	add.w	r3, r7, #8
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fde1 	bl	8003034 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEE4baseEv>
 8003472:	4603      	mov	r3, r0
 8003474:	681c      	ldr	r4, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fd77 	bl	8002f70 <_ZNSt12_Vector_baseIP5TokenSaIS1_EE19_M_get_Tp_allocatorEv>
 8003482:	4603      	mov	r3, r0
	  __new_finish
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4629      	mov	r1, r5
 8003488:	4620      	mov	r0, r4
 800348a:	f000 f983 	bl	8003794 <_ZSt34__uninitialized_move_if_noexcept_aIPP5TokenS2_SaIS1_EET0_T_S5_S4_RT1_>
 800348e:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681c      	ldr	r4, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fd68 	bl	8002f70 <_ZNSt12_Vector_baseIP5TokenSaIS1_EE19_M_get_Tp_allocatorEv>
 80034a0:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80034a2:	461a      	mov	r2, r3
 80034a4:	4629      	mov	r1, r5
 80034a6:	4620      	mov	r0, r4
 80034a8:	f7ff fd6d 	bl	8002f86 <_ZSt8_DestroyIPP5TokenS1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 80034b6:	461a      	mov	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 80034c0:	461a      	mov	r2, r3
 80034c2:	f7ff ff54 	bl	800336e <_ZNSt12_Vector_baseIP5TokenSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	441a      	add	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	609a      	str	r2, [r3, #8]
    }
 80034de:	bf00      	nop
 80034e0:	3728      	adds	r7, #40	; 0x28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bdb0      	pop	{r4, r5, r7, pc}
 80034e6:	bf00      	nop
 80034e8:	0800bb50 	.word	0x0800bb50

080034ec <_ZN9__gnu_cxx17__normal_iteratorIPKP5TokenSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <_ZNK9__gnu_cxx17__normal_iteratorIPKP5TokenSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <_ZN9__gnu_cxxneIPP5TokenSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003522:	b590      	push	{r4, r7, lr}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff fd81 	bl	8003034 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEE4baseEv>
 8003532:	4603      	mov	r3, r0
 8003534:	681c      	ldr	r4, [r3, #0]
 8003536:	6838      	ldr	r0, [r7, #0]
 8003538:	f7ff fd7c 	bl	8003034 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEE4baseEv>
 800353c:	4603      	mov	r3, r0
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	429c      	cmp	r4, r3
 8003542:	bf14      	ite	ne
 8003544:	2301      	movne	r3, #1
 8003546:	2300      	moveq	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	bd90      	pop	{r4, r7, pc}

08003552 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
 8003552:	b590      	push	{r4, r7, lr}
 8003554:	b085      	sub	sp, #20
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__copy_move_a2<true>(std::__miter_base(__first),
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 f931 	bl	80037c6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS3_SaIS3_EEEEET_S9_>
 8003564:	4604      	mov	r4, r0
 8003566:	68b8      	ldr	r0, [r7, #8]
 8003568:	f000 f92d 	bl	80037c6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS3_SaIS3_EEEEET_S9_>
 800356c:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4619      	mov	r1, r3
 8003572:	4620      	mov	r0, r4
 8003574:	f000 f932 	bl	80037dc <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 8003578:	4603      	mov	r3, r0
    }
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	bd90      	pop	{r4, r7, pc}

08003582 <_ZN9__gnu_cxxmiIPP5TokenSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003582:	b590      	push	{r4, r7, lr}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff fd51 	bl	8003034 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEE4baseEv>
 8003592:	4603      	mov	r3, r0
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461c      	mov	r4, r3
 8003598:	6838      	ldr	r0, [r7, #0]
 800359a:	f7ff fd4b 	bl	8003034 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEE4baseEv>
 800359e:	4603      	mov	r3, r0
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	1ae3      	subs	r3, r4, r3
 80035a4:	109b      	asrs	r3, r3, #2
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd90      	pop	{r4, r7, pc}

080035ae <_ZNKSt6vectorIP5TokenSaIS1_EE4cendEv>:
      cend() const noexcept
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	f107 020c 	add.w	r2, r7, #12
 80035c0:	f107 0308 	add.w	r3, r7, #8
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff ff90 	bl	80034ec <_ZN9__gnu_cxx17__normal_iteratorIPKP5TokenSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_ZNSt6vectorIP5TokenSaIS1_EE13_M_insert_auxIS1_EEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEOT_>:
      vector<_Tp, _Alloc>::
 80035d6:	b5b0      	push	{r4, r5, r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80035e2:	68fc      	ldr	r4, [r7, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685d      	ldr	r5, [r3, #4]
			       _GLIBCXX_MOVE(*(this->_M_impl._M_finish
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	3b04      	subs	r3, #4
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff fb7d 	bl	8002cee <_ZSt4moveIRP5TokenEONSt16remove_referenceIT_E4typeEOS4_>
 80035f4:	4603      	mov	r3, r0
      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80035f6:	461a      	mov	r2, r3
 80035f8:	4629      	mov	r1, r5
 80035fa:	4620      	mov	r0, r4
 80035fc:	f7ff fed7 	bl	80033ae <_ZNSt16allocator_traitsISaIP5TokenEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      ++this->_M_impl._M_finish;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	1d1a      	adds	r2, r3, #4
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	605a      	str	r2, [r3, #4]
      _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 800360a:	f107 0308 	add.w	r3, r7, #8
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fd10 	bl	8003034 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEE4baseEv>
 8003614:	4603      	mov	r3, r0
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f1a3 0108 	sub.w	r1, r3, #8
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	3b04      	subs	r3, #4
 8003626:	461a      	mov	r2, r3
 8003628:	f000 f8fe 	bl	8003828 <_ZSt13move_backwardIPP5TokenS2_ET0_T_S4_S3_>
      *__position = std::forward<_Arg>(__arg);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff fcb8 	bl	8002fa2 <_ZSt7forwardIP5TokenEOT_RNSt16remove_referenceIS2_E4typeE>
 8003632:	4604      	mov	r4, r0
 8003634:	f107 0308 	add.w	r3, r7, #8
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff fe1b 	bl	8003274 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEdeEv>
 800363e:	4602      	mov	r2, r0
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	6013      	str	r3, [r2, #0]
    }
 8003644:	bf00      	nop
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bdb0      	pop	{r4, r5, r7, pc}

0800364c <_ZN9__gnu_cxx13new_allocatorIP5TokenE7destroyIS2_EEvPT_>:
	construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <_ZN9__gnu_cxx13new_allocatorIP5TokenED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <_ZNSt16allocator_traitsISaIP5TokenEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f8e5 	bl	8003858 <_ZN9__gnu_cxx13new_allocatorIP5TokenE10deallocateEPS2_j>
 800368e:	bf00      	nop
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5TokenEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <_ZN9__gnu_cxx13new_allocatorIP5TokenE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fc72 	bl	8002fa2 <_ZSt7forwardIP5TokenEOT_RNSt16remove_referenceIS2_E4typeE>
 80036be:	4603      	mov	r3, r0
 80036c0:	681c      	ldr	r4, [r3, #0]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	4619      	mov	r1, r3
 80036c6:	2004      	movs	r0, #4
 80036c8:	f7fe fd2e 	bl	8002128 <_ZnwjPv>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d000      	beq.n	80036d4 <_ZN9__gnu_cxx13new_allocatorIP5TokenE9constructIS2_JS2_EEEvPT_DpOT0_+0x28>
 80036d2:	601c      	str	r4, [r3, #0]
 80036d4:	bf00      	nop
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd90      	pop	{r4, r7, pc}

080036dc <_ZNKSt6vectorIP5TokenSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 f8c2 	bl	8003872 <_ZNKSt6vectorIP5TokenSaIS1_EE8max_sizeEv>
 80036ee:	4604      	mov	r4, r0
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f7ff fb18 	bl	8002d26 <_ZNKSt6vectorIP5TokenSaIS1_EE4sizeEv>
 80036f6:	4603      	mov	r3, r0
 80036f8:	1ae2      	subs	r2, r4, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	bf34      	ite	cc
 8003700:	2301      	movcc	r3, #1
 8003702:	2300      	movcs	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <_ZNKSt6vectorIP5TokenSaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4618      	mov	r0, r3
 800370e:	f006 fe9e 	bl	800a44e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f7ff fb07 	bl	8002d26 <_ZNKSt6vectorIP5TokenSaIS1_EE4sizeEv>
 8003718:	4604      	mov	r4, r0
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7ff fb03 	bl	8002d26 <_ZNKSt6vectorIP5TokenSaIS1_EE4sizeEv>
 8003720:	4603      	mov	r3, r0
 8003722:	613b      	str	r3, [r7, #16]
 8003724:	f107 0208 	add.w	r2, r7, #8
 8003728:	f107 0310 	add.w	r3, r7, #16
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f8b0 	bl	8003894 <_ZSt3maxIjERKT_S2_S2_>
 8003734:	4603      	mov	r3, r0
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4423      	add	r3, r4
 800373a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff faf2 	bl	8002d26 <_ZNKSt6vectorIP5TokenSaIS1_EE4sizeEv>
 8003742:	4602      	mov	r2, r0
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	4293      	cmp	r3, r2
 8003748:	d306      	bcc.n	8003758 <_ZNKSt6vectorIP5TokenSaIS1_EE12_M_check_lenEjPKc+0x7c>
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f891 	bl	8003872 <_ZNKSt6vectorIP5TokenSaIS1_EE8max_sizeEv>
 8003750:	4602      	mov	r2, r0
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	4293      	cmp	r3, r2
 8003756:	d904      	bls.n	8003762 <_ZNKSt6vectorIP5TokenSaIS1_EE12_M_check_lenEjPKc+0x86>
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 f88a 	bl	8003872 <_ZNKSt6vectorIP5TokenSaIS1_EE8max_sizeEv>
 800375e:	4603      	mov	r3, r0
 8003760:	e000      	b.n	8003764 <_ZNKSt6vectorIP5TokenSaIS1_EE12_M_check_lenEjPKc+0x88>
 8003762:	697b      	ldr	r3, [r7, #20]
      }
 8003764:	4618      	mov	r0, r3
 8003766:	371c      	adds	r7, #28
 8003768:	46bd      	mov	sp, r7
 800376a:	bd90      	pop	{r4, r7, pc}

0800376c <_ZNSt12_Vector_baseIP5TokenSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d006      	beq.n	800378a <_ZNSt12_Vector_baseIP5TokenSaIS1_EE11_M_allocateEj+0x1e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6839      	ldr	r1, [r7, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f000 f89b 	bl	80038bc <_ZNSt16allocator_traitsISaIP5TokenEE8allocateERS2_j>
 8003786:	4603      	mov	r3, r0
 8003788:	e000      	b.n	800378c <_ZNSt12_Vector_baseIP5TokenSaIS1_EE11_M_allocateEj+0x20>
 800378a:	2300      	movs	r3, #0
      }
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <_ZSt34__uninitialized_move_if_noexcept_aIPP5TokenS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f899 	bl	80038da <_ZSt32__make_move_if_noexcept_iteratorIP5TokenSt13move_iteratorIPS1_EET0_PT_>
 80037a8:	4604      	mov	r4, r0
 80037aa:	68b8      	ldr	r0, [r7, #8]
 80037ac:	f000 f895 	bl	80038da <_ZSt32__make_move_if_noexcept_iteratorIP5TokenSt13move_iteratorIPS1_EET0_PT_>
 80037b0:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4620      	mov	r0, r4
 80037b8:	f000 f89e 	bl	80038f8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP5TokenES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80037bc:	4603      	mov	r3, r0
    }
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd90      	pop	{r4, r7, pc}

080037c6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS3_SaIS3_EEEEET_S9_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4618      	mov	r0, r3
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80037dc:	b5b0      	push	{r4, r5, r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f896 	bl	800391a <_ZSt12__niter_baseIPP5TokenSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 80037ee:	4604      	mov	r4, r0
 80037f0:	68b8      	ldr	r0, [r7, #8]
 80037f2:	f000 f892 	bl	800391a <_ZSt12__niter_baseIPP5TokenSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 80037f6:	4605      	mov	r5, r0
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f88e 	bl	800391a <_ZSt12__niter_baseIPP5TokenSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 80037fe:	4603      	mov	r3, r0
 8003800:	461a      	mov	r2, r3
 8003802:	4629      	mov	r1, r5
 8003804:	4620      	mov	r0, r4
 8003806:	f000 f896 	bl	8003936 <_ZSt13__copy_move_aILb1EPP5TokenS2_ET1_T0_S4_S3_>
 800380a:	4603      	mov	r3, r0
 800380c:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 800380e:	f107 0214 	add.w	r2, r7, #20
 8003812:	f107 0310 	add.w	r3, r7, #16
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff fbfb 	bl	8003014 <_ZN9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800381e:	693b      	ldr	r3, [r7, #16]
    }
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bdb0      	pop	{r4, r5, r7, pc}

08003828 <_ZSt13move_backwardIPP5TokenS2_ET0_T_S4_S3_>:
   *  Result may not be in the range (first,last].  Use move instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8003828:	b590      	push	{r4, r7, lr}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_ConvertibleConcept<
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f890 	bl	800395a <_ZSt12__miter_baseIPP5TokenET_S3_>
 800383a:	4604      	mov	r4, r0
 800383c:	68b8      	ldr	r0, [r7, #8]
 800383e:	f000 f88c 	bl	800395a <_ZSt12__miter_baseIPP5TokenET_S3_>
 8003842:	4603      	mov	r3, r0
						std::__miter_base(__last),
						__result);
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	4619      	mov	r1, r3
 8003848:	4620      	mov	r0, r4
 800384a:	f000 f891 	bl	8003970 <_ZSt23__copy_move_backward_a2ILb1EPP5TokenS2_ET1_T0_S4_S3_>
 800384e:	4603      	mov	r3, r0
    }
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	bd90      	pop	{r4, r7, pc}

08003858 <_ZN9__gnu_cxx13new_allocatorIP5TokenE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003864:	68b8      	ldr	r0, [r7, #8]
 8003866:	f006 fdd7 	bl	800a418 <_ZdlPv>
      }
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <_ZNKSt6vectorIP5TokenSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4618      	mov	r0, r3
 800387e:	f000 f89f 	bl	80039c0 <_ZNKSt12_Vector_baseIP5TokenSaIS1_EE19_M_get_Tp_allocatorEv>
 8003882:	4603      	mov	r3, r0
 8003884:	4618      	mov	r0, r3
 8003886:	f000 f88f 	bl	80039a8 <_ZNSt16allocator_traitsISaIP5TokenEE8max_sizeERKS2_>
 800388a:	4603      	mov	r3, r0
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d201      	bcs.n	80038ae <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	e000      	b.n	80038b0 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80038ae:	687b      	ldr	r3, [r7, #4]
    }
 80038b0:	4618      	mov	r0, r3
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <_ZNSt16allocator_traitsISaIP5TokenEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80038c6:	2200      	movs	r2, #0
 80038c8:	6839      	ldr	r1, [r7, #0]
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f883 	bl	80039d6 <_ZN9__gnu_cxx13new_allocatorIP5TokenE8allocateEjPKv>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <_ZSt32__make_move_if_noexcept_iteratorIP5TokenSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80038e2:	f107 030c 	add.w	r3, r7, #12
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 f892 	bl	8003a12 <_ZNSt13move_iteratorIPP5TokenEC1ES2_>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP5TokenES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f890 	bl	8003a30 <_ZSt18uninitialized_copyISt13move_iteratorIPP5TokenES3_ET0_T_S6_S5_>
 8003910:	4603      	mov	r3, r0
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <_ZSt12__niter_baseIPP5TokenSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8003922:	1d3b      	adds	r3, r7, #4
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fb85 	bl	8003034 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TokenSt6vectorIS2_SaIS2_EEE4baseEv>
 800392a:	4603      	mov	r3, r0
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <_ZSt13__copy_move_aILb1EPP5TokenS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003936:	b580      	push	{r7, lr}
 8003938:	b086      	sub	sp, #24
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8003942:	2301      	movs	r3, #1
 8003944:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f882 	bl	8003a54 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP5TokenEEPT_PKS5_S8_S6_>
 8003950:	4603      	mov	r3, r0
    }
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <_ZSt12__miter_baseIPP5TokenET_S3_>:
    __miter_base(_Iterator __it)
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <_ZSt23__copy_move_backward_a2ILb1EPP5TokenS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8003970:	b5b0      	push	{r4, r5, r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f886 	bl	8003a8e <_ZSt12__niter_baseIPP5TokenET_S3_>
 8003982:	4604      	mov	r4, r0
 8003984:	68b8      	ldr	r0, [r7, #8]
 8003986:	f000 f882 	bl	8003a8e <_ZSt12__niter_baseIPP5TokenET_S3_>
 800398a:	4605      	mov	r5, r0
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f87e 	bl	8003a8e <_ZSt12__niter_baseIPP5TokenET_S3_>
 8003992:	4603      	mov	r3, r0
		   std::__niter_base(__result)));
 8003994:	461a      	mov	r2, r3
 8003996:	4629      	mov	r1, r5
 8003998:	4620      	mov	r0, r4
 800399a:	f000 f883 	bl	8003aa4 <_ZSt22__copy_move_backward_aILb1EPP5TokenS2_ET1_T0_S4_S3_>
 800399e:	4603      	mov	r3, r0
    }
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bdb0      	pop	{r4, r5, r7, pc}

080039a8 <_ZNSt16allocator_traitsISaIP5TokenEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f889 	bl	8003ac8 <_ZNK9__gnu_cxx13new_allocatorIP5TokenE8max_sizeEv>
 80039b6:	4603      	mov	r3, r0
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <_ZNKSt12_Vector_baseIP5TokenSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <_ZN9__gnu_cxx13new_allocatorIP5TokenE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f870 	bl	8003ac8 <_ZNK9__gnu_cxx13new_allocatorIP5TokenE8max_sizeEv>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	4293      	cmp	r3, r2
 80039ee:	bf8c      	ite	hi
 80039f0:	2301      	movhi	r3, #1
 80039f2:	2300      	movls	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <_ZN9__gnu_cxx13new_allocatorIP5TokenE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80039fa:	f006 fd22 	bl	800a442 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f006 fcdf 	bl	800a3c6 <_Znwj>
 8003a08:	4603      	mov	r3, r0
      }
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <_ZNSt13move_iteratorIPP5TokenEC1ES2_>:
      move_iterator(iterator_type __i)
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4618      	mov	r0, r3
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <_ZSt18uninitialized_copyISt13move_iteratorIPP5TokenES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f84b 	bl	8003ae0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP5TokenES5_EET0_T_S8_S7_>
 8003a4a:	4603      	mov	r3, r0
    }
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP5TokenEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	109b      	asrs	r3, r3, #2
 8003a68:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d006      	beq.n	8003a7e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP5TokenEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	461a      	mov	r2, r3
 8003a76:	68f9      	ldr	r1, [r7, #12]
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f006 ff68 	bl	800a94e <memmove>
	  return __result + _Num;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4413      	add	r3, r2
	}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <_ZSt12__niter_baseIPP5TokenET_S3_>:
    __niter_base(_Iterator __it)
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <_ZSt22__copy_move_backward_aILb1EPP5TokenS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueType1)
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	75fb      	strb	r3, [r7, #23]
								 __result);
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f821 	bl	8003b00 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIP5TokenEEPT_PKS5_S8_S6_>
 8003abe:	4603      	mov	r3, r0
    }
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <_ZNK9__gnu_cxx13new_allocatorIP5TokenE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8003ad0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP5TokenES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f827 	bl	8003b44 <_ZSt4copyISt13move_iteratorIPP5TokenES3_ET0_T_S6_S5_>
 8003af6:	4603      	mov	r3, r0
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIP5TokenEEPT_PKS5_S8_S6_>:
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	109b      	asrs	r3, r3, #2
 8003b14:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIP5TokenEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	425b      	negs	r3, r3
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	18d0      	adds	r0, r2, r3
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68f9      	ldr	r1, [r7, #12]
 8003b2e:	f006 ff0e 	bl	800a94e <memmove>
	  return __result - _Num;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	425b      	negs	r3, r3
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	4413      	add	r3, r2
	}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <_ZSt4copyISt13move_iteratorIPP5TokenES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8003b44:	b590      	push	{r4, r7, lr}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f80f 	bl	8003b74 <_ZSt12__miter_baseIPP5TokenEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8003b56:	4604      	mov	r4, r0
 8003b58:	68b8      	ldr	r0, [r7, #8]
 8003b5a:	f000 f80b 	bl	8003b74 <_ZSt12__miter_baseIPP5TokenEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8003b5e:	4603      	mov	r3, r0
	       __result));
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	4619      	mov	r1, r3
 8003b64:	4620      	mov	r0, r4
 8003b66:	f000 f816 	bl	8003b96 <_ZSt14__copy_move_a2ILb1EPP5TokenS2_ET1_T0_S4_S3_>
 8003b6a:	4603      	mov	r3, r0
    }
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd90      	pop	{r4, r7, pc}

08003b74 <_ZSt12__miter_baseIPP5TokenEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8003b7c:	1d3b      	adds	r3, r7, #4
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 f825 	bl	8003bce <_ZNKSt13move_iteratorIPP5TokenE4baseEv>
 8003b84:	4603      	mov	r3, r0
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff fee7 	bl	800395a <_ZSt12__miter_baseIPP5TokenET_S3_>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <_ZSt14__copy_move_a2ILb1EPP5TokenS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003b96:	b5b0      	push	{r4, r5, r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f7ff ff73 	bl	8003a8e <_ZSt12__niter_baseIPP5TokenET_S3_>
 8003ba8:	4604      	mov	r4, r0
 8003baa:	68b8      	ldr	r0, [r7, #8]
 8003bac:	f7ff ff6f 	bl	8003a8e <_ZSt12__niter_baseIPP5TokenET_S3_>
 8003bb0:	4605      	mov	r5, r0
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff ff6b 	bl	8003a8e <_ZSt12__niter_baseIPP5TokenET_S3_>
 8003bb8:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4629      	mov	r1, r5
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	f7ff feb9 	bl	8003936 <_ZSt13__copy_move_aILb1EPP5TokenS2_ET1_T0_S4_S3_>
 8003bc4:	4603      	mov	r3, r0
    }
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bdb0      	pop	{r4, r5, r7, pc}

08003bce <_ZNKSt13move_iteratorIPP5TokenE4baseEv>:
      base() const
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <_ZN6NumberD1Ev>:
class Number : public Literal {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	4a05      	ldr	r2, [pc, #20]	; (8003c08 <_ZN6NumberD1Ev+0x20>)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fe fbc3 	bl	8002384 <_ZN7LiteralD1Ev>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	0800d020 	.word	0x0800d020

08003c0c <_ZN6NumberD0Ev>:
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff ffe7 	bl	8003be8 <_ZN6NumberD1Ev>
 8003c1a:	2108      	movs	r1, #8
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f006 fbd0 	bl	800a3c2 <_ZdlPvj>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <_ZN3DivD1Ev>:
class Div : public Operator {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <_ZN3DivD1Ev+0x20>)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe faaf 	bl	80021a0 <_ZN8OperatorD1Ev>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	0800d050 	.word	0x0800d050

08003c50 <_ZN3DivD0Ev>:
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff ffe7 	bl	8003c2c <_ZN3DivD1Ev>
 8003c5e:	210c      	movs	r1, #12
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f006 fbae 	bl	800a3c2 <_ZdlPvj>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <_ZN4MultD1Ev>:
class Mult : public Operator {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	4a05      	ldr	r2, [pc, #20]	; (8003c90 <_ZN4MultD1Ev+0x20>)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fe fa8d 	bl	80021a0 <_ZN8OperatorD1Ev>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	0800d068 	.word	0x0800d068

08003c94 <_ZN4MultD0Ev>:
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ffe7 	bl	8003c70 <_ZN4MultD1Ev>
 8003ca2:	210c      	movs	r1, #12
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f006 fb8c 	bl	800a3c2 <_ZdlPvj>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <_ZN3SubD1Ev>:
class Sub : public Operator {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <_ZN3SubD1Ev+0x20>)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fe fa6b 	bl	80021a0 <_ZN8OperatorD1Ev>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	0800d080 	.word	0x0800d080

08003cd8 <_ZN3SubD0Ev>:
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff ffe7 	bl	8003cb4 <_ZN3SubD1Ev>
 8003ce6:	210c      	movs	r1, #12
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f006 fb6a 	bl	800a3c2 <_ZdlPvj>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <_ZN3AddD1Ev>:
class Add : public Operator {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	4a05      	ldr	r2, [pc, #20]	; (8003d18 <_ZN3AddD1Ev+0x20>)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fe fa49 	bl	80021a0 <_ZN8OperatorD1Ev>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	0800d098 	.word	0x0800d098

08003d1c <_ZN3AddD0Ev>:
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff ffe7 	bl	8003cf8 <_ZN3AddD1Ev>
 8003d2a:	210c      	movs	r1, #12
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f006 fb48 	bl	800a3c2 <_ZdlPvj>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <_ZN6Number19add_least_sig_digitEi>:
 *      Author: sok
 */

#include "Number.h"

void Number::add_least_sig_digit(int new_digit) {
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
	m_value = m_value * 10 + new_digit;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	461a      	mov	r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	441a      	add	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	605a      	str	r2, [r3, #4]
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <_ZN4Roll8get_typeEv>:
	TokenType get_type() override { return TOKEN_ROLL; };
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	2302      	movs	r3, #2
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <_ZN4Roll5valueEv>:

#include "Roll.h"

#include "Prng.h"

int Roll::value() {
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b086      	sub	sp, #24
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
	int result = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
	Prng& prng = Prng::get_instance();
 8003d8a:	f001 fafd 	bl	8005388 <_ZN4Prng12get_instanceEv>
 8003d8e:	60f8      	str	r0, [r7, #12]
	for (int i=0; i<this->m_rolls; i++) {
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	da0e      	bge.n	8003dbc <_ZN4Roll5valueEv+0x3e>
		result += prng.rand_int(1, this->m_sides);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	461a      	mov	r2, r3
 8003da4:	2101      	movs	r1, #1
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f001 fb69 	bl	800547e <_ZN4Prng8rand_intEii>
 8003dac:	4602      	mov	r2, r0
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	4413      	add	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]
	for (int i=0; i<this->m_rolls; i++) {
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	3301      	adds	r3, #1
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	e7eb      	b.n	8003d94 <_ZN4Roll5valueEv+0x16>
	}
	return result;
 8003dbc:	697b      	ldr	r3, [r7, #20]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <_ZN4RollD1Ev>:
class Roll : public Literal {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	4a05      	ldr	r2, [pc, #20]	; (8003de8 <_ZN4RollD1Ev+0x20>)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe fad3 	bl	8002384 <_ZN7LiteralD1Ev>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	0800d0dc 	.word	0x0800d0dc

08003dec <_ZN4RollD0Ev>:
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ffe7 	bl	8003dc8 <_ZN4RollD1Ev>
 8003dfa:	210c      	movs	r1, #12
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f006 fae0 	bl	800a3c2 <_ZdlPvj>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <_ZN3KeyC1Ev>:
class Key {
	Gpio m_pin;
	KeyType m_type;

public:
	Key() {};
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fc fe1e 	bl	8000a58 <_ZN4GpioC1Ev>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <_ZN3Key8get_typeEv>:
	Key(KeyType type, GPIO_TypeDef* port, uint16_t pin);
	void open();
	KeyType get_type() { return this->m_type; };
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7b1b      	ldrb	r3, [r3, #12]
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <_ZN3KeyC1E7KeyTypeP12GPIO_TypeDeft>:
		KEY_D100,
		KEY_D,
		KEY_BACKSPACE,
};

Key::Key(KeyType type, GPIO_TypeDef* port, uint16_t pin) {
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b088      	sub	sp, #32
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	72fb      	strb	r3, [r7, #11]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	813b      	strh	r3, [r7, #8]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fc fdff 	bl	8000a58 <_ZN4GpioC1Ev>
	this->m_pin = Gpio(port, pin);
 8003e5a:	893a      	ldrh	r2, [r7, #8]
 8003e5c:	f107 0314 	add.w	r3, r7, #20
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fc fe0e 	bl	8000a84 <_ZN4GpioC1EP12GPIO_TypeDeft>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f107 0314 	add.w	r3, r7, #20
 8003e70:	cb03      	ldmia	r3!, {r0, r1}
 8003e72:	6010      	str	r0, [r2, #0]
 8003e74:	6051      	str	r1, [r2, #4]
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	8113      	strh	r3, [r2, #8]
	this->m_type = type;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	7afa      	ldrb	r2, [r7, #11]
 8003e7e:	731a      	strb	r2, [r3, #12]
}
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4618      	mov	r0, r3
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <_ZN3Key4openEv>:

void Key::open() {
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
	this->m_pin.enable(GPIO_INPUT);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2100      	movs	r1, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fc fcf6 	bl	8000888 <_ZN4Gpio6enableE8GpioMode>
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <_ZN3Key7pressedEv>:

bool Key::pressed() {
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
	uint8_t state = this->m_pin.get_state();
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fc fd43 	bl	800093a <_ZN4Gpio9get_stateEv>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	73fb      	strb	r3, [r7, #15]
	if (state == 0) {
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <_ZN3Key7pressedEv+0x1e>
		return 1;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <_ZN3Key7pressedEv+0x20>
	} else {
		return 0;
 8003ec2:	2300      	movs	r3, #0
	}
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <_ZN8KeyboardC1Ev>:

Keyboard::Keyboard() {
 8003ecc:	b5b0      	push	{r4, r5, r7, lr}
 8003ece:	b088      	sub	sp, #32
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3320      	adds	r3, #32
 8003ed8:	241d      	movs	r4, #29
 8003eda:	461d      	mov	r5, r3
 8003edc:	2c00      	cmp	r4, #0
 8003ede:	db05      	blt.n	8003eec <_ZN8KeyboardC1Ev+0x20>
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	f7ff ff93 	bl	8003e0c <_ZN3KeyC1Ev>
 8003ee6:	3510      	adds	r5, #16
 8003ee8:	3c01      	subs	r4, #1
 8003eea:	e7f7      	b.n	8003edc <_ZN8KeyboardC1Ev+0x10>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 f93c 	bl	8004170 <_ZNSt6vectorI8KeyEventSaIS0_EEC1Ev>
	for (uint8_t i=0; i<NUM_KEYS; i++) {
 8003ef8:	2300      	movs	r3, #0
 8003efa:	77fb      	strb	r3, [r7, #31]
 8003efc:	7ffb      	ldrb	r3, [r7, #31]
 8003efe:	2b1d      	cmp	r3, #29
 8003f00:	d825      	bhi.n	8003f4e <_ZN8KeyboardC1Ev+0x82>
		this->m_keys[i] = Key(
 8003f02:	7ffb      	ldrb	r3, [r7, #31]
 8003f04:	4a18      	ldr	r2, [pc, #96]	; (8003f68 <_ZN8KeyboardC1Ev+0x9c>)
 8003f06:	5cd1      	ldrb	r1, [r2, r3]
 8003f08:	7ffb      	ldrb	r3, [r7, #31]
 8003f0a:	4a18      	ldr	r2, [pc, #96]	; (8003f6c <_ZN8KeyboardC1Ev+0xa0>)
 8003f0c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003f10:	7ffb      	ldrb	r3, [r7, #31]
 8003f12:	4a17      	ldr	r2, [pc, #92]	; (8003f70 <_ZN8KeyboardC1Ev+0xa4>)
 8003f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f18:	f107 000c 	add.w	r0, r7, #12
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	f7ff ff8e 	bl	8003e3e <_ZN3KeyC1E7KeyTypeP12GPIO_TypeDeft>
 8003f22:	7ffb      	ldrb	r3, [r7, #31]
 8003f24:	3302      	adds	r3, #2
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	461c      	mov	r4, r3
 8003f2e:	f107 030c 	add.w	r3, r7, #12
 8003f32:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f34:	6020      	str	r0, [r4, #0]
 8003f36:	6061      	str	r1, [r4, #4]
 8003f38:	60a2      	str	r2, [r4, #8]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	7323      	strb	r3, [r4, #12]
				Keyboard::KEY_TYPE[i],
				Keyboard::KEY_PORTS[i],
				Keyboard::KEY_PINS[i]
		);
		last_key_state[i] = false;
 8003f3e:	7ffb      	ldrb	r3, [r7, #31]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	2100      	movs	r1, #0
 8003f44:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<NUM_KEYS; i++) {
 8003f46:	7ffb      	ldrb	r3, [r7, #31]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	77fb      	strb	r3, [r7, #31]
 8003f4c:	e7d6      	b.n	8003efc <_ZN8KeyboardC1Ev+0x30>
	}
	this->m_tim = {0};
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f54:	2240      	movs	r2, #64	; 0x40
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f006 fd11 	bl	800a980 <memset>
}
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4618      	mov	r0, r3
 8003f62:	3720      	adds	r7, #32
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bdb0      	pop	{r4, r5, r7, pc}
 8003f68:	200000c4 	.word	0x200000c4
 8003f6c:	2000004c 	.word	0x2000004c
 8003f70:	20000010 	.word	0x20000010

08003f74 <_ZN8Keyboard4openEv>:

void Keyboard::open() {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i<NUM_KEYS; i++) {
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	73fb      	strb	r3, [r7, #15]
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	2b1d      	cmp	r3, #29
 8003f84:	d80b      	bhi.n	8003f9e <_ZN8Keyboard4openEv+0x2a>
		this->m_keys[i].open();
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	3302      	adds	r3, #2
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4413      	add	r3, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff ff7a 	bl	8003e8a <_ZN3Key4openEv>
	for (uint8_t i=0; i<NUM_KEYS; i++) {
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
 8003f9c:	e7f0      	b.n	8003f80 <_ZN8Keyboard4openEv+0xc>
	}

	this->m_tim.Instance = TIM4;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a16      	ldr	r2, [pc, #88]	; (8003ffc <_ZN8Keyboard4openEv+0x88>)
 8003fa2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	this->m_tim.Init.Period = 10000;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f242 7210 	movw	r2, #10000	; 0x2710
 8003fac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	this->m_tim.Init.Prescaler = 100;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2264      	movs	r2, #100	; 0x64
 8003fb4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	this->m_tim.Init.ClockDivision = 0; //TIM_CLOCKDIVISION_DIV4;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	this->m_tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208

	HAL_TIM_Base_Init(&this->m_tim);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f005 fb72 	bl	80096b8 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&this->m_tim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f005 fbe6 	bl	80097ac <HAL_TIM_Base_Start_IT>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003fe0:	201e      	movs	r0, #30
 8003fe2:	f004 fa24 	bl	800842e <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start(&this->m_tim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003fec:	4618      	mov	r0, r3
 8003fee:	f005 fb8e 	bl	800970e <HAL_TIM_Base_Start>
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40000800 	.word	0x40000800

08004000 <_ZN8Keyboard17check_for_changesEv>:

void Keyboard::check_for_changes() {
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
	KeyEvent event;
	bool cur_state = false;
 8004008:	2300      	movs	r3, #0
 800400a:	73bb      	strb	r3, [r7, #14]
	bool last_state = false;
 800400c:	2300      	movs	r3, #0
 800400e:	737b      	strb	r3, [r7, #13]

	HAL_TIM_IRQHandler(&this->m_tim);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004016:	4618      	mov	r0, r3
 8004018:	f005 fc17 	bl	800984a <HAL_TIM_IRQHandler>

	for (uint8_t i=0; i<NUM_KEYS; i++) {
 800401c:	2300      	movs	r3, #0
 800401e:	73fb      	strb	r3, [r7, #15]
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	2b1d      	cmp	r3, #29
 8004024:	d834      	bhi.n	8004090 <_ZN8Keyboard17check_for_changesEv+0x90>
		cur_state = this->m_keys[i].pressed();
 8004026:	7bfb      	ldrb	r3, [r7, #15]
 8004028:	3302      	adds	r3, #2
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	4413      	add	r3, r2
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff ff37 	bl	8003ea4 <_ZN3Key7pressedEv>
 8004036:	4603      	mov	r3, r0
 8004038:	73bb      	strb	r3, [r7, #14]
		last_state = this->last_key_state[i];
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	5cd3      	ldrb	r3, [r2, r3]
 8004040:	737b      	strb	r3, [r7, #13]

		if (cur_state != last_state) {
 8004042:	7bba      	ldrb	r2, [r7, #14]
 8004044:	7b7b      	ldrb	r3, [r7, #13]
 8004046:	429a      	cmp	r2, r3
 8004048:	d01e      	beq.n	8004088 <_ZN8Keyboard17check_for_changesEv+0x88>
			event.key = this->m_keys[i].get_type();
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	3302      	adds	r3, #2
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	4413      	add	r3, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fee6 	bl	8003e26 <_ZN3Key8get_typeEv>
 800405a:	4603      	mov	r3, r0
 800405c:	727b      	strb	r3, [r7, #9]
			if (cur_state) {
 800405e:	7bbb      	ldrb	r3, [r7, #14]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <_ZN8Keyboard17check_for_changesEv+0x6a>
				event.state = KEYSTATE_DOWN;
 8004064:	2300      	movs	r3, #0
 8004066:	723b      	strb	r3, [r7, #8]
 8004068:	e001      	b.n	800406e <_ZN8Keyboard17check_for_changesEv+0x6e>
			} else {
				event.state = KEYSTATE_UP;
 800406a:	2301      	movs	r3, #1
 800406c:	723b      	strb	r3, [r7, #8]
			}
			this->m_events.push_back(event);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004074:	f107 0208 	add.w	r2, r7, #8
 8004078:	4611      	mov	r1, r2
 800407a:	4618      	mov	r0, r3
 800407c:	f000 f885 	bl	800418a <_ZNSt6vectorI8KeyEventSaIS0_EE9push_backERKS0_>
			this->last_key_state[i] = cur_state;
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	7bb9      	ldrb	r1, [r7, #14]
 8004086:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<NUM_KEYS; i++) {
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	3301      	adds	r3, #1
 800408c:	73fb      	strb	r3, [r7, #15]
 800408e:	e7c7      	b.n	8004020 <_ZN8Keyboard17check_for_changesEv+0x20>
		}
	}
}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <_ZN8Keyboard9get_eventEP8KeyEvent>:

bool Keyboard::get_event(KeyEvent* event) {
 8004098:	b590      	push	{r4, r7, lr}
 800409a:	b089      	sub	sp, #36	; 0x24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
	if (this->m_events.size() > 0) {
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 f850 	bl	800414e <_ZNKSt6vectorI8KeyEventSaIS0_EE4sizeEv>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bf14      	ite	ne
 80040b4:	2301      	movne	r3, #1
 80040b6:	2300      	moveq	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d042      	beq.n	8004144 <_ZN8Keyboard9get_eventEP8KeyEvent+0xac>
		KeyEvent evt = this->m_events.front();
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 f885 	bl	80041d4 <_ZNSt6vectorI8KeyEventSaIS0_EE5frontEv>
 80040ca:	4602      	mov	r2, r0
 80040cc:	f107 0308 	add.w	r3, r7, #8
 80040d0:	8812      	ldrh	r2, [r2, #0]
 80040d2:	801a      	strh	r2, [r3, #0]
		event->key = evt.key;
 80040d4:	7a7a      	ldrb	r2, [r7, #9]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	705a      	strb	r2, [r3, #1]
		event->state = evt.state;
 80040da:	7a3a      	ldrb	r2, [r7, #8]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	701a      	strb	r2, [r3, #0]
		this->m_events.erase(
				this->m_events.begin(),
				this->m_events.begin()+1);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f503 7410 	add.w	r4, r3, #576	; 0x240
				this->m_events.begin(),
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 f884 	bl	80041fa <_ZNSt6vectorI8KeyEventSaIS0_EE5beginEv>
 80040f2:	4603      	mov	r3, r0
 80040f4:	613b      	str	r3, [r7, #16]
				this->m_events.begin()+1);
 80040f6:	f107 0210 	add.w	r2, r7, #16
 80040fa:	f107 030c 	add.w	r3, r7, #12
 80040fe:	4611      	mov	r1, r2
 8004100:	4618      	mov	r0, r3
 8004102:	f000 f8a2 	bl	800424a <_ZN9__gnu_cxx17__normal_iteratorIPK8KeyEventSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800410c:	4618      	mov	r0, r3
 800410e:	f000 f874 	bl	80041fa <_ZNSt6vectorI8KeyEventSaIS0_EE5beginEv>
 8004112:	4603      	mov	r3, r0
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	f107 031c 	add.w	r3, r7, #28
 800411a:	2101      	movs	r1, #1
 800411c:	4618      	mov	r0, r3
 800411e:	f000 f87c 	bl	800421a <_ZNK9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEEplEi>
 8004122:	4603      	mov	r3, r0
 8004124:	61bb      	str	r3, [r7, #24]
 8004126:	f107 0218 	add.w	r2, r7, #24
 800412a:	f107 0314 	add.w	r3, r7, #20
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f000 f88a 	bl	800424a <_ZN9__gnu_cxx17__normal_iteratorIPK8KeyEventSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
		this->m_events.erase(
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	68f9      	ldr	r1, [r7, #12]
 800413a:	4620      	mov	r0, r4
 800413c:	f000 f896 	bl	800426c <_ZNSt6vectorI8KeyEventSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EES7_>
		return true;
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <_ZN8Keyboard9get_eventEP8KeyEvent+0xae>
	}
	return false;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3724      	adds	r7, #36	; 0x24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd90      	pop	{r4, r7, pc}

0800414e <_ZNKSt6vectorI8KeyEventSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	461a      	mov	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	105b      	asrs	r3, r3, #1
 8004164:	4618      	mov	r0, r3
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <_ZNSt6vectorI8KeyEventSaIS0_EEC1Ev>:
      vector()
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f8af 	bl	80042de <_ZNSt12_Vector_baseI8KeyEventSaIS0_EEC1Ev>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <_ZNSt6vectorI8KeyEventSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	429a      	cmp	r2, r3
 800419e:	d00c      	beq.n	80041ba <_ZNSt6vectorI8KeyEventSaIS0_EE9push_backERKS0_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	4619      	mov	r1, r3
 80041aa:	f000 f8c9 	bl	8004340 <_ZNSt16allocator_traitsISaI8KeyEventEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	1c9a      	adds	r2, r3, #2
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	605a      	str	r2, [r3, #4]
      }
 80041b8:	e008      	b.n	80041cc <_ZNSt6vectorI8KeyEventSaIS0_EE9push_backERKS0_+0x42>
	  _M_realloc_insert(end(), __x);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f8d3 	bl	8004366 <_ZNSt6vectorI8KeyEventSaIS0_EE3endEv>
 80041c0:	4603      	mov	r3, r0
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	4619      	mov	r1, r3
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f8de 	bl	8004388 <_ZNSt6vectorI8KeyEventSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 80041cc:	bf00      	nop
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <_ZNSt6vectorI8KeyEventSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
	return *begin();
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f80c 	bl	80041fa <_ZNSt6vectorI8KeyEventSaIS0_EE5beginEv>
 80041e2:	4603      	mov	r3, r0
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	f107 030c 	add.w	r3, r7, #12
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f958 	bl	80044a0 <_ZNK9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEEdeEv>
 80041f0:	4603      	mov	r3, r0
      }
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <_ZNSt6vectorI8KeyEventSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	f107 030c 	add.w	r3, r7, #12
 8004208:	4611      	mov	r1, r2
 800420a:	4618      	mov	r0, r3
 800420c:	f000 f954 	bl	80044b8 <_ZN9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <_ZNK9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	4413      	add	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	f107 020c 	add.w	r2, r7, #12
 8004234:	f107 0308 	add.w	r3, r7, #8
 8004238:	4611      	mov	r1, r2
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f93c 	bl	80044b8 <_ZN9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <_ZN9__gnu_cxx17__normal_iteratorIPK8KeyEventSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 8004254:	6838      	ldr	r0, [r7, #0]
 8004256:	f000 f93f 	bl	80044d8 <_ZNK9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEE4baseEv>
 800425a:	4603      	mov	r3, r0
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <_ZNSt6vectorI8KeyEventSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EES7_>:
      erase(const_iterator __first, const_iterator __last)
 800426c:	b590      	push	{r4, r7, lr}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
	const auto __beg = begin();
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f7ff ffbe 	bl	80041fa <_ZNSt6vectorI8KeyEventSaIS0_EE5beginEv>
 800427e:	4603      	mov	r3, r0
 8004280:	617b      	str	r3, [r7, #20]
	const auto __cbeg = cbegin();
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f933 	bl	80044ee <_ZNKSt6vectorI8KeyEventSaIS0_EE6cbeginEv>
 8004288:	4603      	mov	r3, r0
 800428a:	613b      	str	r3, [r7, #16]
	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
 800428c:	f107 0210 	add.w	r2, r7, #16
 8004290:	f107 0308 	add.w	r3, r7, #8
 8004294:	4611      	mov	r1, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f93d 	bl	8004516 <_ZN9__gnu_cxxmiIPK8KeyEventSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800429c:	4602      	mov	r2, r0
 800429e:	f107 0314 	add.w	r3, r7, #20
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ffb8 	bl	800421a <_ZNK9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEEplEi>
 80042aa:	4604      	mov	r4, r0
 80042ac:	f107 0210 	add.w	r2, r7, #16
 80042b0:	1d3b      	adds	r3, r7, #4
 80042b2:	4611      	mov	r1, r2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 f92e 	bl	8004516 <_ZN9__gnu_cxxmiIPK8KeyEventSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80042ba:	4602      	mov	r2, r0
 80042bc:	f107 0314 	add.w	r3, r7, #20
 80042c0:	4611      	mov	r1, r2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff ffa9 	bl	800421a <_ZNK9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEEplEi>
 80042c8:	4603      	mov	r3, r0
 80042ca:	461a      	mov	r2, r3
 80042cc:	4621      	mov	r1, r4
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 f937 	bl	8004542 <_ZNSt6vectorI8KeyEventSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EES6_>
 80042d4:	4603      	mov	r3, r0
      }
 80042d6:	4618      	mov	r0, r3
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd90      	pop	{r4, r7, pc}

080042de <_ZNSt12_Vector_baseI8KeyEventSaIS0_EEC1Ev>:
      _Vector_base()
 80042de:	b580      	push	{r7, lr}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 f971 	bl	80045d0 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE12_Vector_implC1Ev>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4618      	mov	r0, r3
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <_ZSt8_DestroyIP8KeyEventS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800431a:	68b9      	ldr	r1, [r7, #8]
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 f97f 	bl	8004620 <_ZSt8_DestroyIP8KeyEventEvT_S2_>
    }
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <_ZSt7forwardIRK8KeyEventEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <_ZNSt16allocator_traitsISaI8KeyEventEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff ffec 	bl	800432a <_ZSt7forwardIRK8KeyEventEOT_RNSt16remove_referenceIS3_E4typeE>
 8004352:	4603      	mov	r3, r0
 8004354:	461a      	mov	r2, r3
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f96e 	bl	800463a <_ZN9__gnu_cxx13new_allocatorI8KeyEventE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <_ZNSt6vectorI8KeyEventSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	1d1a      	adds	r2, r3, #4
 8004372:	f107 030c 	add.w	r3, r7, #12
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f000 f89d 	bl	80044b8 <_ZN9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <_ZNSt6vectorI8KeyEventSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8004388:	b5b0      	push	{r4, r5, r7, lr}
 800438a:	b08a      	sub	sp, #40	; 0x28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8004394:	4a41      	ldr	r2, [pc, #260]	; (800449c <_ZNSt6vectorI8KeyEventSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x114>)
 8004396:	2101      	movs	r1, #1
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f968 	bl	800466e <_ZNKSt6vectorI8KeyEventSaIS0_EE12_M_check_lenEjPKc>
 800439e:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f7ff ff2a 	bl	80041fa <_ZNSt6vectorI8KeyEventSaIS0_EE5beginEv>
 80043a6:	4603      	mov	r3, r0
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	f107 0214 	add.w	r2, r7, #20
 80043ae:	f107 0308 	add.w	r3, r7, #8
 80043b2:	4611      	mov	r1, r2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 f9a2 	bl	80046fe <_ZN9__gnu_cxxmiIP8KeyEventSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80043ba:	4603      	mov	r3, r0
 80043bc:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 f9b1 	bl	800472a <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE11_M_allocateEj>
 80043c8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80043ce:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	005b      	lsls	r3, r3, #1
	  _Alloc_traits::construct(this->_M_impl,
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	18d5      	adds	r5, r2, r3
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff ffa6 	bl	800432a <_ZSt7forwardIRK8KeyEventEOT_RNSt16remove_referenceIS3_E4typeE>
 80043de:	4603      	mov	r3, r0
 80043e0:	461a      	mov	r2, r3
 80043e2:	4629      	mov	r1, r5
 80043e4:	4620      	mov	r0, r4
 80043e6:	f7ff ffab 	bl	8004340 <_ZNSt16allocator_traitsISaI8KeyEventEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 80043ea:	2300      	movs	r3, #0
 80043ec:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681c      	ldr	r4, [r3, #0]
 80043f2:	f107 0308 	add.w	r3, r7, #8
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 f86e 	bl	80044d8 <_ZNK9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEE4baseEv>
 80043fc:	4603      	mov	r3, r0
 80043fe:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff ff78 	bl	80042f8 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE19_M_get_Tp_allocatorEv>
 8004408:	4603      	mov	r3, r0
	  __new_finish
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	4629      	mov	r1, r5
 800440e:	4620      	mov	r0, r4
 8004410:	f000 f99f 	bl	8004752 <_ZSt34__uninitialized_move_if_noexcept_aIP8KeyEventS1_SaIS0_EET0_T_S4_S3_RT1_>
 8004414:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	3302      	adds	r3, #2
 800441a:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 800441c:	f107 0308 	add.w	r3, r7, #8
 8004420:	4618      	mov	r0, r3
 8004422:	f000 f859 	bl	80044d8 <_ZNK9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEE4baseEv>
 8004426:	4603      	mov	r3, r0
 8004428:	681c      	ldr	r4, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff ff61 	bl	80042f8 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE19_M_get_Tp_allocatorEv>
 8004436:	4603      	mov	r3, r0
	  __new_finish
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4629      	mov	r1, r5
 800443c:	4620      	mov	r0, r4
 800443e:	f000 f988 	bl	8004752 <_ZSt34__uninitialized_move_if_noexcept_aIP8KeyEventS1_SaIS0_EET0_T_S4_S3_RT1_>
 8004442:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681c      	ldr	r4, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff ff52 	bl	80042f8 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE19_M_get_Tp_allocatorEv>
 8004454:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004456:	461a      	mov	r2, r3
 8004458:	4629      	mov	r1, r5
 800445a:	4620      	mov	r0, r4
 800445c:	f7ff ff57 	bl	800430e <_ZSt8_DestroyIP8KeyEventS0_EvT_S2_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800446a:	461a      	mov	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	105b      	asrs	r3, r3, #1
      _M_deallocate(this->_M_impl._M_start,
 8004474:	461a      	mov	r2, r3
 8004476:	f000 f8c0 	bl	80045fa <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	69fa      	ldr	r2, [r7, #28]
 800447e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	441a      	add	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	609a      	str	r2, [r3, #8]
    }
 8004492:	bf00      	nop
 8004494:	3728      	adds	r7, #40	; 0x28
 8004496:	46bd      	mov	sp, r7
 8004498:	bdb0      	pop	{r4, r5, r7, pc}
 800449a:	bf00      	nop
 800449c:	0800bb6c 	.word	0x0800bb6c

080044a0 <_ZNK9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <_ZN9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <_ZNK9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4618      	mov	r0, r3
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <_ZNKSt6vectorI8KeyEventSaIS0_EE6cbeginEv>:
      cbegin() const noexcept
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b084      	sub	sp, #16
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	f107 020c 	add.w	r2, r7, #12
 8004500:	f107 0308 	add.w	r3, r7, #8
 8004504:	4611      	mov	r1, r2
 8004506:	4618      	mov	r0, r3
 8004508:	f000 f93c 	bl	8004784 <_ZN9__gnu_cxx17__normal_iteratorIPK8KeyEventSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <_ZN9__gnu_cxxmiIPK8KeyEventSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004516:	b590      	push	{r4, r7, lr}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f93f 	bl	80047a4 <_ZNK9__gnu_cxx17__normal_iteratorIPK8KeyEventSt6vectorIS1_SaIS1_EEE4baseEv>
 8004526:	4603      	mov	r3, r0
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461c      	mov	r4, r3
 800452c:	6838      	ldr	r0, [r7, #0]
 800452e:	f000 f939 	bl	80047a4 <_ZNK9__gnu_cxx17__normal_iteratorIPK8KeyEventSt6vectorIS1_SaIS1_EEE4baseEv>
 8004532:	4603      	mov	r3, r0
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	1ae3      	subs	r3, r4, r3
 8004538:	105b      	asrs	r3, r3, #1
 800453a:	4618      	mov	r0, r3
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	bd90      	pop	{r4, r7, pc}

08004542 <_ZNSt6vectorI8KeyEventSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EES6_>:
    vector<_Tp, _Alloc>::
 8004542:	b590      	push	{r4, r7, lr}
 8004544:	b087      	sub	sp, #28
 8004546:	af00      	add	r7, sp, #0
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607a      	str	r2, [r7, #4]
      if (__first != __last)
 800454e:	1d3a      	adds	r2, r7, #4
 8004550:	f107 0308 	add.w	r3, r7, #8
 8004554:	4611      	mov	r1, r2
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f92f 	bl	80047ba <_ZN9__gnu_cxxneIP8KeyEventSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d031      	beq.n	80045c6 <_ZNSt6vectorI8KeyEventSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EES6_+0x84>
	  if (__last != end())
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f7ff feff 	bl	8004366 <_ZNSt6vectorI8KeyEventSaIS0_EE3endEv>
 8004568:	4603      	mov	r3, r0
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	f107 0210 	add.w	r2, r7, #16
 8004570:	1d3b      	adds	r3, r7, #4
 8004572:	4611      	mov	r1, r2
 8004574:	4618      	mov	r0, r3
 8004576:	f000 f920 	bl	80047ba <_ZN9__gnu_cxxneIP8KeyEventSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <_ZNSt6vectorI8KeyEventSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EES6_+0x50>
	    _GLIBCXX_MOVE3(__last, end(), __first);
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f7ff fef0 	bl	8004366 <_ZNSt6vectorI8KeyEventSaIS0_EE3endEv>
 8004586:	4603      	mov	r3, r0
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	4619      	mov	r1, r3
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f92c 	bl	80047ea <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
	  _M_erase_at_end(__first.base() + (end() - __last));
 8004592:	f107 0308 	add.w	r3, r7, #8
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff ff9e 	bl	80044d8 <_ZNK9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEE4baseEv>
 800459c:	4603      	mov	r3, r0
 800459e:	681c      	ldr	r4, [r3, #0]
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff fee0 	bl	8004366 <_ZNSt6vectorI8KeyEventSaIS0_EE3endEv>
 80045a6:	4603      	mov	r3, r0
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	1d3a      	adds	r2, r7, #4
 80045ac:	f107 0314 	add.w	r3, r7, #20
 80045b0:	4611      	mov	r1, r2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 f8a3 	bl	80046fe <_ZN9__gnu_cxxmiIP8KeyEventSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80045b8:	4603      	mov	r3, r0
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	4423      	add	r3, r4
 80045be:	4619      	mov	r1, r3
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 f92a 	bl	800481a <_ZNSt6vectorI8KeyEventSaIS0_EE15_M_erase_at_endEPS0_>
      return __first;
 80045c6:	68bb      	ldr	r3, [r7, #8]
    }
 80045c8:	4618      	mov	r0, r3
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd90      	pop	{r4, r7, pc}

080045d0 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f936 	bl	800484a <_ZNSaI8KeyEventEC1Ev>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	605a      	str	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	609a      	str	r2, [r3, #8]
	{ }
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	607a      	str	r2, [r7, #4]
	if (__p)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	4618      	mov	r0, r3
 8004614:	f000 f925 	bl	8004862 <_ZNSt16allocator_traitsISaI8KeyEventEE10deallocateERS1_PS0_j>
      }
 8004618:	bf00      	nop
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <_ZSt8_DestroyIP8KeyEventEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800462a:	6839      	ldr	r1, [r7, #0]
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f927 	bl	8004880 <_ZNSt12_Destroy_auxILb1EE9__destroyIP8KeyEventEEvT_S4_>
    }
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <_ZN9__gnu_cxx13new_allocatorI8KeyEventE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800463a:	b590      	push	{r4, r7, lr}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7ff fe6f 	bl	800432a <_ZSt7forwardIRK8KeyEventEOT_RNSt16remove_referenceIS3_E4typeE>
 800464c:	4604      	mov	r4, r0
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	4619      	mov	r1, r3
 8004652:	2002      	movs	r0, #2
 8004654:	f7fd fd68 	bl	8002128 <_ZnwjPv>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <_ZN9__gnu_cxx13new_allocatorI8KeyEventE9constructIS1_JRKS1_EEEvPT_DpOT0_+0x2c>
 800465e:	461a      	mov	r2, r3
 8004660:	4623      	mov	r3, r4
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	8013      	strh	r3, [r2, #0]
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	bd90      	pop	{r4, r7, pc}

0800466e <_ZNKSt6vectorI8KeyEventSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800466e:	b590      	push	{r4, r7, lr}
 8004670:	b087      	sub	sp, #28
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f90b 	bl	8004896 <_ZNKSt6vectorI8KeyEventSaIS0_EE8max_sizeEv>
 8004680:	4604      	mov	r4, r0
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f7ff fd63 	bl	800414e <_ZNKSt6vectorI8KeyEventSaIS0_EE4sizeEv>
 8004688:	4603      	mov	r3, r0
 800468a:	1ae2      	subs	r2, r4, r3
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	429a      	cmp	r2, r3
 8004690:	bf34      	ite	cc
 8004692:	2301      	movcc	r3, #1
 8004694:	2300      	movcs	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <_ZNKSt6vectorI8KeyEventSaIS0_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4618      	mov	r0, r3
 80046a0:	f005 fed5 	bl	800a44e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f7ff fd52 	bl	800414e <_ZNKSt6vectorI8KeyEventSaIS0_EE4sizeEv>
 80046aa:	4604      	mov	r4, r0
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7ff fd4e 	bl	800414e <_ZNKSt6vectorI8KeyEventSaIS0_EE4sizeEv>
 80046b2:	4603      	mov	r3, r0
 80046b4:	613b      	str	r3, [r7, #16]
 80046b6:	f107 0208 	add.w	r2, r7, #8
 80046ba:	f107 0310 	add.w	r3, r7, #16
 80046be:	4611      	mov	r1, r2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff f8e7 	bl	8003894 <_ZSt3maxIjERKT_S2_S2_>
 80046c6:	4603      	mov	r3, r0
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4423      	add	r3, r4
 80046cc:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f7ff fd3d 	bl	800414e <_ZNKSt6vectorI8KeyEventSaIS0_EE4sizeEv>
 80046d4:	4602      	mov	r2, r0
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	4293      	cmp	r3, r2
 80046da:	d306      	bcc.n	80046ea <_ZNKSt6vectorI8KeyEventSaIS0_EE12_M_check_lenEjPKc+0x7c>
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f8da 	bl	8004896 <_ZNKSt6vectorI8KeyEventSaIS0_EE8max_sizeEv>
 80046e2:	4602      	mov	r2, r0
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d904      	bls.n	80046f4 <_ZNKSt6vectorI8KeyEventSaIS0_EE12_M_check_lenEjPKc+0x86>
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f8d3 	bl	8004896 <_ZNKSt6vectorI8KeyEventSaIS0_EE8max_sizeEv>
 80046f0:	4603      	mov	r3, r0
 80046f2:	e000      	b.n	80046f6 <_ZNKSt6vectorI8KeyEventSaIS0_EE12_M_check_lenEjPKc+0x88>
 80046f4:	697b      	ldr	r3, [r7, #20]
      }
 80046f6:	4618      	mov	r0, r3
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd90      	pop	{r4, r7, pc}

080046fe <_ZN9__gnu_cxxmiIP8KeyEventSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80046fe:	b590      	push	{r4, r7, lr}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7ff fee5 	bl	80044d8 <_ZNK9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEE4baseEv>
 800470e:	4603      	mov	r3, r0
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	461c      	mov	r4, r3
 8004714:	6838      	ldr	r0, [r7, #0]
 8004716:	f7ff fedf 	bl	80044d8 <_ZNK9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEE4baseEv>
 800471a:	4603      	mov	r3, r0
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	1ae3      	subs	r3, r4, r3
 8004720:	105b      	asrs	r3, r3, #1
 8004722:	4618      	mov	r0, r3
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	bd90      	pop	{r4, r7, pc}

0800472a <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d006      	beq.n	8004748 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE11_M_allocateEj+0x1e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6839      	ldr	r1, [r7, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f8ba 	bl	80048b8 <_ZNSt16allocator_traitsISaI8KeyEventEE8allocateERS1_j>
 8004744:	4603      	mov	r3, r0
 8004746:	e000      	b.n	800474a <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE11_M_allocateEj+0x20>
 8004748:	2300      	movs	r3, #0
      }
 800474a:	4618      	mov	r0, r3
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <_ZSt34__uninitialized_move_if_noexcept_aIP8KeyEventS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8004752:	b590      	push	{r4, r7, lr}
 8004754:	b085      	sub	sp, #20
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
 800475e:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f8b8 	bl	80048d6 <_ZSt32__make_move_if_noexcept_iteratorI8KeyEventSt13move_iteratorIPS0_EET0_PT_>
 8004766:	4604      	mov	r4, r0
 8004768:	68b8      	ldr	r0, [r7, #8]
 800476a:	f000 f8b4 	bl	80048d6 <_ZSt32__make_move_if_noexcept_iteratorI8KeyEventSt13move_iteratorIPS0_EET0_PT_>
 800476e:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	4620      	mov	r0, r4
 8004776:	f000 f8bd 	bl	80048f4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8KeyEventES2_S1_ET0_T_S5_S4_RSaIT1_E>
 800477a:	4603      	mov	r3, r0
    }
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	bd90      	pop	{r4, r7, pc}

08004784 <_ZN9__gnu_cxx17__normal_iteratorIPK8KeyEventSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <_ZNK9__gnu_cxx17__normal_iteratorIPK8KeyEventSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <_ZN9__gnu_cxxneIP8KeyEventSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80047ba:	b590      	push	{r4, r7, lr}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff fe87 	bl	80044d8 <_ZNK9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEE4baseEv>
 80047ca:	4603      	mov	r3, r0
 80047cc:	681c      	ldr	r4, [r3, #0]
 80047ce:	6838      	ldr	r0, [r7, #0]
 80047d0:	f7ff fe82 	bl	80044d8 <_ZNK9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEE4baseEv>
 80047d4:	4603      	mov	r3, r0
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	429c      	cmp	r4, r3
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd90      	pop	{r4, r7, pc}

080047ea <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
    move(_II __first, _II __last, _OI __result)
 80047ea:	b590      	push	{r4, r7, lr}
 80047ec:	b085      	sub	sp, #20
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f88d 	bl	8004916 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS2_SaIS2_EEEEET_S8_>
 80047fc:	4604      	mov	r4, r0
 80047fe:	68b8      	ldr	r0, [r7, #8]
 8004800:	f000 f889 	bl	8004916 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS2_SaIS2_EEEEET_S8_>
 8004804:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	4619      	mov	r1, r3
 800480a:	4620      	mov	r0, r4
 800480c:	f000 f88e 	bl	800492c <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 8004810:	4603      	mov	r3, r0
    }
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	bd90      	pop	{r4, r7, pc}

0800481a <_ZNSt6vectorI8KeyEventSaIS0_EE15_M_erase_at_endEPS0_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800481a:	b590      	push	{r4, r7, lr}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685c      	ldr	r4, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff fd64 	bl	80042f8 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE19_M_get_Tp_allocatorEv>
 8004830:	4603      	mov	r3, r0
 8004832:	461a      	mov	r2, r3
 8004834:	4621      	mov	r1, r4
 8004836:	6838      	ldr	r0, [r7, #0]
 8004838:	f7ff fd69 	bl	800430e <_ZSt8_DestroyIP8KeyEventS0_EvT_S2_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	605a      	str	r2, [r3, #4]
      }
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	bd90      	pop	{r4, r7, pc}

0800484a <_ZNSaI8KeyEventEC1Ev>:
      allocator() throw() { }
 800484a:	b580      	push	{r7, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f890 	bl	8004978 <_ZN9__gnu_cxx13new_allocatorI8KeyEventEC1Ev>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <_ZNSt16allocator_traitsISaI8KeyEventEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	68b9      	ldr	r1, [r7, #8]
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f88b 	bl	800498e <_ZN9__gnu_cxx13new_allocatorI8KeyEventE10deallocateEPS1_j>
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <_ZNSt12_Destroy_auxILb1EE9__destroyIP8KeyEventEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <_ZNKSt6vectorI8KeyEventSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 f88d 	bl	80049c0 <_ZNKSt12_Vector_baseI8KeyEventSaIS0_EE19_M_get_Tp_allocatorEv>
 80048a6:	4603      	mov	r3, r0
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 f87d 	bl	80049a8 <_ZNSt16allocator_traitsISaI8KeyEventEE8max_sizeERKS1_>
 80048ae:	4603      	mov	r3, r0
 80048b0:	4618      	mov	r0, r3
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <_ZNSt16allocator_traitsISaI8KeyEventEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80048c2:	2200      	movs	r2, #0
 80048c4:	6839      	ldr	r1, [r7, #0]
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f885 	bl	80049d6 <_ZN9__gnu_cxx13new_allocatorI8KeyEventE8allocateEjPKv>
 80048cc:	4603      	mov	r3, r0
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <_ZSt32__make_move_if_noexcept_iteratorI8KeyEventSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b084      	sub	sp, #16
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80048de:	f107 030c 	add.w	r3, r7, #12
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 f894 	bl	8004a12 <_ZNSt13move_iteratorIP8KeyEventEC1ES1_>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8KeyEventES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68b9      	ldr	r1, [r7, #8]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f892 	bl	8004a30 <_ZSt18uninitialized_copyISt13move_iteratorIP8KeyEventES2_ET0_T_S5_S4_>
 800490c:	4603      	mov	r3, r0
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS2_SaIS2_EEEEET_S8_>:
    __miter_base(_Iterator __it)
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800492c:	b5b0      	push	{r4, r5, r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f88b 	bl	8004a54 <_ZSt12__niter_baseIP8KeyEventSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800493e:	4604      	mov	r4, r0
 8004940:	68b8      	ldr	r0, [r7, #8]
 8004942:	f000 f887 	bl	8004a54 <_ZSt12__niter_baseIP8KeyEventSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004946:	4605      	mov	r5, r0
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f883 	bl	8004a54 <_ZSt12__niter_baseIP8KeyEventSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800494e:	4603      	mov	r3, r0
 8004950:	461a      	mov	r2, r3
 8004952:	4629      	mov	r1, r5
 8004954:	4620      	mov	r0, r4
 8004956:	f000 f88b 	bl	8004a70 <_ZSt13__copy_move_aILb1EP8KeyEventS1_ET1_T0_S3_S2_>
 800495a:	4603      	mov	r3, r0
 800495c:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 800495e:	f107 0214 	add.w	r2, r7, #20
 8004962:	f107 0310 	add.w	r3, r7, #16
 8004966:	4611      	mov	r1, r2
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff fda5 	bl	80044b8 <_ZN9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 800496e:	693b      	ldr	r3, [r7, #16]
    }
 8004970:	4618      	mov	r0, r3
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bdb0      	pop	{r4, r5, r7, pc}

08004978 <_ZN9__gnu_cxx13new_allocatorI8KeyEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4618      	mov	r0, r3
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <_ZN9__gnu_cxx13new_allocatorI8KeyEventE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800499a:	68b8      	ldr	r0, [r7, #8]
 800499c:	f005 fd3c 	bl	800a418 <_ZdlPv>
      }
 80049a0:	bf00      	nop
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <_ZNSt16allocator_traitsISaI8KeyEventEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f86f 	bl	8004a94 <_ZNK9__gnu_cxx13new_allocatorI8KeyEventE8max_sizeEv>
 80049b6:	4603      	mov	r3, r0
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <_ZNKSt12_Vector_baseI8KeyEventSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4618      	mov	r0, r3
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <_ZN9__gnu_cxx13new_allocatorI8KeyEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 f856 	bl	8004a94 <_ZNK9__gnu_cxx13new_allocatorI8KeyEventE8max_sizeEv>
 80049e8:	4602      	mov	r2, r0
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4293      	cmp	r3, r2
 80049ee:	bf8c      	ite	hi
 80049f0:	2301      	movhi	r3, #1
 80049f2:	2300      	movls	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <_ZN9__gnu_cxx13new_allocatorI8KeyEventE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80049fa:	f005 fd22 	bl	800a442 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	4618      	mov	r0, r3
 8004a04:	f005 fcdf 	bl	800a3c6 <_Znwj>
 8004a08:	4603      	mov	r3, r0
      }
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <_ZNSt13move_iteratorIP8KeyEventEC1ES1_>:
      move_iterator(iterator_type __i)
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <_ZSt18uninitialized_copyISt13move_iteratorIP8KeyEventES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f831 	bl	8004aac <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8KeyEventES4_EET0_T_S7_S6_>
 8004a4a:	4603      	mov	r3, r0
    }
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <_ZSt12__niter_baseIP8KeyEventSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8004a5c:	1d3b      	adds	r3, r7, #4
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff fd3a 	bl	80044d8 <_ZNK9__gnu_cxx17__normal_iteratorIP8KeyEventSt6vectorIS1_SaIS1_EEE4baseEv>
 8004a64:	4603      	mov	r3, r0
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <_ZSt13__copy_move_aILb1EP8KeyEventS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 f821 	bl	8004acc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8KeyEventEEPT_PKS4_S7_S5_>
 8004a8a:	4603      	mov	r3, r0
    }
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <_ZNK9__gnu_cxx13new_allocatorI8KeyEventE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8004a9c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8KeyEventES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 f822 	bl	8004b06 <_ZSt4copyISt13move_iteratorIP8KeyEventES2_ET0_T_S5_S4_>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8KeyEventEEPT_PKS4_S7_S5_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	105b      	asrs	r3, r3, #1
 8004ae0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d006      	beq.n	8004af6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8KeyEventEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	461a      	mov	r2, r3
 8004aee:	68f9      	ldr	r1, [r7, #12]
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f005 ff2c 	bl	800a94e <memmove>
	  return __result + _Num;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	4413      	add	r3, r2
	}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <_ZSt4copyISt13move_iteratorIP8KeyEventES2_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8004b06:	b590      	push	{r4, r7, lr}
 8004b08:	b085      	sub	sp, #20
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 f80f 	bl	8004b36 <_ZSt12__miter_baseIP8KeyEventEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8004b18:	4604      	mov	r4, r0
 8004b1a:	68b8      	ldr	r0, [r7, #8]
 8004b1c:	f000 f80b 	bl	8004b36 <_ZSt12__miter_baseIP8KeyEventEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8004b20:	4603      	mov	r3, r0
	       __result));
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	4619      	mov	r1, r3
 8004b26:	4620      	mov	r0, r4
 8004b28:	f000 f816 	bl	8004b58 <_ZSt14__copy_move_a2ILb1EP8KeyEventS1_ET1_T0_S3_S2_>
 8004b2c:	4603      	mov	r3, r0
    }
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd90      	pop	{r4, r7, pc}

08004b36 <_ZSt12__miter_baseIP8KeyEventEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8004b3e:	1d3b      	adds	r3, r7, #4
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 f825 	bl	8004b90 <_ZNKSt13move_iteratorIP8KeyEventE4baseEv>
 8004b46:	4603      	mov	r3, r0
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 f82d 	bl	8004ba8 <_ZSt12__miter_baseIP8KeyEventET_S2_>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <_ZSt14__copy_move_a2ILb1EP8KeyEventS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004b58:	b5b0      	push	{r4, r5, r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f82a 	bl	8004bbe <_ZSt12__niter_baseIP8KeyEventET_S2_>
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	68b8      	ldr	r0, [r7, #8]
 8004b6e:	f000 f826 	bl	8004bbe <_ZSt12__niter_baseIP8KeyEventET_S2_>
 8004b72:	4605      	mov	r5, r0
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f822 	bl	8004bbe <_ZSt12__niter_baseIP8KeyEventET_S2_>
 8004b7a:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4629      	mov	r1, r5
 8004b80:	4620      	mov	r0, r4
 8004b82:	f7ff ff75 	bl	8004a70 <_ZSt13__copy_move_aILb1EP8KeyEventS1_ET1_T0_S3_S2_>
 8004b86:	4603      	mov	r3, r0
    }
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bdb0      	pop	{r4, r5, r7, pc}

08004b90 <_ZNKSt13move_iteratorIP8KeyEventE4baseEv>:
      base() const
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <_ZSt12__miter_baseIP8KeyEventET_S2_>:
    __miter_base(_Iterator __it)
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <_ZSt12__niter_baseIP8KeyEventET_S2_>:
    __niter_base(_Iterator __it)
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <KeyExpansion>:
*/
#define getSBoxInvert(num) (rsbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b089      	sub	sp, #36	; 0x24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8004bde:	2300      	movs	r3, #0
 8004be0:	61fb      	str	r3, [r7, #28]
 8004be2:	e030      	b.n	8004c46 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	441a      	add	r2, r3
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	440b      	add	r3, r1
 8004bf4:	7812      	ldrb	r2, [r2, #0]
 8004bf6:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	441a      	add	r2, r3
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	3301      	adds	r3, #1
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	440b      	add	r3, r1
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	3302      	adds	r3, #2
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	441a      	add	r2, r3
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	3302      	adds	r3, #2
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	440b      	add	r3, r1
 8004c24:	7812      	ldrb	r2, [r2, #0]
 8004c26:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	3303      	adds	r3, #3
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	441a      	add	r2, r3
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	3303      	adds	r3, #3
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	440b      	add	r3, r1
 8004c3c:	7812      	ldrb	r2, [r2, #0]
 8004c3e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	3301      	adds	r3, #1
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	2b07      	cmp	r3, #7
 8004c4a:	d9cb      	bls.n	8004be4 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8004c4c:	2308      	movs	r3, #8
 8004c4e:	61fb      	str	r3, [r7, #28]
 8004c50:	e09e      	b.n	8004d90 <KeyExpansion+0x1bc>
  {
    {
      k = (i - 1) * 4;
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	4413      	add	r3, r2
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	4413      	add	r3, r2
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	3302      	adds	r3, #2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	3303      	adds	r3, #3
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	4413      	add	r3, r2
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d125      	bne.n	8004ce2 <KeyExpansion+0x10e>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 8004c96:	7b3b      	ldrb	r3, [r7, #12]
 8004c98:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 8004c9a:	7b7b      	ldrb	r3, [r7, #13]
 8004c9c:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 8004c9e:	7bbb      	ldrb	r3, [r7, #14]
 8004ca0:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
 8004ca8:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8004caa:	7b3b      	ldrb	r3, [r7, #12]
 8004cac:	461a      	mov	r2, r3
 8004cae:	4b3d      	ldr	r3, [pc, #244]	; (8004da4 <KeyExpansion+0x1d0>)
 8004cb0:	5c9b      	ldrb	r3, [r3, r2]
 8004cb2:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8004cb4:	7b7b      	ldrb	r3, [r7, #13]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	4b3a      	ldr	r3, [pc, #232]	; (8004da4 <KeyExpansion+0x1d0>)
 8004cba:	5c9b      	ldrb	r3, [r3, r2]
 8004cbc:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8004cbe:	7bbb      	ldrb	r3, [r7, #14]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4b38      	ldr	r3, [pc, #224]	; (8004da4 <KeyExpansion+0x1d0>)
 8004cc4:	5c9b      	ldrb	r3, [r3, r2]
 8004cc6:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	4b35      	ldr	r3, [pc, #212]	; (8004da4 <KeyExpansion+0x1d0>)
 8004cce:	5c9b      	ldrb	r3, [r3, r2]
 8004cd0:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8004cd2:	7b3a      	ldrb	r2, [r7, #12]
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	08db      	lsrs	r3, r3, #3
 8004cd8:	4933      	ldr	r1, [pc, #204]	; (8004da8 <KeyExpansion+0x1d4>)
 8004cda:	5ccb      	ldrb	r3, [r1, r3]
 8004cdc:	4053      	eors	r3, r2
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	733b      	strb	r3, [r7, #12]
    }
#if defined(AES256) && (AES256 == 1)
    if (i % Nk == 4)
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d113      	bne.n	8004d14 <KeyExpansion+0x140>
    {
      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8004cec:	7b3b      	ldrb	r3, [r7, #12]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	4b2c      	ldr	r3, [pc, #176]	; (8004da4 <KeyExpansion+0x1d0>)
 8004cf2:	5c9b      	ldrb	r3, [r3, r2]
 8004cf4:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8004cf6:	7b7b      	ldrb	r3, [r7, #13]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4b2a      	ldr	r3, [pc, #168]	; (8004da4 <KeyExpansion+0x1d0>)
 8004cfc:	5c9b      	ldrb	r3, [r3, r2]
 8004cfe:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8004d00:	7bbb      	ldrb	r3, [r7, #14]
 8004d02:	461a      	mov	r2, r3
 8004d04:	4b27      	ldr	r3, [pc, #156]	; (8004da4 <KeyExpansion+0x1d0>)
 8004d06:	5c9b      	ldrb	r3, [r3, r2]
 8004d08:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	4b25      	ldr	r3, [pc, #148]	; (8004da4 <KeyExpansion+0x1d0>)
 8004d10:	5c9b      	ldrb	r3, [r3, r2]
 8004d12:	73fb      	strb	r3, [r7, #15]
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	613b      	str	r3, [r7, #16]
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d20:	3b08      	subs	r3, #8
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	7819      	ldrb	r1, [r3, #0]
 8004d2e:	7b3a      	ldrb	r2, [r7, #12]
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	4403      	add	r3, r0
 8004d36:	404a      	eors	r2, r1
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	4413      	add	r3, r2
 8004d44:	7819      	ldrb	r1, [r3, #0]
 8004d46:	7b7a      	ldrb	r2, [r7, #13]
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	4403      	add	r3, r0
 8004d50:	404a      	eors	r2, r1
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	3302      	adds	r3, #2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	7819      	ldrb	r1, [r3, #0]
 8004d60:	7bba      	ldrb	r2, [r7, #14]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	3302      	adds	r3, #2
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	4403      	add	r3, r0
 8004d6a:	404a      	eors	r2, r1
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	3303      	adds	r3, #3
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	4413      	add	r3, r2
 8004d78:	7819      	ldrb	r1, [r3, #0]
 8004d7a:	7bfa      	ldrb	r2, [r7, #15]
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	3303      	adds	r3, #3
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	4403      	add	r3, r0
 8004d84:	404a      	eors	r2, r1
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	61fb      	str	r3, [r7, #28]
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	2b3b      	cmp	r3, #59	; 0x3b
 8004d94:	f67f af5d 	bls.w	8004c52 <KeyExpansion+0x7e>
  }
}
 8004d98:	bf00      	nop
 8004d9a:	3724      	adds	r7, #36	; 0x24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	0800d0ec 	.word	0x0800d0ec
 8004da8:	0800d1ec 	.word	0x0800d1ec

08004dac <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6839      	ldr	r1, [r7, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff ff0a 	bl	8004bd4 <KeyExpansion>
}
 8004dc0:	bf00      	nop
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	75fb      	strb	r3, [r7, #23]
 8004dda:	e027      	b.n	8004e2c <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 8004ddc:	2300      	movs	r3, #0
 8004dde:	75bb      	strb	r3, [r7, #22]
 8004de0:	e01e      	b.n	8004e20 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8004de2:	7dfa      	ldrb	r2, [r7, #23]
 8004de4:	7dbb      	ldrb	r3, [r7, #22]
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	0092      	lsls	r2, r2, #2
 8004dea:	440a      	add	r2, r1
 8004dec:	4413      	add	r3, r2
 8004dee:	7818      	ldrb	r0, [r3, #0]
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	009a      	lsls	r2, r3, #2
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
 8004df6:	4413      	add	r3, r2
 8004df8:	009a      	lsls	r2, r3, #2
 8004dfa:	7dbb      	ldrb	r3, [r7, #22]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	461a      	mov	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4413      	add	r3, r2
 8004e04:	7819      	ldrb	r1, [r3, #0]
 8004e06:	7dfa      	ldrb	r2, [r7, #23]
 8004e08:	7dbb      	ldrb	r3, [r7, #22]
 8004e0a:	4041      	eors	r1, r0
 8004e0c:	b2c8      	uxtb	r0, r1
 8004e0e:	68b9      	ldr	r1, [r7, #8]
 8004e10:	0092      	lsls	r2, r2, #2
 8004e12:	440a      	add	r2, r1
 8004e14:	4413      	add	r3, r2
 8004e16:	4602      	mov	r2, r0
 8004e18:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8004e1a:	7dbb      	ldrb	r3, [r7, #22]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	75bb      	strb	r3, [r7, #22]
 8004e20:	7dbb      	ldrb	r3, [r7, #22]
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d9dd      	bls.n	8004de2 <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 8004e26:	7dfb      	ldrb	r3, [r7, #23]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	75fb      	strb	r3, [r7, #23]
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d9d4      	bls.n	8004ddc <AddRoundKey+0x14>
    }
  }
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8004e48:	2300      	movs	r3, #0
 8004e4a:	73fb      	strb	r3, [r7, #15]
 8004e4c:	e01d      	b.n	8004e8a <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8004e4e:	2300      	movs	r3, #0
 8004e50:	73bb      	strb	r3, [r7, #14]
 8004e52:	e014      	b.n	8004e7e <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8004e54:	7bba      	ldrb	r2, [r7, #14]
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	0092      	lsls	r2, r2, #2
 8004e5c:	440a      	add	r2, r1
 8004e5e:	4413      	add	r3, r2
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	7bba      	ldrb	r2, [r7, #14]
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	490c      	ldr	r1, [pc, #48]	; (8004e9c <SubBytes+0x5c>)
 8004e6a:	5c08      	ldrb	r0, [r1, r0]
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	0092      	lsls	r2, r2, #2
 8004e70:	440a      	add	r2, r1
 8004e72:	4413      	add	r3, r2
 8004e74:	4602      	mov	r2, r0
 8004e76:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8004e78:	7bbb      	ldrb	r3, [r7, #14]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	73bb      	strb	r3, [r7, #14]
 8004e7e:	7bbb      	ldrb	r3, [r7, #14]
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d9e7      	bls.n	8004e54 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	3301      	adds	r3, #1
 8004e88:	73fb      	strb	r3, [r7, #15]
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d9de      	bls.n	8004e4e <SubBytes+0xe>
    }
  }
}
 8004e90:	bf00      	nop
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	0800d0ec 	.word	0x0800d0ec

08004ea0 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	785b      	ldrb	r3, [r3, #1]
 8004eac:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	795a      	ldrb	r2, [r3, #5]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	7a5a      	ldrb	r2, [r3, #9]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	7b5a      	ldrb	r2, [r3, #13]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	7bfa      	ldrb	r2, [r7, #15]
 8004eca:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	789b      	ldrb	r3, [r3, #2]
 8004ed0:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	7a9a      	ldrb	r2, [r3, #10]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	7bfa      	ldrb	r2, [r7, #15]
 8004ede:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	799b      	ldrb	r3, [r3, #6]
 8004ee4:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	7b9a      	ldrb	r2, [r3, #14]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	7bfa      	ldrb	r2, [r7, #15]
 8004ef2:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	78db      	ldrb	r3, [r3, #3]
 8004ef8:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	7bda      	ldrb	r2, [r3, #15]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	7ada      	ldrb	r2, [r3, #11]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	79da      	ldrb	r2, [r3, #7]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	7bfa      	ldrb	r2, [r7, #15]
 8004f16:	71da      	strb	r2, [r3, #7]
}
 8004f18:	bf00      	nop
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <xtime>:

static uint8_t xtime(uint8_t x)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	b25a      	sxtb	r2, r3
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	09db      	lsrs	r3, r3, #7
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	0049      	lsls	r1, r1, #1
 8004f3e:	440b      	add	r3, r1
 8004f40:	4619      	mov	r1, r3
 8004f42:	00c8      	lsls	r0, r1, #3
 8004f44:	4619      	mov	r1, r3
 8004f46:	4603      	mov	r3, r0
 8004f48:	440b      	add	r3, r1
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	b25b      	sxtb	r3, r3
 8004f4e:	4053      	eors	r3, r2
 8004f50:	b25b      	sxtb	r3, r3
 8004f52:	b2db      	uxtb	r3, r3
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	73fb      	strb	r3, [r7, #15]
 8004f6c:	e0a4      	b.n	80050b8 <MixColumns+0x158>
  {
    t   = (*state)[i][0];
 8004f6e:	7bfa      	ldrb	r2, [r7, #15]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8004f76:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8004f78:	7bfa      	ldrb	r2, [r7, #15]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	785b      	ldrb	r3, [r3, #1]
 8004f8a:	4053      	eors	r3, r2
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	789b      	ldrb	r3, [r3, #2]
 8004f98:	4053      	eors	r3, r2
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	78db      	ldrb	r3, [r3, #3]
 8004fa6:	4053      	eors	r3, r2
 8004fa8:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8004faa:	7bfa      	ldrb	r2, [r7, #15]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	785b      	ldrb	r3, [r3, #1]
 8004fbc:	4053      	eors	r3, r2
 8004fbe:	733b      	strb	r3, [r7, #12]
 8004fc0:	7b3b      	ldrb	r3, [r7, #12]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff ffae 	bl	8004f24 <xtime>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	733b      	strb	r3, [r7, #12]
 8004fcc:	7bfa      	ldrb	r2, [r7, #15]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8004fd4:	7b3a      	ldrb	r2, [r7, #12]
 8004fd6:	7b7b      	ldrb	r3, [r7, #13]
 8004fd8:	4053      	eors	r3, r2
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	7bfa      	ldrb	r2, [r7, #15]
 8004fde:	404b      	eors	r3, r1
 8004fe0:	b2d9      	uxtb	r1, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	785a      	ldrb	r2, [r3, #1]
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	789b      	ldrb	r3, [r3, #2]
 8004ffc:	4053      	eors	r3, r2
 8004ffe:	733b      	strb	r3, [r7, #12]
 8005000:	7b3b      	ldrb	r3, [r7, #12]
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff ff8e 	bl	8004f24 <xtime>
 8005008:	4603      	mov	r3, r0
 800500a:	733b      	strb	r3, [r7, #12]
 800500c:	7bfb      	ldrb	r3, [r7, #15]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	7859      	ldrb	r1, [r3, #1]
 8005016:	7b3a      	ldrb	r2, [r7, #12]
 8005018:	7b7b      	ldrb	r3, [r7, #13]
 800501a:	4053      	eors	r3, r2
 800501c:	b2da      	uxtb	r2, r3
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	404a      	eors	r2, r1
 8005022:	b2d1      	uxtb	r1, r2
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	460a      	mov	r2, r1
 800502c:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 800502e:	7bfb      	ldrb	r3, [r7, #15]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	789a      	ldrb	r2, [r3, #2]
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	78db      	ldrb	r3, [r3, #3]
 8005042:	4053      	eors	r3, r2
 8005044:	733b      	strb	r3, [r7, #12]
 8005046:	7b3b      	ldrb	r3, [r7, #12]
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff ff6b 	bl	8004f24 <xtime>
 800504e:	4603      	mov	r3, r0
 8005050:	733b      	strb	r3, [r7, #12]
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	7899      	ldrb	r1, [r3, #2]
 800505c:	7b3a      	ldrb	r2, [r7, #12]
 800505e:	7b7b      	ldrb	r3, [r7, #13]
 8005060:	4053      	eors	r3, r2
 8005062:	b2da      	uxtb	r2, r3
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	404a      	eors	r2, r1
 8005068:	b2d1      	uxtb	r1, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	460a      	mov	r2, r1
 8005072:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	78da      	ldrb	r2, [r3, #3]
 800507e:	7bbb      	ldrb	r3, [r7, #14]
 8005080:	4053      	eors	r3, r2
 8005082:	733b      	strb	r3, [r7, #12]
 8005084:	7b3b      	ldrb	r3, [r7, #12]
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff ff4c 	bl	8004f24 <xtime>
 800508c:	4603      	mov	r3, r0
 800508e:	733b      	strb	r3, [r7, #12]
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	78d9      	ldrb	r1, [r3, #3]
 800509a:	7b3a      	ldrb	r2, [r7, #12]
 800509c:	7b7b      	ldrb	r3, [r7, #13]
 800509e:	4053      	eors	r3, r2
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	404a      	eors	r2, r1
 80050a6:	b2d1      	uxtb	r1, r2
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	460a      	mov	r2, r1
 80050b0:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	3301      	adds	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	f67f af57 	bls.w	8004f6e <MixColumns+0xe>
  }
}
 80050c0:	bf00      	nop
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <Cipher>:
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 80050d2:	2300      	movs	r3, #0
 80050d4:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	2000      	movs	r0, #0
 80050dc:	f7ff fe74 	bl	8004dc8 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = 1; round < Nr; ++round)
 80050e0:	2301      	movs	r3, #1
 80050e2:	73fb      	strb	r3, [r7, #15]
 80050e4:	e011      	b.n	800510a <Cipher+0x42>
  {
    SubBytes(state);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff feaa 	bl	8004e40 <SubBytes>
    ShiftRows(state);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff fed7 	bl	8004ea0 <ShiftRows>
    MixColumns(state);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff ff34 	bl	8004f60 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff fe62 	bl	8004dc8 <AddRoundKey>
  for (round = 1; round < Nr; ++round)
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	3301      	adds	r3, #1
 8005108:	73fb      	strb	r3, [r7, #15]
 800510a:	7bfb      	ldrb	r3, [r7, #15]
 800510c:	2b0d      	cmp	r3, #13
 800510e:	d9ea      	bls.n	80050e6 <Cipher+0x1e>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes(state);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff fe95 	bl	8004e40 <SubBytes>
  ShiftRows(state);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7ff fec2 	bl	8004ea0 <ShiftRows>
  AddRoundKey(Nr, state, RoundKey);
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	200e      	movs	r0, #14
 8005122:	f7ff fe51 	bl	8004dc8 <AddRoundKey>
}
 8005126:	bf00      	nop
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <AES_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	6039      	str	r1, [r7, #0]
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4619      	mov	r1, r3
 800513c:	6838      	ldr	r0, [r7, #0]
 800513e:	f7ff ffc3 	bl	80050c8 <Cipher>
}
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <_ZN7Entropy9num_sampsEv>:
	void add_new_sample(uint8_t samp);
	void stop_timer();
public:
	Entropy();
	void open();
	uint16_t num_samps() { return m_num_samps; };
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <_ZN7EntropyC1Ev>:

#include <string.h>

#include "Device.h"

Entropy::Entropy() :
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
m_num_samps(0)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3340      	adds	r3, #64	; 0x40
 8005170:	4618      	mov	r0, r3
 8005172:	f7fb fc71 	bl	8000a58 <_ZN4GpioC1Ev>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	334c      	adds	r3, #76	; 0x4c
 800517a:	4618      	mov	r0, r3
 800517c:	f7fb fc6c 	bl	8000a58 <_ZN4GpioC1Ev>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
{
	this->m_source_pin = Gpio(ENT_SOURCE_PORT, ENT_SOURCE_PIN);
 8005188:	f107 0308 	add.w	r3, r7, #8
 800518c:	2204      	movs	r2, #4
 800518e:	4919      	ldr	r1, [pc, #100]	; (80051f4 <_ZN7EntropyC1Ev+0x90>)
 8005190:	4618      	mov	r0, r3
 8005192:	f7fb fc77 	bl	8000a84 <_ZN4GpioC1EP12GPIO_TypeDeft>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800519c:	f107 0308 	add.w	r3, r7, #8
 80051a0:	cb03      	ldmia	r3!, {r0, r1}
 80051a2:	6010      	str	r0, [r2, #0]
 80051a4:	6051      	str	r1, [r2, #4]
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	8113      	strh	r3, [r2, #8]
	this->m_source_enable_pin = Gpio(ENT_EN_PORT, ENT_EN_PIN);
 80051aa:	f107 0314 	add.w	r3, r7, #20
 80051ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051b2:	4911      	ldr	r1, [pc, #68]	; (80051f8 <_ZN7EntropyC1Ev+0x94>)
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fb fc65 	bl	8000a84 <_ZN4GpioC1EP12GPIO_TypeDeft>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80051c0:	f107 0314 	add.w	r3, r7, #20
 80051c4:	cb03      	ldmia	r3!, {r0, r1}
 80051c6:	6010      	str	r0, [r2, #0]
 80051c8:	6051      	str	r1, [r2, #4]
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	8113      	strh	r3, [r2, #8]
	this->m_collecting = false;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	this->m_tim = {0};
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4618      	mov	r0, r3
 80051da:	2340      	movs	r3, #64	; 0x40
 80051dc:	461a      	mov	r2, r3
 80051de:	2100      	movs	r1, #0
 80051e0:	f005 fbce 	bl	800a980 <memset>

	this->clear_samps();
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f835 	bl	8005254 <_ZN7Entropy11clear_sampsEv>
}
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4618      	mov	r0, r3
 80051ee:	3720      	adds	r7, #32
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40020c00 	.word	0x40020c00
 80051f8:	40020800 	.word	0x40020800

080051fc <_ZN7Entropy12interrupt_cbEv>:

void Entropy::interrupt_cb() {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
	HAL_TIM_IRQHandler(&this->m_tim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4618      	mov	r0, r3
 8005208:	f004 fb1f 	bl	800984a <HAL_TIM_IRQHandler>

	this->sample();
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f88e 	bl	800532e <_ZN7Entropy6sampleEv>

	if (this->num_samps() >= ENTROPY_MAX_SAMPLES) {
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff ff99 	bl	800514a <_ZN7Entropy9num_sampsEv>
 8005218:	4603      	mov	r3, r0
 800521a:	461a      	mov	r2, r3
 800521c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005220:	429a      	cmp	r2, r3
 8005222:	bf8c      	ite	hi
 8005224:	2301      	movhi	r3, #1
 8005226:	2300      	movls	r3, #0
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00e      	beq.n	800524c <_ZN7Entropy12interrupt_cbEv+0x50>
		//this->m_source_enable_pin.set_state(0);
		HAL_TIM_Base_Stop(&this->m_tim);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4618      	mov	r0, r3
 8005232:	f004 fa90 	bl	8009756 <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&this->m_tim);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4618      	mov	r0, r3
 800523a:	f004 fadb 	bl	80097f4 <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_DisableIRQ(TIM7_IRQn);
 800523e:	2037      	movs	r0, #55	; 0x37
 8005240:	f003 f903 	bl	800844a <HAL_NVIC_DisableIRQ>
		this->m_collecting = false;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	}
}
 800524c:	bf00      	nop
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <_ZN7Entropy11clear_sampsEv>:

void Entropy::clear_samps() {
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
	this->m_num_samps = 0;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	for(uint8_t i = 0; i < ENTROPY_BYTES; i++) {
 8005264:	2300      	movs	r3, #0
 8005266:	73fb      	strb	r3, [r7, #15]
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	2b3f      	cmp	r3, #63	; 0x3f
 800526c:	d809      	bhi.n	8005282 <_ZN7Entropy11clear_sampsEv+0x2e>
		this->m_samps[i] = 0x00;
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	4413      	add	r3, r2
 8005274:	2200      	movs	r2, #0
 8005276:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	for(uint8_t i = 0; i < ENTROPY_BYTES; i++) {
 800527a:	7bfb      	ldrb	r3, [r7, #15]
 800527c:	3301      	adds	r3, #1
 800527e:	73fb      	strb	r3, [r7, #15]
 8005280:	e7f2      	b.n	8005268 <_ZN7Entropy11clear_sampsEv+0x14>
	}
}
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <_ZN7Entropy4openEv>:

void Entropy::open() {
 800528e:	b580      	push	{r7, lr}
 8005290:	b082      	sub	sp, #8
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
	this->m_source_pin.enable(GPIO_INPUT);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3340      	adds	r3, #64	; 0x40
 800529a:	2100      	movs	r1, #0
 800529c:	4618      	mov	r0, r3
 800529e:	f7fb faf3 	bl	8000888 <_ZN4Gpio6enableE8GpioMode>
	this->m_source_enable_pin.enable(GPIO_OUTPUT);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	334c      	adds	r3, #76	; 0x4c
 80052a6:	2101      	movs	r1, #1
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fb faed 	bl	8000888 <_ZN4Gpio6enableE8GpioMode>
	//this->m_source_enable_pin.set_state(1); // For debugging
}
 80052ae:	bf00      	nop
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <_ZN7Entropy14add_new_sampleEh>:
	HAL_TIM_Base_Start_IT(&this->m_tim);
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
	HAL_TIM_Base_Start(&this->m_tim);
}

void Entropy::add_new_sample(uint8_t samp) {
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	460b      	mov	r3, r1
 80052c0:	70fb      	strb	r3, [r7, #3]
	if (this->m_num_samps >= ENTROPY_MAX_SAMPLES) {
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052cc:	d229      	bcs.n	8005322 <_ZN7Entropy14add_new_sampleEh+0x6c>
		return;
	}

	uint8_t target_byte = this->m_num_samps / 8;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052d4:	08db      	lsrs	r3, r3, #3
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	73fb      	strb	r3, [r7, #15]
	uint8_t target_bit = this->m_num_samps % 8;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	73bb      	strb	r3, [r7, #14]

	this->m_samps[target_byte] |= (samp << target_bit);
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	4413      	add	r3, r2
 80052ee:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 80052f2:	b25a      	sxtb	r2, r3
 80052f4:	78f9      	ldrb	r1, [r7, #3]
 80052f6:	7bbb      	ldrb	r3, [r7, #14]
 80052f8:	fa01 f303 	lsl.w	r3, r1, r3
 80052fc:	b25b      	sxtb	r3, r3
 80052fe:	4313      	orrs	r3, r2
 8005300:	b25a      	sxtb	r2, r3
 8005302:	7bfb      	ldrb	r3, [r7, #15]
 8005304:	b2d1      	uxtb	r1, r2
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	4413      	add	r3, r2
 800530a:	460a      	mov	r2, r1
 800530c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	this->m_num_samps++;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005316:	3301      	adds	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005320:	e000      	b.n	8005324 <_ZN7Entropy14add_new_sampleEh+0x6e>
		return;
 8005322:	bf00      	nop
}
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <_ZN7Entropy6sampleEv>:
	memcpy(dest, this->m_samps, ENTROPY_BYTES);
	this->clear_samps();
	return num_xfer;
}

void Entropy::sample() {
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
	uint8_t samp = this->m_source_pin.get_state();
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3340      	adds	r3, #64	; 0x40
 800533a:	4618      	mov	r0, r3
 800533c:	f7fb fafd 	bl	800093a <_ZN4Gpio9get_stateEv>
 8005340:	4603      	mov	r3, r0
 8005342:	73fb      	strb	r3, [r7, #15]
	this->add_new_sample(samp);
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	4619      	mov	r1, r3
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff ffb4 	bl	80052b6 <_ZN7Entropy14add_new_sampleEh>
}
 800534e:	bf00      	nop
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <_ZN4PrngC1Ev>:
#include "Prng.h"

#include <stdint.h>
#include "string.h"

Prng::Prng() {
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
	memset(this->m_counter, 0, AES_BLOCKLEN);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005364:	2210      	movs	r2, #16
 8005366:	2100      	movs	r1, #0
 8005368:	4618      	mov	r0, r3
 800536a:	f005 fb09 	bl	800a980 <memset>
	this->m_aes_ctx = {0};
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4618      	mov	r0, r3
 8005372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005376:	461a      	mov	r2, r3
 8005378:	2100      	movs	r1, #0
 800537a:	f005 fb01 	bl	800a980 <memset>
}
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <_ZN4Prng12get_instanceEv>:

Prng& Prng::get_instance() {
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
	static Prng instance;
 800538c:	4b10      	ldr	r3, [pc, #64]	; (80053d0 <_ZN4Prng12get_instanceEv+0x48>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	f3bf 8f5b 	dmb	ish
 8005394:	b2db      	uxtb	r3, r3
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	bf0c      	ite	eq
 800539e:	2301      	moveq	r3, #1
 80053a0:	2300      	movne	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d010      	beq.n	80053ca <_ZN4Prng12get_instanceEv+0x42>
 80053a8:	4809      	ldr	r0, [pc, #36]	; (80053d0 <_ZN4Prng12get_instanceEv+0x48>)
 80053aa:	f005 f81d 	bl	800a3e8 <__cxa_guard_acquire>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <_ZN4Prng12get_instanceEv+0x42>
 80053be:	4805      	ldr	r0, [pc, #20]	; (80053d4 <_ZN4Prng12get_instanceEv+0x4c>)
 80053c0:	f7ff ffc9 	bl	8005356 <_ZN4PrngC1Ev>
 80053c4:	4802      	ldr	r0, [pc, #8]	; (80053d0 <_ZN4Prng12get_instanceEv+0x48>)
 80053c6:	f005 f81b 	bl	800a400 <__cxa_guard_release>
	return instance;
 80053ca:	4b02      	ldr	r3, [pc, #8]	; (80053d4 <_ZN4Prng12get_instanceEv+0x4c>)
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	20000288 	.word	0x20000288
 80053d4:	20000178 	.word	0x20000178

080053d8 <_ZN4Prng8set_seedEPh>:

void Prng::set_seed(uint8_t *seed) {
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
	AES_init_ctx(&this->m_aes_ctx, seed);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff fce0 	bl	8004dac <AES_init_ctx>
	memset(this->m_counter, 0, AES_BLOCKLEN);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80053f2:	2210      	movs	r2, #16
 80053f4:	2100      	movs	r1, #0
 80053f6:	4618      	mov	r0, r3
 80053f8:	f005 fac2 	bl	800a980 <memset>
}
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <_ZN4Prng9next_randEPh>:

void Prng::next_rand(uint8_t *result) {
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
	memcpy(result, this->m_counter, AES_BLOCKLEN);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005414:	2210      	movs	r2, #16
 8005416:	4619      	mov	r1, r3
 8005418:	6838      	ldr	r0, [r7, #0]
 800541a:	f005 fa8d 	bl	800a938 <memcpy>
	AES_ECB_encrypt(&this->m_aes_ctx, result);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6839      	ldr	r1, [r7, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff fe83 	bl	800512e <AES_ECB_encrypt>
	this->increment_counter();
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f804 	bl	8005436 <_ZN4Prng17increment_counterEv>
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <_ZN4Prng17increment_counterEv>:

void Prng::increment_counter() {
 8005436:	b480      	push	{r7}
 8005438:	b085      	sub	sp, #20
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i<AES_BLOCKLEN; i++) {
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	2b0f      	cmp	r3, #15
 8005446:	d815      	bhi.n	8005474 <_ZN4Prng17increment_counterEv+0x3e>
		this->m_counter[i]++;
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	441a      	add	r2, r3
 800544e:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
 8005452:	3201      	adds	r2, #1
 8005454:	b2d1      	uxtb	r1, r2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	4413      	add	r3, r2
 800545a:	460a      	mov	r2, r1
 800545c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
		if (this->m_counter[0] != 0) {
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8005466:	2b00      	cmp	r3, #0
 8005468:	d103      	bne.n	8005472 <_ZN4Prng17increment_counterEv+0x3c>
	for (uint8_t i=0; i<AES_BLOCKLEN; i++) {
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	3301      	adds	r3, #1
 800546e:	73fb      	strb	r3, [r7, #15]
 8005470:	e7e7      	b.n	8005442 <_ZN4Prng17increment_counterEv+0xc>
			return;
 8005472:	bf00      	nop
		}
	}
}
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <_ZN4Prng8rand_intEii>:

// generated a random integer, inclusive of min and max
int Prng::rand_int(int min, int max) {
 800547e:	b5b0      	push	{r4, r5, r7, lr}
 8005480:	b08e      	sub	sp, #56	; 0x38
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	607a      	str	r2, [r7, #4]
	uint8_t rand_val[AES_BLOCKLEN] = {0};
 800548a:	f107 0310 	add.w	r3, r7, #16
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	605a      	str	r2, [r3, #4]
 8005494:	609a      	str	r2, [r3, #8]
 8005496:	60da      	str	r2, [r3, #12]
	int span = max - min + 1;
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	3301      	adds	r3, #1
 80054a0:	633b      	str	r3, [r7, #48]	; 0x30

	bool success = false;
 80054a2:	2300      	movs	r3, #0
 80054a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	while(!success) {
 80054a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d174      	bne.n	800559a <_ZN4Prng8rand_intEii+0x11c>
		this->next_rand(rand_val);
 80054b0:	f107 0310 	add.w	r3, r7, #16
 80054b4:	4619      	mov	r1, r3
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f7ff ffa4 	bl	8005404 <_ZN4Prng9next_randEPh>

		for (uint8_t i=0; i<(AES_BLOCKLEN / 4); i++) {
 80054bc:	2300      	movs	r3, #0
 80054be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80054c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d8ee      	bhi.n	80054a8 <_ZN4Prng8rand_intEii+0x2a>
			uint32_t small_part = rand_val[4*i];
 80054ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80054d4:	4413      	add	r3, r2
 80054d6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80054da:	62bb      	str	r3, [r7, #40]	; 0x28
			small_part |= rand_val[4*i+1] << 8;
 80054dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	3301      	adds	r3, #1
 80054e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80054e8:	4413      	add	r3, r2
 80054ea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80054ee:	021b      	lsls	r3, r3, #8
 80054f0:	461a      	mov	r2, r3
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	4313      	orrs	r3, r2
 80054f6:	62bb      	str	r3, [r7, #40]	; 0x28
			small_part |= rand_val[4*i+2] << 16;
 80054f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	3302      	adds	r3, #2
 8005500:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005504:	4413      	add	r3, r2
 8005506:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800550a:	041b      	lsls	r3, r3, #16
 800550c:	461a      	mov	r2, r3
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	4313      	orrs	r3, r2
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
			small_part |= rand_val[4*i+3] << 24;
 8005514:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	3303      	adds	r3, #3
 800551c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005520:	4413      	add	r3, r2
 8005522:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005526:	061b      	lsls	r3, r3, #24
 8005528:	461a      	mov	r2, r3
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	4313      	orrs	r3, r2
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28

			uint64_t m = span * (0x100000000 / span);
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	461c      	mov	r4, r3
 8005534:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553a:	461a      	mov	r2, r3
 800553c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005540:	f04f 0000 	mov.w	r0, #0
 8005544:	f04f 0101 	mov.w	r1, #1
 8005548:	f7fa feba 	bl	80002c0 <__aeabi_ldivmod>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	fb02 f005 	mul.w	r0, r2, r5
 8005554:	fb04 f103 	mul.w	r1, r4, r3
 8005558:	4401      	add	r1, r0
 800555a:	fba4 3402 	umull	r3, r4, r4, r2
 800555e:	190a      	adds	r2, r1, r4
 8005560:	4614      	mov	r4, r2
 8005562:	e9c7 3408 	strd	r3, r4, [r7, #32]

			if (small_part < m) {
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	4619      	mov	r1, r3
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005572:	42a2      	cmp	r2, r4
 8005574:	bf08      	it	eq
 8005576:	4299      	cmpeq	r1, r3
 8005578:	d209      	bcs.n	800558e <_ZN4Prng8rand_intEii+0x110>
				return (small_part % span) + min;
 800557a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005582:	fb02 f201 	mul.w	r2, r2, r1
 8005586:	1a9a      	subs	r2, r3, r2
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4413      	add	r3, r2
 800558c:	e006      	b.n	800559c <_ZN4Prng8rand_intEii+0x11e>
		for (uint8_t i=0; i<(AES_BLOCKLEN / 4); i++) {
 800558e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005592:	3301      	adds	r3, #1
 8005594:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005598:	e793      	b.n	80054c2 <_ZN4Prng8rand_intEii+0x44>
			}
		}

	}
	return min;
 800559a:	68bb      	ldr	r3, [r7, #8]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3738      	adds	r7, #56	; 0x38
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bdb0      	pop	{r4, r5, r7, pc}

080055a4 <_ZN17ExpressionDisplayC1Ev>:
	ExpressionDisplay() {  };
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 f952 	bl	8005858 <_ZNSt6vectorIP9LineEntrySaIS1_EEC1Ev>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <entropy_cb>:
Console console;
Keyboard kbd;
Gui gui;

// Interface between timer ISR and entropy object
void entropy_cb(void) {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
	ent.interrupt_cb();
 80055c4:	4802      	ldr	r0, [pc, #8]	; (80055d0 <entropy_cb+0x10>)
 80055c6:	f7ff fe19 	bl	80051fc <_ZN7Entropy12interrupt_cbEv>
}
 80055ca:	bf00      	nop
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20000298 	.word	0x20000298

080055d4 <keyboard_cb>:

void keyboard_cb(void) {
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
	//volatile uint32_t time = HAL_GetTick();
	kbd.check_for_changes();
 80055d8:	4802      	ldr	r0, [pc, #8]	; (80055e4 <keyboard_cb+0x10>)
 80055da:	f7fe fd11 	bl	8004000 <_ZN8Keyboard17check_for_changesEv>
}
 80055de:	bf00      	nop
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000374 	.word	0x20000374

080055e8 <_ZN17ExpressionDisplayD1Ev>:
class ExpressionDisplay {
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 f93d 	bl	8005872 <_ZNSt6vectorIP9LineEntrySaIS1_EED1Ev>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <_ZN17ExpressionDisplayaSEOS_>:
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	4611      	mov	r1, r2
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f953 	bl	80058be <_ZNSt6vectorIP9LineEntrySaIS1_EEaSEOS3_>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <_ZN8KeyboardD1Ev>:
	bool pressed();
};

class Keyboard {
 8005622:	b580      	push	{r7, lr}
 8005624:	b082      	sub	sp, #8
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8005630:	4618      	mov	r0, r3
 8005632:	f000 f959 	bl	80058e8 <_ZNSt6vectorI8KeyEventSaIS0_EED1Ev>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4618      	mov	r0, r3
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <_ZN8KeyboardaSEOS_>:
 8005640:	b5b0      	push	{r4, r5, r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	221d      	movs	r2, #29
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2a00      	cmp	r2, #0
 8005652:	db05      	blt.n	8005660 <_ZN8KeyboardaSEOS_+0x20>
 8005654:	7818      	ldrb	r0, [r3, #0]
 8005656:	7008      	strb	r0, [r1, #0]
 8005658:	3101      	adds	r1, #1
 800565a:	3301      	adds	r3, #1
 800565c:	3a01      	subs	r2, #1
 800565e:	e7f7      	b.n	8005650 <_ZN8KeyboardaSEOS_+0x10>
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	f102 0020 	add.w	r0, r2, #32
 8005668:	3320      	adds	r3, #32
 800566a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800566e:	4619      	mov	r1, r3
 8005670:	f005 f962 	bl	800a938 <memcpy>
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	f502 7400 	add.w	r4, r2, #512	; 0x200
 800567c:	f503 7500 	add.w	r5, r3, #512	; 0x200
 8005680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800568a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800568c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005690:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f503 7210 	add.w	r2, r3, #576	; 0x240
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80056a0:	4619      	mov	r1, r3
 80056a2:	4610      	mov	r0, r2
 80056a4:	f000 f946 	bl	8005934 <_ZNSt6vectorI8KeyEventSaIS0_EEaSEOS2_>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080056b4 <main>:

// MAIN
extern "C" int main(void)
{
 80056b4:	b5b0      	push	{r4, r5, r7, lr}
 80056b6:	f5ad 5d9d 	sub.w	sp, sp, #5024	; 0x13a0
 80056ba:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  DEV_Init();
 80056bc:	f7fb f81a 	bl	80006f4 <DEV_Init>

  expression_list = ExpressionDisplay();
 80056c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80056c4:	3b1c      	subs	r3, #28
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff ff6c 	bl	80055a4 <_ZN17ExpressionDisplayC1Ev>
 80056cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80056d0:	3b1c      	subs	r3, #28
 80056d2:	4619      	mov	r1, r3
 80056d4:	4858      	ldr	r0, [pc, #352]	; (8005838 <main+0x184>)
 80056d6:	f7ff ff94 	bl	8005602 <_ZN17ExpressionDisplayaSEOS_>
 80056da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80056de:	3b1c      	subs	r3, #28
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff ff81 	bl	80055e8 <_ZN17ExpressionDisplayD1Ev>
  expression_list.new_line();
 80056e6:	4854      	ldr	r0, [pc, #336]	; (8005838 <main+0x184>)
 80056e8:	f001 f9a4 	bl	8006a34 <_ZN17ExpressionDisplay8new_lineEv>

  ent = Entropy();
 80056ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80056f0:	3b10      	subs	r3, #16
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff fd36 	bl	8005164 <_ZN7EntropyC1Ev>
 80056f8:	4a50      	ldr	r2, [pc, #320]	; (800583c <main+0x188>)
 80056fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80056fe:	3b10      	subs	r3, #16
 8005700:	4610      	mov	r0, r2
 8005702:	4619      	mov	r1, r3
 8005704:	239b      	movs	r3, #155	; 0x9b
 8005706:	461a      	mov	r2, r3
 8005708:	f005 f916 	bl	800a938 <memcpy>
  ent.open();
 800570c:	484b      	ldr	r0, [pc, #300]	; (800583c <main+0x188>)
 800570e:	f7ff fdbe 	bl	800528e <_ZN7Entropy4openEv>

  console = Console();
 8005712:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005716:	3b14      	subs	r3, #20
 8005718:	4618      	mov	r0, r3
 800571a:	f7fa ffa1 	bl	8000660 <_ZN7ConsoleC1Ev>
 800571e:	4a48      	ldr	r2, [pc, #288]	; (8005840 <main+0x18c>)
 8005720:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005724:	3b14      	subs	r3, #20
 8005726:	4614      	mov	r4, r2
 8005728:	461d      	mov	r5, r3
 800572a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800572c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800572e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005736:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800573a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  console.open(USART2);
 800573e:	4941      	ldr	r1, [pc, #260]	; (8005844 <main+0x190>)
 8005740:	483f      	ldr	r0, [pc, #252]	; (8005840 <main+0x18c>)
 8005742:	f7fa ffb3 	bl	80006ac <_ZN7Console4openEP13USART_TypeDef>

  kbd = Keyboard();
 8005746:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800574a:	3b14      	subs	r3, #20
 800574c:	4618      	mov	r0, r3
 800574e:	f7fe fbbd 	bl	8003ecc <_ZN8KeyboardC1Ev>
 8005752:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005756:	3b14      	subs	r3, #20
 8005758:	4619      	mov	r1, r3
 800575a:	483b      	ldr	r0, [pc, #236]	; (8005848 <main+0x194>)
 800575c:	f7ff ff70 	bl	8005640 <_ZN8KeyboardaSEOS_>
 8005760:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005764:	3b14      	subs	r3, #20
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff ff5b 	bl	8005622 <_ZN8KeyboardD1Ev>
  kbd.open();
 800576c:	4836      	ldr	r0, [pc, #216]	; (8005848 <main+0x194>)
 800576e:	f7fe fc01 	bl	8003f74 <_ZN8Keyboard4openEv>

  gui = Gui();
 8005772:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8005776:	3b08      	subs	r3, #8
 8005778:	4618      	mov	r0, r3
 800577a:	f7fb fcf0 	bl	800115e <_ZN3GuiC1Ev>
 800577e:	4a33      	ldr	r2, [pc, #204]	; (800584c <main+0x198>)
 8005780:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8005784:	3b08      	subs	r3, #8
 8005786:	4610      	mov	r0, r2
 8005788:	4619      	mov	r1, r3
 800578a:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 800578e:	461a      	mov	r2, r3
 8005790:	f005 f8d2 	bl	800a938 <memcpy>
  gui.open();
 8005794:	482d      	ldr	r0, [pc, #180]	; (800584c <main+0x198>)
 8005796:	f7fb fd55 	bl	8001244 <_ZN3Gui4openEv>
  gui.update(expression_list);
 800579a:	4927      	ldr	r1, [pc, #156]	; (8005838 <main+0x184>)
 800579c:	482b      	ldr	r0, [pc, #172]	; (800584c <main+0x198>)
 800579e:	f7fb fd6f 	bl	8001280 <_ZN3Gui6updateER17ExpressionDisplay>

  Prng &rng = Prng::get_instance();
 80057a2:	f7ff fdf1 	bl	8005388 <_ZN4Prng12get_instanceEv>
 80057a6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80057aa:	f103 0318 	add.w	r3, r3, #24
 80057ae:	6018      	str	r0, [r3, #0]
  uint8_t seed[32] = {0};	// TODO: seed with real entropy
 80057b0:	f107 0320 	add.w	r3, r7, #32
 80057b4:	3b1c      	subs	r3, #28
 80057b6:	4618      	mov	r0, r3
 80057b8:	2320      	movs	r3, #32
 80057ba:	461a      	mov	r2, r3
 80057bc:	2100      	movs	r1, #0
 80057be:	f005 f8df 	bl	800a980 <memset>
  rng.set_seed(seed);
 80057c2:	f107 0320 	add.w	r3, r7, #32
 80057c6:	3b1c      	subs	r3, #28
 80057c8:	4619      	mov	r1, r3
 80057ca:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80057ce:	f103 0318 	add.w	r3, r3, #24
 80057d2:	6818      	ldr	r0, [r3, #0]
 80057d4:	f7ff fe00 	bl	80053d8 <_ZN4Prng8set_seedEPh>

  KeyEvent evt;
  while(kbd.get_event(&evt)) {
 80057d8:	463b      	mov	r3, r7
 80057da:	4619      	mov	r1, r3
 80057dc:	481a      	ldr	r0, [pc, #104]	; (8005848 <main+0x194>)
 80057de:	f7fe fc5b 	bl	8004098 <_ZN8Keyboard9get_eventEP8KeyEvent>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d000      	beq.n	80057ea <main+0x136>
 80057e8:	e7f6      	b.n	80057d8 <main+0x124>
	  // Drain current list of keyevents
  }

  while (1)
  {
	  bool update = false;
 80057ea:	2300      	movs	r3, #0
 80057ec:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80057f0:	f102 021f 	add.w	r2, r2, #31
 80057f4:	7013      	strb	r3, [r2, #0]
	  while(kbd.get_event(&evt)) {
 80057f6:	463b      	mov	r3, r7
 80057f8:	4619      	mov	r1, r3
 80057fa:	4813      	ldr	r0, [pc, #76]	; (8005848 <main+0x194>)
 80057fc:	f7fe fc4c 	bl	8004098 <_ZN8Keyboard9get_eventEP8KeyEvent>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <main+0x16a>
		  update = true;
 8005806:	2301      	movs	r3, #1
 8005808:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800580c:	f102 021f 	add.w	r2, r2, #31
 8005810:	7013      	strb	r3, [r2, #0]
		  expression_list.key_event(&evt);
 8005812:	463b      	mov	r3, r7
 8005814:	4619      	mov	r1, r3
 8005816:	4808      	ldr	r0, [pc, #32]	; (8005838 <main+0x184>)
 8005818:	f000 fe8e 	bl	8006538 <_ZN17ExpressionDisplay9key_eventEP8KeyEvent>
	  while(kbd.get_event(&evt)) {
 800581c:	e7eb      	b.n	80057f6 <main+0x142>
	  }

	  if (update) {
 800581e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8005822:	f103 031f 	add.w	r3, r3, #31
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0de      	beq.n	80057ea <main+0x136>
		  gui.update(expression_list);
 800582c:	4902      	ldr	r1, [pc, #8]	; (8005838 <main+0x184>)
 800582e:	4807      	ldr	r0, [pc, #28]	; (800584c <main+0x198>)
 8005830:	f7fb fd26 	bl	8001280 <_ZN3Gui6updateER17ExpressionDisplay>
	  }
  }
 8005834:	e7d9      	b.n	80057ea <main+0x136>
 8005836:	bf00      	nop
 8005838:	2000028c 	.word	0x2000028c
 800583c:	20000298 	.word	0x20000298
 8005840:	20000334 	.word	0x20000334
 8005844:	40004400 	.word	0x40004400
 8005848:	20000374 	.word	0x20000374
 800584c:	200005c0 	.word	0x200005c0

08005850 <Error_Handler>:
}

// Handle application errors
void Error_Handler(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005854:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005856:	e7fe      	b.n	8005856 <Error_Handler+0x6>

08005858 <_ZNSt6vectorIP9LineEntrySaIS1_EEC1Ev>:
      vector()
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4618      	mov	r0, r3
 8005864:	f000 f887 	bl	8005976 <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EEC1Ev>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4618      	mov	r0, r3
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <_ZNSt6vectorIP9LineEntrySaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8005872:	b5b0      	push	{r4, r5, r7, lr}
 8005874:	b082      	sub	sp, #8
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681c      	ldr	r4, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4618      	mov	r0, r3
 8005886:	f000 f89d 	bl	80059c4 <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE19_M_get_Tp_allocatorEv>
 800588a:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800588c:	461a      	mov	r2, r3
 800588e:	4629      	mov	r1, r5
 8005890:	4620      	mov	r0, r4
 8005892:	f000 f8a2 	bl	80059da <_ZSt8_DestroyIPP9LineEntryS1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4618      	mov	r0, r3
 800589a:	f000 f879 	bl	8005990 <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EED1Ev>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bdb0      	pop	{r4, r5, r7, pc}

080058a8 <_ZSt4moveIRSt6vectorIP9LineEntrySaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4618      	mov	r0, r3
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <_ZNSt6vectorIP9LineEntrySaIS1_EEaSEOS3_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80058be:	b590      	push	{r4, r7, lr}
 80058c0:	b085      	sub	sp, #20
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 80058c8:	2301      	movs	r3, #1
 80058ca:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 80058cc:	6838      	ldr	r0, [r7, #0]
 80058ce:	f7ff ffeb 	bl	80058a8 <_ZSt4moveIRSt6vectorIP9LineEntrySaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80058d2:	4603      	mov	r3, r0
 80058d4:	4622      	mov	r2, r4
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f88c 	bl	80059f6 <_ZNSt6vectorIP9LineEntrySaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE>
	return *this;
 80058de:	687b      	ldr	r3, [r7, #4]
      }
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd90      	pop	{r4, r7, pc}

080058e8 <_ZNSt6vectorI8KeyEventSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80058e8:	b5b0      	push	{r4, r5, r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681c      	ldr	r4, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fe fcfc 	bl	80042f8 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE19_M_get_Tp_allocatorEv>
 8005900:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005902:	461a      	mov	r2, r3
 8005904:	4629      	mov	r1, r5
 8005906:	4620      	mov	r0, r4
 8005908:	f7fe fd01 	bl	800430e <_ZSt8_DestroyIP8KeyEventS0_EvT_S2_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4618      	mov	r0, r3
 8005910:	f000 f8bb 	bl	8005a8a <_ZNSt12_Vector_baseI8KeyEventSaIS0_EED1Ev>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bdb0      	pop	{r4, r5, r7, pc}

0800591e <_ZSt4moveIRSt6vectorI8KeyEventSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4618      	mov	r0, r3
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <_ZNSt6vectorI8KeyEventSaIS0_EEaSEOS2_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8005934:	b590      	push	{r4, r7, lr}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 800593e:	2301      	movs	r3, #1
 8005940:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8005942:	6838      	ldr	r0, [r7, #0]
 8005944:	f7ff ffeb 	bl	800591e <_ZSt4moveIRSt6vectorI8KeyEventSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8005948:	4603      	mov	r3, r0
 800594a:	4622      	mov	r2, r4
 800594c:	4619      	mov	r1, r3
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f8b5 	bl	8005abe <_ZNSt6vectorI8KeyEventSaIS0_EE14_M_move_assignEOS2_St17integral_constantIbLb1EE>
	return *this;
 8005954:	687b      	ldr	r3, [r7, #4]
      }
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	bd90      	pop	{r4, r7, pc}

0800595e <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f8fc 	bl	8005b64 <_ZNSaIP9LineEntryED1Ev>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EEC1Ev>:
      _Vector_base()
 8005976:	b580      	push	{r7, lr}
 8005978:	b082      	sub	sp, #8
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4618      	mov	r0, r3
 8005982:	f000 f8da 	bl	8005b3a <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE12_Vector_implC1Ev>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6819      	ldr	r1, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80059a0:	461a      	mov	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80059aa:	461a      	mov	r2, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f8e5 	bl	8005b7c <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7ff ffd2 	bl	800595e <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE12_Vector_implD1Ev>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4618      	mov	r0, r3
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <_ZSt8_DestroyIPP9LineEntryS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 f8da 	bl	8005ba2 <_ZSt8_DestroyIPP9LineEntryEvT_S3_>
    }
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <_ZNSt6vectorIP9LineEntrySaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
 80059f6:	b590      	push	{r4, r7, lr}
 80059f8:	b089      	sub	sp, #36	; 0x24
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	f107 031c 	add.w	r3, r7, #28
 8005a08:	4611      	mov	r1, r2
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 f8d6 	bl	8005bbc <_ZNKSt12_Vector_baseIP9LineEntrySaIS1_EE13get_allocatorEv>
 8005a10:	f107 021c 	add.w	r2, r7, #28
 8005a14:	f107 0310 	add.w	r3, r7, #16
 8005a18:	4611      	mov	r1, r2
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 f8df 	bl	8005bde <_ZNSt6vectorIP9LineEntrySaIS1_EEC1ERKS2_>
 8005a20:	f107 031c 	add.w	r3, r7, #28
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 f89d 	bl	8005b64 <_ZNSaIP9LineEntryED1Ev>
	this->_M_impl._M_swap_data(__tmp._M_impl);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f107 0210 	add.w	r2, r7, #16
 8005a30:	4611      	mov	r1, r2
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 f8e2 	bl	8005bfc <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE12_Vector_impl12_M_swap_dataERS4_>
	this->_M_impl._M_swap_data(__x._M_impl);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	4611      	mov	r1, r2
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 f8dc 	bl	8005bfc <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE12_Vector_impl12_M_swap_dataERS4_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff ffbc 	bl	80059c4 <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE19_M_get_Tp_allocatorEv>
 8005a4c:	4604      	mov	r4, r0
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff ffb7 	bl	80059c4 <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE19_M_get_Tp_allocatorEv>
 8005a56:	4603      	mov	r3, r0
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f000 f8ee 	bl	8005c3c <_ZSt15__alloc_on_moveISaIP9LineEntryEEvRT_S4_>
	vector __tmp(get_allocator());
 8005a60:	f107 0310 	add.w	r3, r7, #16
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff ff04 	bl	8005872 <_ZNSt6vectorIP9LineEntrySaIS1_EED1Ev>
      }
 8005a6a:	bf00      	nop
 8005a6c:	3724      	adds	r7, #36	; 0x24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd90      	pop	{r4, r7, pc}

08005a72 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b082      	sub	sp, #8
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f8ec 	bl	8005c58 <_ZNSaI8KeyEventED1Ev>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4618      	mov	r0, r3
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <_ZNSt12_Vector_baseI8KeyEventSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6819      	ldr	r1, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	105b      	asrs	r3, r3, #1
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7fe fda7 	bl	80045fa <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE13_M_deallocateEPS0_j>
		      - this->_M_impl._M_start); }
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7ff ffdf 	bl	8005a72 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE12_Vector_implD1Ev>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <_ZNSt6vectorI8KeyEventSaIS0_EE14_M_move_assignEOS2_St17integral_constantIbLb1EE>:
      _M_move_assign(vector&& __x, std::true_type) noexcept
 8005abe:	b590      	push	{r4, r7, lr}
 8005ac0:	b089      	sub	sp, #36	; 0x24
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	713a      	strb	r2, [r7, #4]
	vector __tmp(get_allocator());
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	f107 031c 	add.w	r3, r7, #28
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 f8cc 	bl	8005c70 <_ZNKSt12_Vector_baseI8KeyEventSaIS0_EE13get_allocatorEv>
 8005ad8:	f107 021c 	add.w	r2, r7, #28
 8005adc:	f107 0310 	add.w	r3, r7, #16
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 f8d5 	bl	8005c92 <_ZNSt6vectorI8KeyEventSaIS0_EEC1ERKS1_>
 8005ae8:	f107 031c 	add.w	r3, r7, #28
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 f8b3 	bl	8005c58 <_ZNSaI8KeyEventED1Ev>
	this->_M_impl._M_swap_data(__tmp._M_impl);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f107 0210 	add.w	r2, r7, #16
 8005af8:	4611      	mov	r1, r2
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 f8d8 	bl	8005cb0 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE12_Vector_impl12_M_swap_dataERS3_>
	this->_M_impl._M_swap_data(__x._M_impl);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	4611      	mov	r1, r2
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 f8d2 	bl	8005cb0 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE12_Vector_impl12_M_swap_dataERS3_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fe fbf2 	bl	80042f8 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE19_M_get_Tp_allocatorEv>
 8005b14:	4604      	mov	r4, r0
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fe fbed 	bl	80042f8 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE19_M_get_Tp_allocatorEv>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	4619      	mov	r1, r3
 8005b22:	4620      	mov	r0, r4
 8005b24:	f000 f8e4 	bl	8005cf0 <_ZSt15__alloc_on_moveISaI8KeyEventEEvRT_S3_>
	vector __tmp(get_allocator());
 8005b28:	f107 0310 	add.w	r3, r7, #16
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fedb 	bl	80058e8 <_ZNSt6vectorI8KeyEventSaIS0_EED1Ev>
      }
 8005b32:	bf00      	nop
 8005b34:	3724      	adds	r7, #36	; 0x24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd90      	pop	{r4, r7, pc}

08005b3a <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b082      	sub	sp, #8
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f8e2 	bl	8005d0c <_ZNSaIP9LineEntryEC1Ev>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	605a      	str	r2, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	609a      	str	r2, [r3, #8]
	{ }
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <_ZNSaIP9LineEntryED1Ev>:
      ~allocator() throw() { }
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f8d9 	bl	8005d24 <_ZN9__gnu_cxx13new_allocatorIP9LineEntryED1Ev>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
	if (__p)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	68b9      	ldr	r1, [r7, #8]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 f8d0 	bl	8005d3a <_ZNSt16allocator_traitsISaIP9LineEntryEE10deallocateERS2_PS1_j>
      }
 8005b9a:	bf00      	nop
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <_ZSt8_DestroyIPP9LineEntryEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005bac:	6839      	ldr	r1, [r7, #0]
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f8d2 	bl	8005d58 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9LineEntryEEvT_S5_>
    }
 8005bb4:	bf00      	nop
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <_ZNKSt12_Vector_baseIP9LineEntrySaIS1_EE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8005bc6:	6838      	ldr	r0, [r7, #0]
 8005bc8:	f000 f8d1 	bl	8005d6e <_ZNKSt12_Vector_baseIP9LineEntrySaIS1_EE19_M_get_Tp_allocatorEv>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f8d7 	bl	8005d84 <_ZNSaIP9LineEntryEC1ERKS1_>
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <_ZNSt6vectorIP9LineEntrySaIS1_EEC1ERKS2_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b082      	sub	sp, #8
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6839      	ldr	r1, [r7, #0]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 f8d7 	bl	8005da0 <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EEC1ERKS2_>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE12_Vector_impl12_M_swap_dataERS4_>:
	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
	  std::swap(_M_start, __x._M_start);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 f8e1 	bl	8005dd4 <_ZSt4swapIPP9LineEntryENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	  std::swap(_M_finish, __x._M_finish);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	1d1a      	adds	r2, r3, #4
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	f000 f8d9 	bl	8005dd4 <_ZSt4swapIPP9LineEntryENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f103 0208 	add.w	r2, r3, #8
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f000 f8d0 	bl	8005dd4 <_ZSt4swapIPP9LineEntryENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	}
 8005c34:	bf00      	nop
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <_ZSt15__alloc_on_moveISaIP9LineEntryEEvRT_S4_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 8005c46:	461a      	mov	r2, r3
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f8ec 	bl	8005e28 <_ZSt18__do_alloc_on_moveISaIP9LineEntryEEvRT_S4_St17integral_constantIbLb1EE>
    }
 8005c50:	bf00      	nop
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <_ZNSaI8KeyEventED1Ev>:
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f8ee 	bl	8005e42 <_ZN9__gnu_cxx13new_allocatorI8KeyEventED1Ev>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <_ZNKSt12_Vector_baseI8KeyEventSaIS0_EE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8005c7a:	6838      	ldr	r0, [r7, #0]
 8005c7c:	f7fe fea0 	bl	80049c0 <_ZNKSt12_Vector_baseI8KeyEventSaIS0_EE19_M_get_Tp_allocatorEv>
 8005c80:	4603      	mov	r3, r0
 8005c82:	4619      	mov	r1, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f8e7 	bl	8005e58 <_ZNSaI8KeyEventEC1ERKS0_>
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <_ZNSt6vectorI8KeyEventSaIS0_EEC1ERKS1_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 f8e7 	bl	8005e74 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EEC1ERKS1_>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE12_Vector_impl12_M_swap_dataERS3_>:
	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
	  std::swap(_M_start, __x._M_start);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 f8f1 	bl	8005ea8 <_ZSt4swapIP8KeyEventENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	  std::swap(_M_finish, __x._M_finish);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	1d1a      	adds	r2, r3, #4
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	f000 f8e9 	bl	8005ea8 <_ZSt4swapIP8KeyEventENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f103 0208 	add.w	r2, r3, #8
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	3308      	adds	r3, #8
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	f000 f8e0 	bl	8005ea8 <_ZSt4swapIP8KeyEventENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	}
 8005ce8:	bf00      	nop
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <_ZSt15__alloc_on_moveISaI8KeyEventEEvRT_S3_>:
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f8fc 	bl	8005efc <_ZSt18__do_alloc_on_moveISaI8KeyEventEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <_ZNSaIP9LineEntryEC1Ev>:
      allocator() throw() { }
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f8fe 	bl	8005f16 <_ZN9__gnu_cxx13new_allocatorIP9LineEntryEC1Ev>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <_ZN9__gnu_cxx13new_allocatorIP9LineEntryED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <_ZNSt16allocator_traitsISaIP9LineEntryEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	68b9      	ldr	r1, [r7, #8]
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 f8ee 	bl	8005f2c <_ZN9__gnu_cxx13new_allocatorIP9LineEntryE10deallocateEPS2_j>
 8005d50:	bf00      	nop
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9LineEntryEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <_ZNKSt12_Vector_baseIP9LineEntrySaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <_ZNSaIP9LineEntryEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005d8e:	6839      	ldr	r1, [r7, #0]
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f8d8 	bl	8005f46 <_ZN9__gnu_cxx13new_allocatorIP9LineEntryEC1ERKS3_>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 f8d5 	bl	8005f5e <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE12_Vector_implC1ERKS2_>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <_ZSt4moveIRPP9LineEntryEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <_ZSt4swapIPP9LineEntryENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff ffed 	bl	8005dbe <_ZSt4moveIRPP9LineEntryEONSt16remove_referenceIT_E4typeEOS5_>
 8005de4:	4603      	mov	r3, r0
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8005dea:	6838      	ldr	r0, [r7, #0]
 8005dec:	f7ff ffe7 	bl	8005dbe <_ZSt4moveIRPP9LineEntryEONSt16remove_referenceIT_E4typeEOS5_>
 8005df0:	4603      	mov	r3, r0
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8005df8:	f107 030c 	add.w	r3, r7, #12
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff ffde 	bl	8005dbe <_ZSt4moveIRPP9LineEntryEONSt16remove_referenceIT_E4typeEOS5_>
 8005e02:	4603      	mov	r3, r0
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	601a      	str	r2, [r3, #0]
    }
 8005e0a:	bf00      	nop
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <_ZSt4moveIRSaIP9LineEntryEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <_ZSt18__do_alloc_on_moveISaIP9LineEntryEEvRT_S4_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8005e34:	68b8      	ldr	r0, [r7, #8]
 8005e36:	f7ff ffec 	bl	8005e12 <_ZSt4moveIRSaIP9LineEntryEEONSt16remove_referenceIT_E4typeEOS5_>
 8005e3a:	bf00      	nop
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <_ZN9__gnu_cxx13new_allocatorI8KeyEventED1Ev>:
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <_ZNSaI8KeyEventEC1ERKS0_>:
      allocator(const allocator& __a) throw()
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005e62:	6839      	ldr	r1, [r7, #0]
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f891 	bl	8005f8c <_ZN9__gnu_cxx13new_allocatorI8KeyEventEC1ERKS2_>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 f88e 	bl	8005fa4 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE12_Vector_implC1ERKS1_>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <_ZSt4moveIRP8KeyEventEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <_ZSt4swapIP8KeyEventENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
    swap(_Tp& __a, _Tp& __b)
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff ffed 	bl	8005e92 <_ZSt4moveIRP8KeyEventEONSt16remove_referenceIT_E4typeEOS4_>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8005ebe:	6838      	ldr	r0, [r7, #0]
 8005ec0:	f7ff ffe7 	bl	8005e92 <_ZSt4moveIRP8KeyEventEONSt16remove_referenceIT_E4typeEOS4_>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8005ecc:	f107 030c 	add.w	r3, r7, #12
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff ffde 	bl	8005e92 <_ZSt4moveIRP8KeyEventEONSt16remove_referenceIT_E4typeEOS4_>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	601a      	str	r2, [r3, #0]
    }
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <_ZSt4moveIRSaI8KeyEventEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <_ZSt18__do_alloc_on_moveISaI8KeyEventEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8005f08:	68b8      	ldr	r0, [r7, #8]
 8005f0a:	f7ff ffec 	bl	8005ee6 <_ZSt4moveIRSaI8KeyEventEEONSt16remove_referenceIT_E4typeEOS4_>
 8005f0e:	bf00      	nop
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <_ZN9__gnu_cxx13new_allocatorIP9LineEntryEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4618      	mov	r0, r3
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <_ZN9__gnu_cxx13new_allocatorIP9LineEntryE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005f38:	68b8      	ldr	r0, [r7, #8]
 8005f3a:	f004 fa6d 	bl	800a418 <_ZdlPv>
      }
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <_ZN9__gnu_cxx13new_allocatorIP9LineEntryEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4618      	mov	r0, r3
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b082      	sub	sp, #8
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 8005f68:	6839      	ldr	r1, [r7, #0]
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff ff0a 	bl	8005d84 <_ZNSaIP9LineEntryEC1ERKS1_>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	605a      	str	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	609a      	str	r2, [r3, #8]
	{ }
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <_ZN9__gnu_cxx13new_allocatorI8KeyEventEC1ERKS2_>:
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <_ZNSt12_Vector_baseI8KeyEventSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 8005fae:	6839      	ldr	r1, [r7, #0]
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff ff51 	bl	8005e58 <_ZNSaI8KeyEventEC1ERKS0_>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	605a      	str	r2, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	609a      	str	r2, [r3, #8]
	{ }
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
}
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d113      	bne.n	800600c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d10e      	bne.n	800600c <_Z41__static_initialization_and_destruction_0ii+0x38>
ExpressionDisplay expression_list;
 8005fee:	4810      	ldr	r0, [pc, #64]	; (8006030 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8005ff0:	f7ff fad8 	bl	80055a4 <_ZN17ExpressionDisplayC1Ev>
Entropy ent;
 8005ff4:	480f      	ldr	r0, [pc, #60]	; (8006034 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8005ff6:	f7ff f8b5 	bl	8005164 <_ZN7EntropyC1Ev>
Console console;
 8005ffa:	480f      	ldr	r0, [pc, #60]	; (8006038 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8005ffc:	f7fa fb30 	bl	8000660 <_ZN7ConsoleC1Ev>
Keyboard kbd;
 8006000:	480e      	ldr	r0, [pc, #56]	; (800603c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8006002:	f7fd ff63 	bl	8003ecc <_ZN8KeyboardC1Ev>
Gui gui;
 8006006:	480e      	ldr	r0, [pc, #56]	; (8006040 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8006008:	f7fb f8a9 	bl	800115e <_ZN3GuiC1Ev>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10a      	bne.n	8006028 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006018:	4293      	cmp	r3, r2
 800601a:	d105      	bne.n	8006028 <_Z41__static_initialization_and_destruction_0ii+0x54>
Keyboard kbd;
 800601c:	4807      	ldr	r0, [pc, #28]	; (800603c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800601e:	f7ff fb00 	bl	8005622 <_ZN8KeyboardD1Ev>
ExpressionDisplay expression_list;
 8006022:	4803      	ldr	r0, [pc, #12]	; (8006030 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8006024:	f7ff fae0 	bl	80055e8 <_ZN17ExpressionDisplayD1Ev>
}
 8006028:	bf00      	nop
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	2000028c 	.word	0x2000028c
 8006034:	20000298 	.word	0x20000298
 8006038:	20000334 	.word	0x20000334
 800603c:	20000374 	.word	0x20000374
 8006040:	200005c0 	.word	0x200005c0

08006044 <_GLOBAL__sub_I_expression_list>:
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
 8006048:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800604c:	2001      	movs	r0, #1
 800604e:	f7ff ffc1 	bl	8005fd4 <_Z41__static_initialization_and_destruction_0ii>
 8006052:	bd80      	pop	{r7, pc}

08006054 <_GLOBAL__sub_D_expression_list>:
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
 8006058:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800605c:	2000      	movs	r0, #0
 800605e:	f7ff ffb9 	bl	8005fd4 <_Z41__static_initialization_and_destruction_0ii>
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800606a:	2300      	movs	r3, #0
 800606c:	607b      	str	r3, [r7, #4]
 800606e:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <HAL_MspInit+0x4c>)
 8006070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006072:	4a0f      	ldr	r2, [pc, #60]	; (80060b0 <HAL_MspInit+0x4c>)
 8006074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006078:	6453      	str	r3, [r2, #68]	; 0x44
 800607a:	4b0d      	ldr	r3, [pc, #52]	; (80060b0 <HAL_MspInit+0x4c>)
 800607c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006082:	607b      	str	r3, [r7, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006086:	2300      	movs	r3, #0
 8006088:	603b      	str	r3, [r7, #0]
 800608a:	4b09      	ldr	r3, [pc, #36]	; (80060b0 <HAL_MspInit+0x4c>)
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	4a08      	ldr	r2, [pc, #32]	; (80060b0 <HAL_MspInit+0x4c>)
 8006090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006094:	6413      	str	r3, [r2, #64]	; 0x40
 8006096:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <HAL_MspInit+0x4c>)
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80060a2:	2007      	movs	r0, #7
 80060a4:	f002 f99c 	bl	80083e0 <HAL_NVIC_SetPriorityGrouping>
}
 80060a8:	bf00      	nop
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40023800 	.word	0x40023800

080060b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08a      	sub	sp, #40	; 0x28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060bc:	f107 0314 	add.w	r3, r7, #20
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	605a      	str	r2, [r3, #4]
 80060c6:	609a      	str	r2, [r3, #8]
 80060c8:	60da      	str	r2, [r3, #12]
 80060ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a19      	ldr	r2, [pc, #100]	; (8006138 <HAL_UART_MspInit+0x84>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d12b      	bne.n	800612e <HAL_UART_MspInit+0x7a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80060d6:	2300      	movs	r3, #0
 80060d8:	613b      	str	r3, [r7, #16]
 80060da:	4b18      	ldr	r3, [pc, #96]	; (800613c <HAL_UART_MspInit+0x88>)
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	4a17      	ldr	r2, [pc, #92]	; (800613c <HAL_UART_MspInit+0x88>)
 80060e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060e4:	6413      	str	r3, [r2, #64]	; 0x40
 80060e6:	4b15      	ldr	r3, [pc, #84]	; (800613c <HAL_UART_MspInit+0x88>)
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ee:	613b      	str	r3, [r7, #16]
 80060f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	4b11      	ldr	r3, [pc, #68]	; (800613c <HAL_UART_MspInit+0x88>)
 80060f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fa:	4a10      	ldr	r2, [pc, #64]	; (800613c <HAL_UART_MspInit+0x88>)
 80060fc:	f043 0301 	orr.w	r3, r3, #1
 8006100:	6313      	str	r3, [r2, #48]	; 0x30
 8006102:	4b0e      	ldr	r3, [pc, #56]	; (800613c <HAL_UART_MspInit+0x88>)
 8006104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 800610e:	230c      	movs	r3, #12
 8006110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006112:	2302      	movs	r3, #2
 8006114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006116:	2300      	movs	r3, #0
 8006118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800611a:	2303      	movs	r3, #3
 800611c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800611e:	2307      	movs	r3, #7
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DEBUG_USART_PORT, &GPIO_InitStruct);
 8006122:	f107 0314 	add.w	r3, r7, #20
 8006126:	4619      	mov	r1, r3
 8006128:	4805      	ldr	r0, [pc, #20]	; (8006140 <HAL_UART_MspInit+0x8c>)
 800612a:	f002 f9a9 	bl	8008480 <HAL_GPIO_Init>
  }

}
 800612e:	bf00      	nop
 8006130:	3728      	adds	r7, #40	; 0x28
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	40004400 	.word	0x40004400
 800613c:	40023800 	.word	0x40023800
 8006140:	40020000 	.word	0x40020000

08006144 <HAL_SPI_MspInit>:
    HAL_GPIO_DeInit(DEBUG_USART_PORT, DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin);
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8006144:	b580      	push	{r7, lr}
 8006146:	b08a      	sub	sp, #40	; 0x28
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800614c:	f107 0314 	add.w	r3, r7, #20
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	605a      	str	r2, [r3, #4]
 8006156:	609a      	str	r2, [r3, #8]
 8006158:	60da      	str	r2, [r3, #12]
 800615a:	611a      	str	r2, [r3, #16]
	if (hspi->Instance==SPI1) {
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a21      	ldr	r2, [pc, #132]	; (80061e8 <HAL_SPI_MspInit+0xa4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d13b      	bne.n	80061de <HAL_SPI_MspInit+0x9a>
		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 8006166:	2300      	movs	r3, #0
 8006168:	613b      	str	r3, [r7, #16]
 800616a:	4b20      	ldr	r3, [pc, #128]	; (80061ec <HAL_SPI_MspInit+0xa8>)
 800616c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616e:	4a1f      	ldr	r2, [pc, #124]	; (80061ec <HAL_SPI_MspInit+0xa8>)
 8006170:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006174:	6453      	str	r3, [r2, #68]	; 0x44
 8006176:	4b1d      	ldr	r3, [pc, #116]	; (80061ec <HAL_SPI_MspInit+0xa8>)
 8006178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800617e:	613b      	str	r3, [r7, #16]
 8006180:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	4b19      	ldr	r3, [pc, #100]	; (80061ec <HAL_SPI_MspInit+0xa8>)
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	4a18      	ldr	r2, [pc, #96]	; (80061ec <HAL_SPI_MspInit+0xa8>)
 800618c:	f043 0301 	orr.w	r3, r3, #1
 8006190:	6313      	str	r3, [r2, #48]	; 0x30
 8006192:	4b16      	ldr	r3, [pc, #88]	; (80061ec <HAL_SPI_MspInit+0xa8>)
 8006194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	68fb      	ldr	r3, [r7, #12]

		GPIO_InitStruct.Pin = EPD_SCK_PIN|EPD_MOSI_PIN;
 800619e:	23a0      	movs	r3, #160	; 0xa0
 80061a0:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061a2:	2302      	movs	r3, #2
 80061a4:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80061a6:	2301      	movs	r3, #1
 80061a8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061aa:	2302      	movs	r3, #2
 80061ac:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80061ae:	2305      	movs	r3, #5
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(EPD_SPI_PORT, &GPIO_InitStruct);
 80061b2:	f107 0314 	add.w	r3, r7, #20
 80061b6:	4619      	mov	r1, r3
 80061b8:	480d      	ldr	r0, [pc, #52]	; (80061f0 <HAL_SPI_MspInit+0xac>)
 80061ba:	f002 f961 	bl	8008480 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = EPD_MISO_PIN;
 80061be:	2340      	movs	r3, #64	; 0x40
 80061c0:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061ca:	2302      	movs	r3, #2
 80061cc:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80061ce:	2305      	movs	r3, #5
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(EPD_SPI_PORT, &GPIO_InitStruct);
 80061d2:	f107 0314 	add.w	r3, r7, #20
 80061d6:	4619      	mov	r1, r3
 80061d8:	4805      	ldr	r0, [pc, #20]	; (80061f0 <HAL_SPI_MspInit+0xac>)
 80061da:	f002 f951 	bl	8008480 <HAL_GPIO_Init>
	}
}
 80061de:	bf00      	nop
 80061e0:	3728      	adds	r7, #40	; 0x28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	40013000 	.word	0x40013000
 80061ec:	40023800 	.word	0x40023800
 80061f0:	40020000 	.word	0x40020000

080061f4 <HAL_TIM_Base_MspInit>:

	HAL_GPIO_DeInit(EPD_SPI_PORT, EPD_SCK_PIN|EPD_MOSI_PIN|EPD_MISO_PIN);
  }
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim) {
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7) {
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a15      	ldr	r2, [pc, #84]	; (8006258 <HAL_TIM_Base_MspInit+0x64>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d10e      	bne.n	8006224 <HAL_TIM_Base_MspInit+0x30>
		__HAL_RCC_TIM7_CLK_ENABLE();
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]
 800620a:	4b14      	ldr	r3, [pc, #80]	; (800625c <HAL_TIM_Base_MspInit+0x68>)
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	4a13      	ldr	r2, [pc, #76]	; (800625c <HAL_TIM_Base_MspInit+0x68>)
 8006210:	f043 0320 	orr.w	r3, r3, #32
 8006214:	6413      	str	r3, [r2, #64]	; 0x40
 8006216:	4b11      	ldr	r3, [pc, #68]	; (800625c <HAL_TIM_Base_MspInit+0x68>)
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	68fb      	ldr	r3, [r7, #12]
	} else if (htim->Instance == TIM4) {
		__HAL_RCC_TIM4_CLK_ENABLE();
	}
}
 8006222:	e012      	b.n	800624a <HAL_TIM_Base_MspInit+0x56>
	} else if (htim->Instance == TIM4) {
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a0d      	ldr	r2, [pc, #52]	; (8006260 <HAL_TIM_Base_MspInit+0x6c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d10d      	bne.n	800624a <HAL_TIM_Base_MspInit+0x56>
		__HAL_RCC_TIM4_CLK_ENABLE();
 800622e:	2300      	movs	r3, #0
 8006230:	60bb      	str	r3, [r7, #8]
 8006232:	4b0a      	ldr	r3, [pc, #40]	; (800625c <HAL_TIM_Base_MspInit+0x68>)
 8006234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006236:	4a09      	ldr	r2, [pc, #36]	; (800625c <HAL_TIM_Base_MspInit+0x68>)
 8006238:	f043 0304 	orr.w	r3, r3, #4
 800623c:	6413      	str	r3, [r2, #64]	; 0x40
 800623e:	4b07      	ldr	r3, [pc, #28]	; (800625c <HAL_TIM_Base_MspInit+0x68>)
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	60bb      	str	r3, [r7, #8]
 8006248:	68bb      	ldr	r3, [r7, #8]
}
 800624a:	bf00      	nop
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	40001400 	.word	0x40001400
 800625c:	40023800 	.word	0x40023800
 8006260:	40000800 	.word	0x40000800

08006264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006264:	b480      	push	{r7}
 8006266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006268:	e7fe      	b.n	8006268 <NMI_Handler+0x4>

0800626a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800626a:	b480      	push	{r7}
 800626c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800626e:	e7fe      	b.n	800626e <HardFault_Handler+0x4>

08006270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006270:	b480      	push	{r7}
 8006272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006274:	e7fe      	b.n	8006274 <MemManage_Handler+0x4>

08006276 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006276:	b480      	push	{r7}
 8006278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800627a:	e7fe      	b.n	800627a <BusFault_Handler+0x4>

0800627c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006280:	e7fe      	b.n	8006280 <UsageFault_Handler+0x4>

08006282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006282:	b480      	push	{r7}
 8006284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006286:	bf00      	nop
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006290:	b480      	push	{r7}
 8006292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006294:	bf00      	nop
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800629e:	b480      	push	{r7}
 80062a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80062a2:	bf00      	nop
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80062b0:	f001 ff62 	bl	8008178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80062b4:	bf00      	nop
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void) {
 80062b8:	b580      	push	{r7, lr}
 80062ba:	af00      	add	r7, sp, #0
	entropy_cb();
 80062bc:	f7ff f980 	bl	80055c0 <entropy_cb>
}
 80062c0:	bf00      	nop
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(TIM4);
 80062c8:	4803      	ldr	r0, [pc, #12]	; (80062d8 <TIM4_IRQHandler+0x14>)
 80062ca:	f003 fabe 	bl	800984a <HAL_TIM_IRQHandler>
	keyboard_cb();
 80062ce:	f7ff f981 	bl	80055d4 <keyboard_cb>
}
 80062d2:	bf00      	nop
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40000800 	.word	0x40000800

080062dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
	return 1;
 80062e0:	2301      	movs	r3, #1
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <_kill>:

int _kill(int pid, int sig)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80062f6:	f004 fad3 	bl	800a8a0 <__errno>
 80062fa:	4602      	mov	r2, r0
 80062fc:	2316      	movs	r3, #22
 80062fe:	6013      	str	r3, [r2, #0]
	return -1;
 8006300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006304:	4618      	mov	r0, r3
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <_exit>:

void _exit (int status)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006314:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7ff ffe7 	bl	80062ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800631e:	e7fe      	b.n	800631e <_exit+0x12>

08006320 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800632c:	2300      	movs	r3, #0
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e00a      	b.n	8006348 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006332:	f3af 8000 	nop.w
 8006336:	4601      	mov	r1, r0
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	60ba      	str	r2, [r7, #8]
 800633e:	b2ca      	uxtb	r2, r1
 8006340:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	3301      	adds	r3, #1
 8006346:	617b      	str	r3, [r7, #20]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	429a      	cmp	r2, r3
 800634e:	dbf0      	blt.n	8006332 <_read+0x12>
	}

return len;
 8006350:	687b      	ldr	r3, [r7, #4]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b086      	sub	sp, #24
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006366:	2300      	movs	r3, #0
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	e009      	b.n	8006380 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	60ba      	str	r2, [r7, #8]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	4618      	mov	r0, r3
 8006376:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	3301      	adds	r3, #1
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	429a      	cmp	r2, r3
 8006386:	dbf1      	blt.n	800636c <_write+0x12>
	}
	return len;
 8006388:	687b      	ldr	r3, [r7, #4]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <_close>:

int _close(int file)
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
	return -1;
 800639a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80063ba:	605a      	str	r2, [r3, #4]
	return 0;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <_isatty>:

int _isatty(int file)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
	return 1;
 80063d2:	2301      	movs	r3, #1
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
	return 0;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
	...

080063fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006404:	4a14      	ldr	r2, [pc, #80]	; (8006458 <_sbrk+0x5c>)
 8006406:	4b15      	ldr	r3, [pc, #84]	; (800645c <_sbrk+0x60>)
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006410:	4b13      	ldr	r3, [pc, #76]	; (8006460 <_sbrk+0x64>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d102      	bne.n	800641e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006418:	4b11      	ldr	r3, [pc, #68]	; (8006460 <_sbrk+0x64>)
 800641a:	4a12      	ldr	r2, [pc, #72]	; (8006464 <_sbrk+0x68>)
 800641c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800641e:	4b10      	ldr	r3, [pc, #64]	; (8006460 <_sbrk+0x64>)
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4413      	add	r3, r2
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	429a      	cmp	r2, r3
 800642a:	d207      	bcs.n	800643c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800642c:	f004 fa38 	bl	800a8a0 <__errno>
 8006430:	4602      	mov	r2, r0
 8006432:	230c      	movs	r3, #12
 8006434:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8006436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800643a:	e009      	b.n	8006450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800643c:	4b08      	ldr	r3, [pc, #32]	; (8006460 <_sbrk+0x64>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006442:	4b07      	ldr	r3, [pc, #28]	; (8006460 <_sbrk+0x64>)
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4413      	add	r3, r2
 800644a:	4a05      	ldr	r2, [pc, #20]	; (8006460 <_sbrk+0x64>)
 800644c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800644e:	68fb      	ldr	r3, [r7, #12]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3718      	adds	r7, #24
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20020000 	.word	0x20020000
 800645c:	00000400 	.word	0x00000400
 8006460:	20001600 	.word	0x20001600
 8006464:	200017f8 	.word	0x200017f8

08006468 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800646c:	4b08      	ldr	r3, [pc, #32]	; (8006490 <SystemInit+0x28>)
 800646e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006472:	4a07      	ldr	r2, [pc, #28]	; (8006490 <SystemInit+0x28>)
 8006474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800647c:	4b04      	ldr	r3, [pc, #16]	; (8006490 <SystemInit+0x28>)
 800647e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006482:	609a      	str	r2, [r3, #8]
#endif
}
 8006484:	bf00      	nop
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	e000ed00 	.word	0xe000ed00

08006494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80064cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006498:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800649a:	e003      	b.n	80064a4 <LoopCopyDataInit>

0800649c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800649c:	4b0c      	ldr	r3, [pc, #48]	; (80064d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800649e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80064a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80064a2:	3104      	adds	r1, #4

080064a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80064a4:	480b      	ldr	r0, [pc, #44]	; (80064d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80064a6:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80064a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80064aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80064ac:	d3f6      	bcc.n	800649c <CopyDataInit>
  ldr  r2, =_sbss
 80064ae:	4a0b      	ldr	r2, [pc, #44]	; (80064dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80064b0:	e002      	b.n	80064b8 <LoopFillZerobss>

080064b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80064b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80064b4:	f842 3b04 	str.w	r3, [r2], #4

080064b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80064b8:	4b09      	ldr	r3, [pc, #36]	; (80064e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80064ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80064bc:	d3f9      	bcc.n	80064b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80064be:	f7ff ffd3 	bl	8006468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80064c2:	f004 fa05 	bl	800a8d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80064c6:	f7ff f8f5 	bl	80056b4 <main>
  bx  lr    
 80064ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80064cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80064d0:	0800d394 	.word	0x0800d394
  ldr  r0, =_sdata
 80064d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80064d8:	2000015c 	.word	0x2000015c
  ldr  r2, =_sbss
 80064dc:	2000015c 	.word	0x2000015c
  ldr  r3, = _ebss
 80064e0:	200017f8 	.word	0x200017f8

080064e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80064e4:	e7fe      	b.n	80064e4 <ADC_IRQHandler>

080064e6 <_ZN9LineEntry10set_resultEb>:
		void set_result(bool result) { this->m_result = result; };
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	460b      	mov	r3, r1
 80064f0:	70fb      	strb	r3, [r7, #3]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	78fa      	ldrb	r2, [r7, #3]
 80064f6:	731a      	strb	r2, [r3, #12]
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <_ZN10ExpressionC1Ev>:
	vector<Token*> m_expr;
	void add_token(Token& token);
	int find_highest_order_op();
	void write_number_to_entry(int num, LineEntry& entry);
public:
	Expression() {};
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4618      	mov	r0, r3
 8006510:	f000 faa8 	bl	8006a64 <_ZNSt6vectorIP5TokenSaIS1_EEC1Ev>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <_ZN9LineEntryD1Ev>:
class LineEntry {
 800651e:	b580      	push	{r7, lr}
 8006520:	b082      	sub	sp, #8
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4618      	mov	r0, r3
 800652a:	f000 fac3 	bl	8006ab4 <_ZNSt6vectorIP6SymbolSaIS1_EED1Ev>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <_ZN17ExpressionDisplay9key_eventEP8KeyEvent>:
#include <assert.h>

#include "Expression.h"
#include "Symbol.h"

void ExpressionDisplay::key_event(KeyEvent* event) {
 8006538:	b590      	push	{r4, r7, lr}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
	if (event->state == KEYSTATE_UP) {
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b01      	cmp	r3, #1
 8006548:	f000 81ec 	beq.w	8006924 <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3ec>
		return;
	}

	switch(event->key) {
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	785b      	ldrb	r3, [r3, #1]
 8006550:	2b19      	cmp	r3, #25
 8006552:	f200 81e9 	bhi.w	8006928 <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f0>
 8006556:	a201      	add	r2, pc, #4	; (adr r2, 800655c <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x24>)
 8006558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655c:	080065c5 	.word	0x080065c5
 8006560:	080065d7 	.word	0x080065d7
 8006564:	080065e9 	.word	0x080065e9
 8006568:	080065fb 	.word	0x080065fb
 800656c:	0800660d 	.word	0x0800660d
 8006570:	0800661f 	.word	0x0800661f
 8006574:	08006631 	.word	0x08006631
 8006578:	08006643 	.word	0x08006643
 800657c:	08006655 	.word	0x08006655
 8006580:	08006667 	.word	0x08006667
 8006584:	08006679 	.word	0x08006679
 8006588:	0800668b 	.word	0x0800668b
 800658c:	0800669d 	.word	0x0800669d
 8006590:	080066af 	.word	0x080066af
 8006594:	080066c1 	.word	0x080066c1
 8006598:	080066d1 	.word	0x080066d1
 800659c:	080066f1 	.word	0x080066f1
 80065a0:	08006711 	.word	0x08006711
 80065a4:	08006731 	.word	0x08006731
 80065a8:	08006761 	.word	0x08006761
 80065ac:	08006791 	.word	0x08006791
 80065b0:	080067c1 	.word	0x080067c1
 80065b4:	08006801 	.word	0x08006801
 80065b8:	08006897 	.word	0x08006897
 80065bc:	0800689f 	.word	0x0800689f
 80065c0:	080068cd 	.word	0x080068cd
	case KEY_0:
		this->add_symbol(Symbols::num(0));
 80065c4:	2000      	movs	r0, #0
 80065c6:	f001 fb63 	bl	8007c90 <_ZN7Symbols3numEi>
 80065ca:	4603      	mov	r3, r0
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fa00 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 80065d4:	e1a9      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_1:
		this->add_symbol(Symbols::num(1));
 80065d6:	2001      	movs	r0, #1
 80065d8:	f001 fb5a 	bl	8007c90 <_ZN7Symbols3numEi>
 80065dc:	4603      	mov	r3, r0
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f9f7 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 80065e6:	e1a0      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_2:
		this->add_symbol(Symbols::num(2));
 80065e8:	2002      	movs	r0, #2
 80065ea:	f001 fb51 	bl	8007c90 <_ZN7Symbols3numEi>
 80065ee:	4603      	mov	r3, r0
 80065f0:	4619      	mov	r1, r3
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f9ee 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 80065f8:	e197      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_3:
		this->add_symbol(Symbols::num(3));
 80065fa:	2003      	movs	r0, #3
 80065fc:	f001 fb48 	bl	8007c90 <_ZN7Symbols3numEi>
 8006600:	4603      	mov	r3, r0
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f9e5 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 800660a:	e18e      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_4:
		this->add_symbol(Symbols::num(4));
 800660c:	2004      	movs	r0, #4
 800660e:	f001 fb3f 	bl	8007c90 <_ZN7Symbols3numEi>
 8006612:	4603      	mov	r3, r0
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f9dc 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 800661c:	e185      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_5:
		this->add_symbol(Symbols::num(5));
 800661e:	2005      	movs	r0, #5
 8006620:	f001 fb36 	bl	8007c90 <_ZN7Symbols3numEi>
 8006624:	4603      	mov	r3, r0
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f9d3 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 800662e:	e17c      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_6:
		this->add_symbol(Symbols::num(6));
 8006630:	2006      	movs	r0, #6
 8006632:	f001 fb2d 	bl	8007c90 <_ZN7Symbols3numEi>
 8006636:	4603      	mov	r3, r0
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f9ca 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 8006640:	e173      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_7:
		this->add_symbol(Symbols::num(7));
 8006642:	2007      	movs	r0, #7
 8006644:	f001 fb24 	bl	8007c90 <_ZN7Symbols3numEi>
 8006648:	4603      	mov	r3, r0
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f9c1 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 8006652:	e16a      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_8:
		this->add_symbol(Symbols::num(8));
 8006654:	2008      	movs	r0, #8
 8006656:	f001 fb1b 	bl	8007c90 <_ZN7Symbols3numEi>
 800665a:	4603      	mov	r3, r0
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f9b8 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 8006664:	e161      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_9:
		this->add_symbol(Symbols::num(9));
 8006666:	2009      	movs	r0, #9
 8006668:	f001 fb12 	bl	8007c90 <_ZN7Symbols3numEi>
 800666c:	4603      	mov	r3, r0
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f9af 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 8006676:	e158      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_PLUS:
		this->add_symbol(Symbols::op(SYMBOL_ADDITION));
 8006678:	2002      	movs	r0, #2
 800667a:	f001 fb23 	bl	8007cc4 <_ZN7Symbols2opE18OperatorSymbolType>
 800667e:	4603      	mov	r3, r0
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f9a6 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 8006688:	e14f      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_MINUS:
		this->add_symbol(Symbols::op(SYMBOL_SUBTRACTION));
 800668a:	2003      	movs	r0, #3
 800668c:	f001 fb1a 	bl	8007cc4 <_ZN7Symbols2opE18OperatorSymbolType>
 8006690:	4603      	mov	r3, r0
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f99d 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 800669a:	e146      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_TIMES:
		this->add_symbol(Symbols::op(SYMBOL_MULTIPLICATION));
 800669c:	2000      	movs	r0, #0
 800669e:	f001 fb11 	bl	8007cc4 <_ZN7Symbols2opE18OperatorSymbolType>
 80066a2:	4603      	mov	r3, r0
 80066a4:	4619      	mov	r1, r3
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f994 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 80066ac:	e13d      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_DIV:
		this->add_symbol(Symbols::op(SYMBOL_DIVISION));
 80066ae:	2001      	movs	r0, #1
 80066b0:	f001 fb08 	bl	8007cc4 <_ZN7Symbols2opE18OperatorSymbolType>
 80066b4:	4603      	mov	r3, r0
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f98b 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 80066be:	e134      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_D:
		this->add_symbol(Symbols::rand());
 80066c0:	f001 fb1a 	bl	8007cf8 <_ZN7Symbols4randEv>
 80066c4:	4603      	mov	r3, r0
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f983 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 80066ce:	e12c      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_D4:
		this->add_symbol(Symbols::rand());
 80066d0:	f001 fb12 	bl	8007cf8 <_ZN7Symbols4randEv>
 80066d4:	4603      	mov	r3, r0
 80066d6:	4619      	mov	r1, r3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f97b 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		this->add_symbol(Symbols::num(4));
 80066de:	2004      	movs	r0, #4
 80066e0:	f001 fad6 	bl	8007c90 <_ZN7Symbols3numEi>
 80066e4:	4603      	mov	r3, r0
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f973 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 80066ee:	e11c      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_D6:
		this->add_symbol(Symbols::rand());
 80066f0:	f001 fb02 	bl	8007cf8 <_ZN7Symbols4randEv>
 80066f4:	4603      	mov	r3, r0
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f96b 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		this->add_symbol(Symbols::num(6));
 80066fe:	2006      	movs	r0, #6
 8006700:	f001 fac6 	bl	8007c90 <_ZN7Symbols3numEi>
 8006704:	4603      	mov	r3, r0
 8006706:	4619      	mov	r1, r3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f963 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 800670e:	e10c      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_D8:
		this->add_symbol(Symbols::rand());
 8006710:	f001 faf2 	bl	8007cf8 <_ZN7Symbols4randEv>
 8006714:	4603      	mov	r3, r0
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f95b 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		this->add_symbol(Symbols::num(8));
 800671e:	2008      	movs	r0, #8
 8006720:	f001 fab6 	bl	8007c90 <_ZN7Symbols3numEi>
 8006724:	4603      	mov	r3, r0
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f953 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 800672e:	e0fc      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_D10:
		this->add_symbol(Symbols::rand());
 8006730:	f001 fae2 	bl	8007cf8 <_ZN7Symbols4randEv>
 8006734:	4603      	mov	r3, r0
 8006736:	4619      	mov	r1, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f94b 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		this->add_symbol(Symbols::num(1));
 800673e:	2001      	movs	r0, #1
 8006740:	f001 faa6 	bl	8007c90 <_ZN7Symbols3numEi>
 8006744:	4603      	mov	r3, r0
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f943 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		this->add_symbol(Symbols::num(0));
 800674e:	2000      	movs	r0, #0
 8006750:	f001 fa9e 	bl	8007c90 <_ZN7Symbols3numEi>
 8006754:	4603      	mov	r3, r0
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f93b 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 800675e:	e0e4      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_D12:
		this->add_symbol(Symbols::rand());
 8006760:	f001 faca 	bl	8007cf8 <_ZN7Symbols4randEv>
 8006764:	4603      	mov	r3, r0
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f933 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		this->add_symbol(Symbols::num(1));
 800676e:	2001      	movs	r0, #1
 8006770:	f001 fa8e 	bl	8007c90 <_ZN7Symbols3numEi>
 8006774:	4603      	mov	r3, r0
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f92b 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		this->add_symbol(Symbols::num(2));
 800677e:	2002      	movs	r0, #2
 8006780:	f001 fa86 	bl	8007c90 <_ZN7Symbols3numEi>
 8006784:	4603      	mov	r3, r0
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f923 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 800678e:	e0cc      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_D20:
		this->add_symbol(Symbols::rand());
 8006790:	f001 fab2 	bl	8007cf8 <_ZN7Symbols4randEv>
 8006794:	4603      	mov	r3, r0
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f91b 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		this->add_symbol(Symbols::num(2));
 800679e:	2002      	movs	r0, #2
 80067a0:	f001 fa76 	bl	8007c90 <_ZN7Symbols3numEi>
 80067a4:	4603      	mov	r3, r0
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f913 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		this->add_symbol(Symbols::num(0));
 80067ae:	2000      	movs	r0, #0
 80067b0:	f001 fa6e 	bl	8007c90 <_ZN7Symbols3numEi>
 80067b4:	4603      	mov	r3, r0
 80067b6:	4619      	mov	r1, r3
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f90b 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 80067be:	e0b4      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_D100:
		this->add_symbol(Symbols::rand());
 80067c0:	f001 fa9a 	bl	8007cf8 <_ZN7Symbols4randEv>
 80067c4:	4603      	mov	r3, r0
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f903 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		this->add_symbol(Symbols::num(1));
 80067ce:	2001      	movs	r0, #1
 80067d0:	f001 fa5e 	bl	8007c90 <_ZN7Symbols3numEi>
 80067d4:	4603      	mov	r3, r0
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f8fb 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		this->add_symbol(Symbols::num(0));
 80067de:	2000      	movs	r0, #0
 80067e0:	f001 fa56 	bl	8007c90 <_ZN7Symbols3numEi>
 80067e4:	4603      	mov	r3, r0
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f8f3 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		this->add_symbol(Symbols::num(0));
 80067ee:	2000      	movs	r0, #0
 80067f0:	f001 fa4e 	bl	8007c90 <_ZN7Symbols3numEi>
 80067f4:	4603      	mov	r3, r0
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f8eb 	bl	80069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>
		break;
 80067fe:	e094      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_ENTER: {
		LineEntry *eval_line = this->m_stack.back();
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4618      	mov	r0, r3
 8006804:	f000 f93b 	bl	8006a7e <_ZNSt6vectorIP9LineEntrySaIS1_EE4backEv>
 8006808:	4603      	mov	r3, r0
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	617b      	str	r3, [r7, #20]
		if (eval_line->size() > 0) {
 800680e:	6978      	ldr	r0, [r7, #20]
 8006810:	f000 fe17 	bl	8007442 <_ZN9LineEntry4sizeEv>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	bfcc      	ite	gt
 800681a:	2301      	movgt	r3, #1
 800681c:	2300      	movle	r3, #0
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d007      	beq.n	8006834 <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x2fc>
			this->new_line();
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f905 	bl	8006a34 <_ZN17ExpressionDisplay8new_lineEv>
			this->eval_expression(eval_line);
 800682a:	6979      	ldr	r1, [r7, #20]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f87f 	bl	8006930 <_ZN17ExpressionDisplay15eval_expressionEP9LineEntry>
					break;
				}
			}
			this->eval_expression(eval_line);
		}
		break;
 8006832:	e07a      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
			for (int i = this->m_stack.size(); i>0; i--) {
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4618      	mov	r0, r3
 8006838:	f7fa fe90 	bl	800155c <_ZNKSt6vectorIP9LineEntrySaIS1_EE4sizeEv>
 800683c:	4603      	mov	r3, r0
 800683e:	613b      	str	r3, [r7, #16]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	dd22      	ble.n	800688c <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x354>
				eval_line = this->m_stack[(i-1)];
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	3b01      	subs	r3, #1
 800684c:	4619      	mov	r1, r3
 800684e:	4610      	mov	r0, r2
 8006850:	f7fa fe95 	bl	800157e <_ZNSt6vectorIP9LineEntrySaIS1_EEixEj>
 8006854:	4603      	mov	r3, r0
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	617b      	str	r3, [r7, #20]
				if (eval_line->size() > 0 && !eval_line->is_result()) {
 800685a:	6978      	ldr	r0, [r7, #20]
 800685c:	f000 fdf1 	bl	8007442 <_ZN9LineEntry4sizeEv>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	dd0a      	ble.n	800687c <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x344>
 8006866:	6978      	ldr	r0, [r7, #20]
 8006868:	f7fa fc4e 	bl	8001108 <_ZN9LineEntry9is_resultEv>
 800686c:	4603      	mov	r3, r0
 800686e:	f083 0301 	eor.w	r3, r3, #1
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x344>
 8006878:	2301      	movs	r3, #1
 800687a:	e000      	b.n	800687e <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x346>
 800687c:	2300      	movs	r3, #0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d103      	bne.n	800688a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x352>
			for (int i = this->m_stack.size(); i>0; i--) {
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	3b01      	subs	r3, #1
 8006886:	613b      	str	r3, [r7, #16]
 8006888:	e7da      	b.n	8006840 <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x308>
					break;
 800688a:	bf00      	nop
			this->eval_expression(eval_line);
 800688c:	6979      	ldr	r1, [r7, #20]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f84e 	bl	8006930 <_ZN17ExpressionDisplay15eval_expressionEP9LineEntry>
		break;
 8006894:	e049      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	}

	case KEY_BACKSPACE:
		this->remove_last_symbol();
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f8af 	bl	80069fa <_ZN17ExpressionDisplay18remove_last_symbolEv>
		break;
 800689c:	e045      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_CLEARLINE:
		delete this->m_stack.back();
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 f8ec 	bl	8006a7e <_ZNSt6vectorIP9LineEntrySaIS1_EE4backEv>
 80068a6:	4603      	mov	r3, r0
 80068a8:	681c      	ldr	r4, [r3, #0]
 80068aa:	2c00      	cmp	r4, #0
 80068ac:	d006      	beq.n	80068bc <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x384>
 80068ae:	4620      	mov	r0, r4
 80068b0:	f7ff fe35 	bl	800651e <_ZN9LineEntryD1Ev>
 80068b4:	2110      	movs	r1, #16
 80068b6:	4620      	mov	r0, r4
 80068b8:	f003 fd83 	bl	800a3c2 <_ZdlPvj>
		this->m_stack.pop_back();
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 f913 	bl	8006aea <_ZNSt6vectorIP9LineEntrySaIS1_EE8pop_backEv>
		this->new_line();
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f8b5 	bl	8006a34 <_ZN17ExpressionDisplay8new_lineEv>
		break;
 80068ca:	e02e      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
	case KEY_CLEARALL:
		for (uint16_t idx=0; idx<this->m_stack.size(); idx++) {
 80068cc:	2300      	movs	r3, #0
 80068ce:	81fb      	strh	r3, [r7, #14]
 80068d0:	89fc      	ldrh	r4, [r7, #14]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fa fe41 	bl	800155c <_ZNKSt6vectorIP9LineEntrySaIS1_EE4sizeEv>
 80068da:	4603      	mov	r3, r0
 80068dc:	429c      	cmp	r4, r3
 80068de:	bf34      	ite	cc
 80068e0:	2301      	movcc	r3, #1
 80068e2:	2300      	movcs	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d014      	beq.n	8006914 <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3dc>
			delete this->m_stack[idx];
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	89fa      	ldrh	r2, [r7, #14]
 80068ee:	4611      	mov	r1, r2
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7fa fe44 	bl	800157e <_ZNSt6vectorIP9LineEntrySaIS1_EEixEj>
 80068f6:	4603      	mov	r3, r0
 80068f8:	681c      	ldr	r4, [r3, #0]
 80068fa:	2c00      	cmp	r4, #0
 80068fc:	d006      	beq.n	800690c <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3d4>
 80068fe:	4620      	mov	r0, r4
 8006900:	f7ff fe0d 	bl	800651e <_ZN9LineEntryD1Ev>
 8006904:	2110      	movs	r1, #16
 8006906:	4620      	mov	r0, r4
 8006908:	f003 fd5b 	bl	800a3c2 <_ZdlPvj>
		for (uint16_t idx=0; idx<this->m_stack.size(); idx++) {
 800690c:	89fb      	ldrh	r3, [r7, #14]
 800690e:	3301      	adds	r3, #1
 8006910:	81fb      	strh	r3, [r7, #14]
 8006912:	e7dd      	b.n	80068d0 <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x398>
		}
		this->m_stack.clear();
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4618      	mov	r0, r3
 8006918:	f000 f8fb 	bl	8006b12 <_ZNSt6vectorIP9LineEntrySaIS1_EE5clearEv>
		this->new_line();
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f889 	bl	8006a34 <_ZN17ExpressionDisplay8new_lineEv>
		break;
 8006922:	e002      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>
		return;
 8006924:	bf00      	nop
 8006926:	e000      	b.n	800692a <_ZN17ExpressionDisplay9key_eventEP8KeyEvent+0x3f2>

	default:
		// TODO: ERROR
		break;
 8006928:	bf00      	nop
	}
}
 800692a:	371c      	adds	r7, #28
 800692c:	46bd      	mov	sp, r7
 800692e:	bd90      	pop	{r4, r7, pc}

08006930 <_ZN17ExpressionDisplay15eval_expressionEP9LineEntry>:

void ExpressionDisplay::eval_expression(LineEntry *line) {
 8006930:	b590      	push	{r4, r7, lr}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
	Expression *expr = new Expression();
 800693a:	200c      	movs	r0, #12
 800693c:	f003 fd43 	bl	800a3c6 <_Znwj>
 8006940:	4603      	mov	r3, r0
 8006942:	461c      	mov	r4, r3
 8006944:	4620      	mov	r0, r4
 8006946:	f7ff fddd 	bl	8006504 <_ZN10ExpressionC1Ev>
 800694a:	60fc      	str	r4, [r7, #12]
	expr->convert_from_entry(*line);
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f7fb ffb6 	bl	80028c0 <_ZN10Expression18convert_from_entryER9LineEntry>

	if (expr->can_eval()) {
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f7fb fe10 	bl	800257a <_ZN10Expression8can_evalEv>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d024      	beq.n	80069aa <_ZN17ExpressionDisplay15eval_expressionEP9LineEntry+0x7a>
		bool success = expr->eval();
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f7fb fe75 	bl	8002650 <_ZN10Expression4evalEv>
 8006966:	4603      	mov	r3, r0
 8006968:	72fb      	strb	r3, [r7, #11]
		assert(success);
 800696a:	7afb      	ldrb	r3, [r7, #11]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d105      	bne.n	800697c <_ZN17ExpressionDisplay15eval_expressionEP9LineEntry+0x4c>
 8006970:	4b15      	ldr	r3, [pc, #84]	; (80069c8 <_ZN17ExpressionDisplay15eval_expressionEP9LineEntry+0x98>)
 8006972:	4a16      	ldr	r2, [pc, #88]	; (80069cc <_ZN17ExpressionDisplay15eval_expressionEP9LineEntry+0x9c>)
 8006974:	2190      	movs	r1, #144	; 0x90
 8006976:	4816      	ldr	r0, [pc, #88]	; (80069d0 <_ZN17ExpressionDisplay15eval_expressionEP9LineEntry+0xa0>)
 8006978:	f003 ff74 	bl	800a864 <__assert_func>
		//this->new_line();
		expr->write_to_entry(*(this->m_stack.back()));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4618      	mov	r0, r3
 8006980:	f000 f87d 	bl	8006a7e <_ZNSt6vectorIP9LineEntrySaIS1_EE4backEv>
 8006984:	4603      	mov	r3, r0
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4619      	mov	r1, r3
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7fc f8ae 	bl	8002aec <_ZN10Expression14write_to_entryER9LineEntry>
		this->m_stack.back()->set_result(true);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4618      	mov	r0, r3
 8006994:	f000 f873 	bl	8006a7e <_ZNSt6vectorIP9LineEntrySaIS1_EE4backEv>
 8006998:	4603      	mov	r3, r0
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2101      	movs	r1, #1
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff fda1 	bl	80064e6 <_ZN9LineEntry10set_resultEb>
		this->new_line();
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f845 	bl	8006a34 <_ZN17ExpressionDisplay8new_lineEv>
	} else {
		// TODO: Display an error somehow?
	}

	delete expr;
 80069aa:	68fc      	ldr	r4, [r7, #12]
 80069ac:	2c00      	cmp	r4, #0
 80069ae:	d006      	beq.n	80069be <_ZN17ExpressionDisplay15eval_expressionEP9LineEntry+0x8e>
 80069b0:	4620      	mov	r0, r4
 80069b2:	f7fb fdb0 	bl	8002516 <_ZN10ExpressionD1Ev>
 80069b6:	210c      	movs	r1, #12
 80069b8:	4620      	mov	r0, r4
 80069ba:	f003 fd02 	bl	800a3c2 <_ZdlPvj>
}
 80069be:	bf00      	nop
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd90      	pop	{r4, r7, pc}
 80069c6:	bf00      	nop
 80069c8:	0800bb88 	.word	0x0800bb88
 80069cc:	0800d210 	.word	0x0800d210
 80069d0:	0800bb90 	.word	0x0800bb90

080069d4 <_ZN17ExpressionDisplay10add_symbolER6Symbol>:

void ExpressionDisplay::add_symbol(Symbol& new_symbol) {
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
	this->m_stack.back()->add_symbol(new_symbol);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 f84c 	bl	8006a7e <_ZNSt6vectorIP9LineEntrySaIS1_EE4backEv>
 80069e6:	4603      	mov	r3, r0
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fce9 	bl	80073c4 <_ZN9LineEntry10add_symbolER6Symbol>
}
 80069f2:	bf00      	nop
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <_ZN17ExpressionDisplay18remove_last_symbolEv>:

void ExpressionDisplay::remove_last_symbol() {
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
	LineEntry *last_line = this->m_stack.back();
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 f83a 	bl	8006a7e <_ZNSt6vectorIP9LineEntrySaIS1_EE4backEv>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	60fb      	str	r3, [r7, #12]
	if (last_line->size() > 0) {
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 fd16 	bl	8007442 <_ZN9LineEntry4sizeEv>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	bfcc      	ite	gt
 8006a1c:	2301      	movgt	r3, #1
 8006a1e:	2300      	movle	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <_ZN17ExpressionDisplay18remove_last_symbolEv+0x32>
		last_line->remove_last_symbol();
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 fd57 	bl	80074da <_ZN9LineEntry18remove_last_symbolEv>
	}
}
 8006a2c:	bf00      	nop
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <_ZN17ExpressionDisplay8new_lineEv>:

void ExpressionDisplay::new_line() {
 8006a34:	b5b0      	push	{r4, r5, r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
	this->m_stack.push_back(new LineEntry());
 8006a3c:	687d      	ldr	r5, [r7, #4]
 8006a3e:	2010      	movs	r0, #16
 8006a40:	f003 fcc1 	bl	800a3c6 <_Znwj>
 8006a44:	4603      	mov	r3, r0
 8006a46:	461c      	mov	r4, r3
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f000 fcab 	bl	80073a4 <_ZN9LineEntryC1Ev>
 8006a4e:	60fc      	str	r4, [r7, #12]
 8006a50:	f107 030c 	add.w	r3, r7, #12
 8006a54:	4619      	mov	r1, r3
 8006a56:	4628      	mov	r0, r5
 8006a58:	f000 f874 	bl	8006b44 <_ZNSt6vectorIP9LineEntrySaIS1_EE9push_backEOS1_>
}
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bdb0      	pop	{r4, r5, r7, pc}

08006a64 <_ZNSt6vectorIP5TokenSaIS1_EEC1Ev>:
      vector()
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 f879 	bl	8006b66 <_ZNSt12_Vector_baseIP5TokenSaIS1_EEC1Ev>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <_ZNSt6vectorIP9LineEntrySaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b084      	sub	sp, #16
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f87a 	bl	8006b80 <_ZNSt6vectorIP9LineEntrySaIS1_EE3endEv>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	f107 030c 	add.w	r3, r7, #12
 8006a94:	2101      	movs	r1, #1
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 f883 	bl	8006ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPP9LineEntrySt6vectorIS2_SaIS2_EEEmiEi>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	60bb      	str	r3, [r7, #8]
 8006aa0:	f107 0308 	add.w	r3, r7, #8
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 f895 	bl	8006bd4 <_ZNK9__gnu_cxx17__normal_iteratorIPP9LineEntrySt6vectorIS2_SaIS2_EEEdeEv>
 8006aaa:	4603      	mov	r3, r0
      }
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <_ZNSt6vectorIP6SymbolSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8006ab4:	b5b0      	push	{r4, r5, r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681c      	ldr	r4, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 f8b6 	bl	8006c38 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE19_M_get_Tp_allocatorEv>
 8006acc:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006ace:	461a      	mov	r2, r3
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f000 f8bb 	bl	8006c4e <_ZSt8_DestroyIPP6SymbolS1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 f892 	bl	8006c04 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EED1Ev>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bdb0      	pop	{r4, r5, r7, pc}

08006aea <_ZNSt6vectorIP9LineEntrySaIS1_EE8pop_backEv>:
      pop_back() _GLIBCXX_NOEXCEPT
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
	--this->_M_impl._M_finish;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	1f1a      	subs	r2, r3, #4
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	605a      	str	r2, [r3, #4]
	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	4619      	mov	r1, r3
 8006b04:	4610      	mov	r0, r2
 8006b06:	f000 f8b0 	bl	8006c6a <_ZNSt16allocator_traitsISaIP9LineEntryEE7destroyIS1_EEvRS2_PT_>
      }
 8006b0a:	bf00      	nop
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <_ZNSt6vectorIP9LineEntrySaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b082      	sub	sp, #8
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f8af 	bl	8006c84 <_ZNSt6vectorIP9LineEntrySaIS1_EE15_M_erase_at_endEPS1_>
 8006b26:	bf00      	nop
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <_ZSt4moveIRP9LineEntryEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <_ZNSt6vectorIP9LineEntrySaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8006b4e:	6838      	ldr	r0, [r7, #0]
 8006b50:	f7ff ffed 	bl	8006b2e <_ZSt4moveIRP9LineEntryEONSt16remove_referenceIT_E4typeEOS4_>
 8006b54:	4603      	mov	r3, r0
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f8b6 	bl	8006cca <_ZNSt6vectorIP9LineEntrySaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8006b5e:	bf00      	nop
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <_ZNSt12_Vector_baseIP5TokenSaIS1_EEC1Ev>:
      _Vector_base()
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 f8d8 	bl	8006d26 <_ZNSt12_Vector_baseIP5TokenSaIS1_EE12_Vector_implC1Ev>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <_ZNSt6vectorIP9LineEntrySaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	1d1a      	adds	r2, r3, #4
 8006b8c:	f107 030c 	add.w	r3, r7, #12
 8006b90:	4611      	mov	r1, r2
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 f8dc 	bl	8006d50 <_ZN9__gnu_cxx17__normal_iteratorIPP9LineEntrySt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPP9LineEntrySt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	425b      	negs	r3, r3
 8006bb6:	4413      	add	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	f107 020c 	add.w	r2, r7, #12
 8006bbe:	f107 0308 	add.w	r3, r7, #8
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 f8c3 	bl	8006d50 <_ZN9__gnu_cxx17__normal_iteratorIPP9LineEntrySt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <_ZNK9__gnu_cxx17__normal_iteratorIPP9LineEntrySt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4618      	mov	r0, r3
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f8bb 	bl	8006d70 <_ZNSaIP6SymbolED1Ev>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6819      	ldr	r1, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8006c14:	461a      	mov	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8006c1e:	461a      	mov	r2, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f8b1 	bl	8006d88 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff ffdf 	bl	8006bec <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE12_Vector_implD1Ev>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4618      	mov	r0, r3
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <_ZSt8_DestroyIPP6SymbolS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8006c5a:	68b9      	ldr	r1, [r7, #8]
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 f8a6 	bl	8006dae <_ZSt8_DestroyIPP6SymbolEvT_S3_>
    }
 8006c62:	bf00      	nop
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <_ZNSt16allocator_traitsISaIP9LineEntryEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f8a6 	bl	8006dc8 <_ZN9__gnu_cxx13new_allocatorIP9LineEntryE7destroyIS2_EEvPT_>
 8006c7c:	bf00      	nop
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <_ZNSt6vectorIP9LineEntrySaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8006c84:	b590      	push	{r4, r7, lr}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685c      	ldr	r4, [r3, #4]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fe fe95 	bl	80059c4 <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE19_M_get_Tp_allocatorEv>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	6838      	ldr	r0, [r7, #0]
 8006ca2:	f7fe fe9a 	bl	80059da <_ZSt8_DestroyIPP9LineEntryS1_EvT_S3_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	605a      	str	r2, [r3, #4]
      }
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd90      	pop	{r4, r7, pc}

08006cb4 <_ZSt7forwardIP9LineEntryEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <_ZNSt6vectorIP9LineEntrySaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8006cca:	b5b0      	push	{r4, r5, r7, lr}
 8006ccc:	b082      	sub	sp, #8
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d011      	beq.n	8006d04 <_ZNSt6vectorIP9LineEntrySaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8006ce0:	687c      	ldr	r4, [r7, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685d      	ldr	r5, [r3, #4]
 8006ce6:	6838      	ldr	r0, [r7, #0]
 8006ce8:	f7ff ffe4 	bl	8006cb4 <_ZSt7forwardIP9LineEntryEOT_RNSt16remove_referenceIS2_E4typeE>
 8006cec:	4603      	mov	r3, r0
 8006cee:	461a      	mov	r2, r3
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f000 f873 	bl	8006dde <_ZNSt16allocator_traitsISaIP9LineEntryEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	1d1a      	adds	r2, r3, #4
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	605a      	str	r2, [r3, #4]
      }
 8006d02:	e00c      	b.n	8006d1e <_ZNSt6vectorIP9LineEntrySaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7ff ff3b 	bl	8006b80 <_ZNSt6vectorIP9LineEntrySaIS1_EE3endEv>
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	6838      	ldr	r0, [r7, #0]
 8006d0e:	f7ff ffd1 	bl	8006cb4 <_ZSt7forwardIP9LineEntryEOT_RNSt16remove_referenceIS2_E4typeE>
 8006d12:	4603      	mov	r3, r0
 8006d14:	461a      	mov	r2, r3
 8006d16:	4621      	mov	r1, r4
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f873 	bl	8006e04 <_ZNSt6vectorIP9LineEntrySaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8006d1e:	bf00      	nop
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bdb0      	pop	{r4, r5, r7, pc}

08006d26 <_ZNSt12_Vector_baseIP5TokenSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b082      	sub	sp, #8
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f8f4 	bl	8006f1c <_ZNSaIP5TokenEC1Ev>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	605a      	str	r2, [r3, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	609a      	str	r2, [r3, #8]
	{ }
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <_ZN9__gnu_cxx17__normal_iteratorIPP9LineEntrySt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <_ZNSaIP6SymbolED1Ev>:
      ~allocator() throw() { }
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f8db 	bl	8006f34 <_ZN9__gnu_cxx13new_allocatorIP6SymbolED1Ev>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
	if (__p)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d005      	beq.n	8006da6 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	68b9      	ldr	r1, [r7, #8]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 f8d2 	bl	8006f4a <_ZNSt16allocator_traitsISaIP6SymbolEE10deallocateERS2_PS1_j>
      }
 8006da6:	bf00      	nop
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <_ZSt8_DestroyIPP6SymbolEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f8d4 	bl	8006f68 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6SymbolEEvT_S5_>
    }
 8006dc0:	bf00      	nop
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <_ZN9__gnu_cxx13new_allocatorIP9LineEntryE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <_ZNSt16allocator_traitsISaIP9LineEntryEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	60f8      	str	r0, [r7, #12]
 8006de6:	60b9      	str	r1, [r7, #8]
 8006de8:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7ff ff62 	bl	8006cb4 <_ZSt7forwardIP9LineEntryEOT_RNSt16remove_referenceIS2_E4typeE>
 8006df0:	4603      	mov	r3, r0
 8006df2:	461a      	mov	r2, r3
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 f8c1 	bl	8006f7e <_ZN9__gnu_cxx13new_allocatorIP9LineEntryE9constructIS2_JS2_EEEvPT_DpOT0_>
 8006dfc:	bf00      	nop
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <_ZNSt6vectorIP9LineEntrySaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8006e04:	b5b0      	push	{r4, r5, r7, lr}
 8006e06:	b08a      	sub	sp, #40	; 0x28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8006e10:	4a41      	ldr	r2, [pc, #260]	; (8006f18 <_ZNSt6vectorIP9LineEntrySaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 8006e12:	2101      	movs	r1, #1
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 f8ca 	bl	8006fae <_ZNKSt6vectorIP9LineEntrySaIS1_EE12_M_check_lenEjPKc>
 8006e1a:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 f90e 	bl	800703e <_ZNSt6vectorIP9LineEntrySaIS1_EE5beginEv>
 8006e22:	4603      	mov	r3, r0
 8006e24:	617b      	str	r3, [r7, #20]
 8006e26:	f107 0214 	add.w	r2, r7, #20
 8006e2a:	f107 0308 	add.w	r3, r7, #8
 8006e2e:	4611      	mov	r1, r2
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 f914 	bl	800705e <_ZN9__gnu_cxxmiIPP9LineEntrySt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8006e36:	4603      	mov	r3, r0
 8006e38:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 f923 	bl	800708a <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE11_M_allocateEj>
 8006e44:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8006e4a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	18d5      	adds	r5, r2, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff ff2d 	bl	8006cb4 <_ZSt7forwardIP9LineEntryEOT_RNSt16remove_referenceIS2_E4typeE>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	4629      	mov	r1, r5
 8006e60:	4620      	mov	r0, r4
 8006e62:	f7ff ffbc 	bl	8006dde <_ZNSt16allocator_traitsISaIP9LineEntryEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8006e66:	2300      	movs	r3, #0
 8006e68:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681c      	ldr	r4, [r3, #0]
 8006e6e:	f107 0308 	add.w	r3, r7, #8
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 f91d 	bl	80070b2 <_ZNK9__gnu_cxx17__normal_iteratorIPP9LineEntrySt6vectorIS2_SaIS2_EEE4baseEv>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe fda0 	bl	80059c4 <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE19_M_get_Tp_allocatorEv>
 8006e84:	4603      	mov	r3, r0
	  __new_finish
 8006e86:	69fa      	ldr	r2, [r7, #28]
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f000 f91c 	bl	80070c8 <_ZSt34__uninitialized_move_if_noexcept_aIPP9LineEntryS2_SaIS1_EET0_T_S5_S4_RT1_>
 8006e90:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	3304      	adds	r3, #4
 8006e96:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 8006e98:	f107 0308 	add.w	r3, r7, #8
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 f908 	bl	80070b2 <_ZNK9__gnu_cxx17__normal_iteratorIPP9LineEntrySt6vectorIS2_SaIS2_EEE4baseEv>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	681c      	ldr	r4, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fe fd89 	bl	80059c4 <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE19_M_get_Tp_allocatorEv>
 8006eb2:	4603      	mov	r3, r0
	  __new_finish
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f000 f905 	bl	80070c8 <_ZSt34__uninitialized_move_if_noexcept_aIPP9LineEntryS2_SaIS1_EET0_T_S5_S4_RT1_>
 8006ebe:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681c      	ldr	r4, [r3, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fe fd7a 	bl	80059c4 <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE19_M_get_Tp_allocatorEv>
 8006ed0:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f7fe fd7f 	bl	80059da <_ZSt8_DestroyIPP9LineEntryS1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	f7fe fe43 	bl	8005b7c <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	69ba      	ldr	r2, [r7, #24]
 8006f00:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	69fa      	ldr	r2, [r7, #28]
 8006f08:	441a      	add	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	609a      	str	r2, [r3, #8]
    }
 8006f0e:	bf00      	nop
 8006f10:	3728      	adds	r7, #40	; 0x28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bdb0      	pop	{r4, r5, r7, pc}
 8006f16:	bf00      	nop
 8006f18:	0800bbb8 	.word	0x0800bbb8

08006f1c <_ZNSaIP5TokenEC1Ev>:
      allocator() throw() { }
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f8e8 	bl	80070fa <_ZN9__gnu_cxx13new_allocatorIP5TokenEC1Ev>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <_ZN9__gnu_cxx13new_allocatorIP6SymbolED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <_ZNSt16allocator_traitsISaIP6SymbolEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	60b9      	str	r1, [r7, #8]
 8006f54:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	68b9      	ldr	r1, [r7, #8]
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 f8d8 	bl	8007110 <_ZN9__gnu_cxx13new_allocatorIP6SymbolE10deallocateEPS2_j>
 8006f60:	bf00      	nop
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6SymbolEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <_ZN9__gnu_cxx13new_allocatorIP9LineEntryE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006f7e:	b590      	push	{r4, r7, lr}
 8006f80:	b085      	sub	sp, #20
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7ff fe92 	bl	8006cb4 <_ZSt7forwardIP9LineEntryEOT_RNSt16remove_referenceIS2_E4typeE>
 8006f90:	4603      	mov	r3, r0
 8006f92:	681c      	ldr	r4, [r3, #0]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4619      	mov	r1, r3
 8006f98:	2004      	movs	r0, #4
 8006f9a:	f7fb f8c5 	bl	8002128 <_ZnwjPv>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d000      	beq.n	8006fa6 <_ZN9__gnu_cxx13new_allocatorIP9LineEntryE9constructIS2_JS2_EEEvPT_DpOT0_+0x28>
 8006fa4:	601c      	str	r4, [r3, #0]
 8006fa6:	bf00      	nop
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd90      	pop	{r4, r7, pc}

08006fae <_ZNKSt6vectorIP9LineEntrySaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8006fae:	b590      	push	{r4, r7, lr}
 8006fb0:	b087      	sub	sp, #28
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	60f8      	str	r0, [r7, #12]
 8006fb6:	60b9      	str	r1, [r7, #8]
 8006fb8:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 f8b5 	bl	800712a <_ZNKSt6vectorIP9LineEntrySaIS1_EE8max_sizeEv>
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f7fa faca 	bl	800155c <_ZNKSt6vectorIP9LineEntrySaIS1_EE4sizeEv>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	1ae2      	subs	r2, r4, r3
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	bf34      	ite	cc
 8006fd2:	2301      	movcc	r3, #1
 8006fd4:	2300      	movcs	r3, #0
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d003      	beq.n	8006fe4 <_ZNKSt6vectorIP9LineEntrySaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f003 fa35 	bl	800a44e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f7fa fab9 	bl	800155c <_ZNKSt6vectorIP9LineEntrySaIS1_EE4sizeEv>
 8006fea:	4604      	mov	r4, r0
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f7fa fab5 	bl	800155c <_ZNKSt6vectorIP9LineEntrySaIS1_EE4sizeEv>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	613b      	str	r3, [r7, #16]
 8006ff6:	f107 0208 	add.w	r2, r7, #8
 8006ffa:	f107 0310 	add.w	r3, r7, #16
 8006ffe:	4611      	mov	r1, r2
 8007000:	4618      	mov	r0, r3
 8007002:	f7fc fc47 	bl	8003894 <_ZSt3maxIjERKT_S2_S2_>
 8007006:	4603      	mov	r3, r0
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4423      	add	r3, r4
 800700c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f7fa faa4 	bl	800155c <_ZNKSt6vectorIP9LineEntrySaIS1_EE4sizeEv>
 8007014:	4602      	mov	r2, r0
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	4293      	cmp	r3, r2
 800701a:	d306      	bcc.n	800702a <_ZNKSt6vectorIP9LineEntrySaIS1_EE12_M_check_lenEjPKc+0x7c>
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 f884 	bl	800712a <_ZNKSt6vectorIP9LineEntrySaIS1_EE8max_sizeEv>
 8007022:	4602      	mov	r2, r0
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	4293      	cmp	r3, r2
 8007028:	d904      	bls.n	8007034 <_ZNKSt6vectorIP9LineEntrySaIS1_EE12_M_check_lenEjPKc+0x86>
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 f87d 	bl	800712a <_ZNKSt6vectorIP9LineEntrySaIS1_EE8max_sizeEv>
 8007030:	4603      	mov	r3, r0
 8007032:	e000      	b.n	8007036 <_ZNKSt6vectorIP9LineEntrySaIS1_EE12_M_check_lenEjPKc+0x88>
 8007034:	697b      	ldr	r3, [r7, #20]
      }
 8007036:	4618      	mov	r0, r3
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	bd90      	pop	{r4, r7, pc}

0800703e <_ZNSt6vectorIP9LineEntrySaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	f107 030c 	add.w	r3, r7, #12
 800704c:	4611      	mov	r1, r2
 800704e:	4618      	mov	r0, r3
 8007050:	f7ff fe7e 	bl	8006d50 <_ZN9__gnu_cxx17__normal_iteratorIPP9LineEntrySt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <_ZN9__gnu_cxxmiIPP9LineEntrySt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800705e:	b590      	push	{r4, r7, lr}
 8007060:	b083      	sub	sp, #12
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f822 	bl	80070b2 <_ZNK9__gnu_cxx17__normal_iteratorIPP9LineEntrySt6vectorIS2_SaIS2_EEE4baseEv>
 800706e:	4603      	mov	r3, r0
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	461c      	mov	r4, r3
 8007074:	6838      	ldr	r0, [r7, #0]
 8007076:	f000 f81c 	bl	80070b2 <_ZNK9__gnu_cxx17__normal_iteratorIPP9LineEntrySt6vectorIS2_SaIS2_EEE4baseEv>
 800707a:	4603      	mov	r3, r0
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	1ae3      	subs	r3, r4, r3
 8007080:	109b      	asrs	r3, r3, #2
 8007082:	4618      	mov	r0, r3
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	bd90      	pop	{r4, r7, pc}

0800708a <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800708a:	b580      	push	{r7, lr}
 800708c:	b082      	sub	sp, #8
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d006      	beq.n	80070a8 <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE11_M_allocateEj+0x1e>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 f854 	bl	800714c <_ZNSt16allocator_traitsISaIP9LineEntryEE8allocateERS2_j>
 80070a4:	4603      	mov	r3, r0
 80070a6:	e000      	b.n	80070aa <_ZNSt12_Vector_baseIP9LineEntrySaIS1_EE11_M_allocateEj+0x20>
 80070a8:	2300      	movs	r3, #0
      }
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <_ZNK9__gnu_cxx17__normal_iteratorIPP9LineEntrySt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4618      	mov	r0, r3
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <_ZSt34__uninitialized_move_if_noexcept_aIPP9LineEntryS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80070c8:	b590      	push	{r4, r7, lr}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 f847 	bl	800716a <_ZSt32__make_move_if_noexcept_iteratorIP9LineEntrySt13move_iteratorIPS1_EET0_PT_>
 80070dc:	4604      	mov	r4, r0
 80070de:	68b8      	ldr	r0, [r7, #8]
 80070e0:	f000 f843 	bl	800716a <_ZSt32__make_move_if_noexcept_iteratorIP9LineEntrySt13move_iteratorIPS1_EET0_PT_>
 80070e4:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 f84c 	bl	8007188 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP9LineEntryES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80070f0:	4603      	mov	r3, r0
    }
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd90      	pop	{r4, r7, pc}

080070fa <_ZN9__gnu_cxx13new_allocatorIP5TokenEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4618      	mov	r0, r3
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <_ZN9__gnu_cxx13new_allocatorIP6SymbolE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800711c:	68b8      	ldr	r0, [r7, #8]
 800711e:	f003 f97b 	bl	800a418 <_ZdlPv>
      }
 8007122:	bf00      	nop
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <_ZNKSt6vectorIP9LineEntrySaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4618      	mov	r0, r3
 8007136:	f7fe fe1a 	bl	8005d6e <_ZNKSt12_Vector_baseIP9LineEntrySaIS1_EE19_M_get_Tp_allocatorEv>
 800713a:	4603      	mov	r3, r0
 800713c:	4618      	mov	r0, r3
 800713e:	f000 f834 	bl	80071aa <_ZNSt16allocator_traitsISaIP9LineEntryEE8max_sizeERKS2_>
 8007142:	4603      	mov	r3, r0
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <_ZNSt16allocator_traitsISaIP9LineEntryEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007156:	2200      	movs	r2, #0
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f831 	bl	80071c2 <_ZN9__gnu_cxx13new_allocatorIP9LineEntryE8allocateEjPKv>
 8007160:	4603      	mov	r3, r0
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <_ZSt32__make_move_if_noexcept_iteratorIP9LineEntrySt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8007172:	f107 030c 	add.w	r3, r7, #12
 8007176:	6879      	ldr	r1, [r7, #4]
 8007178:	4618      	mov	r0, r3
 800717a:	f000 f840 	bl	80071fe <_ZNSt13move_iteratorIPP9LineEntryEC1ES2_>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP9LineEntryES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	68b9      	ldr	r1, [r7, #8]
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 f83e 	bl	800721c <_ZSt18uninitialized_copyISt13move_iteratorIPP9LineEntryES3_ET0_T_S6_S5_>
 80071a0:	4603      	mov	r3, r0
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <_ZNSt16allocator_traitsISaIP9LineEntryEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b082      	sub	sp, #8
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f844 	bl	8007240 <_ZNK9__gnu_cxx13new_allocatorIP9LineEntryE8max_sizeEv>
 80071b8:	4603      	mov	r3, r0
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <_ZN9__gnu_cxx13new_allocatorIP9LineEntryE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 f836 	bl	8007240 <_ZNK9__gnu_cxx13new_allocatorIP9LineEntryE8max_sizeEv>
 80071d4:	4602      	mov	r2, r0
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	4293      	cmp	r3, r2
 80071da:	bf8c      	ite	hi
 80071dc:	2301      	movhi	r3, #1
 80071de:	2300      	movls	r3, #0
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <_ZN9__gnu_cxx13new_allocatorIP9LineEntryE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80071e6:	f003 f92c 	bl	800a442 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4618      	mov	r0, r3
 80071f0:	f003 f8e9 	bl	800a3c6 <_Znwj>
 80071f4:	4603      	mov	r3, r0
      }
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <_ZNSt13move_iteratorIPP9LineEntryEC1ES2_>:
      move_iterator(iterator_type __i)
 80071fe:	b480      	push	{r7}
 8007200:	b083      	sub	sp, #12
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <_ZSt18uninitialized_copyISt13move_iteratorIPP9LineEntryES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007228:	2301      	movs	r3, #1
 800722a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	68b9      	ldr	r1, [r7, #8]
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 f811 	bl	8007258 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP9LineEntryES5_EET0_T_S8_S7_>
 8007236:	4603      	mov	r3, r0
    }
 8007238:	4618      	mov	r0, r3
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <_ZNK9__gnu_cxx13new_allocatorIP9LineEntryE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8007248:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP9LineEntryES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	68b9      	ldr	r1, [r7, #8]
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 f805 	bl	8007278 <_ZSt4copyISt13move_iteratorIPP9LineEntryES3_ET0_T_S6_S5_>
 800726e:	4603      	mov	r3, r0
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <_ZSt4copyISt13move_iteratorIPP9LineEntryES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8007278:	b590      	push	{r4, r7, lr}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 f80f 	bl	80072a8 <_ZSt12__miter_baseIPP9LineEntryEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800728a:	4604      	mov	r4, r0
 800728c:	68b8      	ldr	r0, [r7, #8]
 800728e:	f000 f80b 	bl	80072a8 <_ZSt12__miter_baseIPP9LineEntryEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007292:	4603      	mov	r3, r0
	       __result));
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	4619      	mov	r1, r3
 8007298:	4620      	mov	r0, r4
 800729a:	f000 f816 	bl	80072ca <_ZSt14__copy_move_a2ILb1EPP9LineEntryS2_ET1_T0_S4_S3_>
 800729e:	4603      	mov	r3, r0
    }
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd90      	pop	{r4, r7, pc}

080072a8 <_ZSt12__miter_baseIPP9LineEntryEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 80072b0:	1d3b      	adds	r3, r7, #4
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 f825 	bl	8007302 <_ZNKSt13move_iteratorIPP9LineEntryE4baseEv>
 80072b8:	4603      	mov	r3, r0
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 f82d 	bl	800731a <_ZSt12__miter_baseIPP9LineEntryET_S3_>
 80072c0:	4603      	mov	r3, r0
 80072c2:	4618      	mov	r0, r3
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <_ZSt14__copy_move_a2ILb1EPP9LineEntryS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80072ca:	b5b0      	push	{r4, r5, r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f82a 	bl	8007330 <_ZSt12__niter_baseIPP9LineEntryET_S3_>
 80072dc:	4604      	mov	r4, r0
 80072de:	68b8      	ldr	r0, [r7, #8]
 80072e0:	f000 f826 	bl	8007330 <_ZSt12__niter_baseIPP9LineEntryET_S3_>
 80072e4:	4605      	mov	r5, r0
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f822 	bl	8007330 <_ZSt12__niter_baseIPP9LineEntryET_S3_>
 80072ec:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 80072ee:	461a      	mov	r2, r3
 80072f0:	4629      	mov	r1, r5
 80072f2:	4620      	mov	r0, r4
 80072f4:	f000 f827 	bl	8007346 <_ZSt13__copy_move_aILb1EPP9LineEntryS2_ET1_T0_S4_S3_>
 80072f8:	4603      	mov	r3, r0
    }
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bdb0      	pop	{r4, r5, r7, pc}

08007302 <_ZNKSt13move_iteratorIPP9LineEntryE4baseEv>:
      base() const
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4618      	mov	r0, r3
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <_ZSt12__miter_baseIPP9LineEntryET_S3_>:
    __miter_base(_Iterator __it)
 800731a:	b480      	push	{r7}
 800731c:	b083      	sub	sp, #12
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4618      	mov	r0, r3
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <_ZSt12__niter_baseIPP9LineEntryET_S3_>:
    __niter_base(_Iterator __it)
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4618      	mov	r0, r3
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <_ZSt13__copy_move_aILb1EPP9LineEntryS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007346:	b580      	push	{r7, lr}
 8007348:	b086      	sub	sp, #24
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8007352:	2301      	movs	r3, #1
 8007354:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	68b9      	ldr	r1, [r7, #8]
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 f805 	bl	800736a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP9LineEntryEEPT_PKS5_S8_S6_>
 8007360:	4603      	mov	r3, r0
    }
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP9LineEntryEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800736a:	b580      	push	{r7, lr}
 800736c:	b086      	sub	sp, #24
 800736e:	af00      	add	r7, sp, #0
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	109b      	asrs	r3, r3, #2
 800737e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d006      	beq.n	8007394 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP9LineEntryEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	461a      	mov	r2, r3
 800738c:	68f9      	ldr	r1, [r7, #12]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f003 fadd 	bl	800a94e <memmove>
	  return __result + _Num;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	4413      	add	r3, r2
	}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <_ZN9LineEntryC1Ev>:

#include "Symbol.h"

using namespace std;

LineEntry::LineEntry() :
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
m_result(false)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 f8aa 	bl	8007508 <_ZNSt6vectorIP6SymbolSaIS1_EEC1Ev>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	731a      	strb	r2, [r3, #12]
{

}
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4618      	mov	r0, r3
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <_ZN9LineEntry10add_symbolER6Symbol>:

void LineEntry::add_symbol(Symbol& val) {
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
	m_line.push_back(&val);
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	f107 030c 	add.w	r3, r7, #12
 80073d8:	4619      	mov	r1, r3
 80073da:	4610      	mov	r0, r2
 80073dc:	f000 f8ac 	bl	8007538 <_ZNSt6vectorIP6SymbolSaIS1_EE9push_backEOS1_>
}
 80073e0:	bf00      	nop
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <_ZN9LineEntry9to_stringB5cxx11Ev>:

bool LineEntry::can_eval() {
	return !m_line.empty();
}

string LineEntry::to_string() {
 80073e8:	b590      	push	{r4, r7, lr}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
	string ret_val;
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f003 f8ff 	bl	800a5f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>

	for(uint8_t i=0; i < m_line.size(); i++){
 80073f8:	2300      	movs	r3, #0
 80073fa:	73fb      	strb	r3, [r7, #15]
 80073fc:	7bfc      	ldrb	r4, [r7, #15]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	4618      	mov	r0, r3
 8007402:	f000 f8aa 	bl	800755a <_ZNKSt6vectorIP6SymbolSaIS1_EE4sizeEv>
 8007406:	4603      	mov	r3, r0
 8007408:	429c      	cmp	r4, r3
 800740a:	bf34      	ite	cc
 800740c:	2301      	movcc	r3, #1
 800740e:	2300      	movcs	r3, #0
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d010      	beq.n	8007438 <_ZN9LineEntry9to_stringB5cxx11Ev+0x50>
	   ret_val.append(m_line[i]->rep);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	7bfa      	ldrb	r2, [r7, #15]
 800741a:	4611      	mov	r1, r2
 800741c:	4618      	mov	r0, r3
 800741e:	f000 f8ad 	bl	800757c <_ZNSt6vectorIP6SymbolSaIS1_EEixEj>
 8007422:	4603      	mov	r3, r0
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3304      	adds	r3, #4
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f003 f9cd 	bl	800a7ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
	for(uint8_t i=0; i < m_line.size(); i++){
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	3301      	adds	r3, #1
 8007434:	73fb      	strb	r3, [r7, #15]
 8007436:	e7e1      	b.n	80073fc <_ZN9LineEntry9to_stringB5cxx11Ev+0x14>
	}

	return ret_val;
 8007438:	bf00      	nop
}
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	bd90      	pop	{r4, r7, pc}

08007442 <_ZN9LineEntry4sizeEv>:

int LineEntry::size() {
 8007442:	b580      	push	{r7, lr}
 8007444:	b082      	sub	sp, #8
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
	return m_line.size();
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4618      	mov	r0, r3
 800744e:	f000 f884 	bl	800755a <_ZNKSt6vectorIP6SymbolSaIS1_EE4sizeEv>
 8007452:	4603      	mov	r3, r0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <_ZN6SymbolaSERKS_>:
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781a      	ldrb	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	701a      	strb	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	1d1a      	adds	r2, r3, #4
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	3304      	adds	r3, #4
 8007476:	4619      	mov	r1, r3
 8007478:	4610      	mov	r0, r2
 800747a:	f003 f8c9 	bl	800a610 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	69d2      	ldr	r2, [r2, #28]
 8007484:	61da      	str	r2, [r3, #28]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <_ZN9LineEntry3getEiP6Symbol>:

bool LineEntry::get(int idx, Symbol* sym) {
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
	if (idx >= size()) {
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f7ff ffd0 	bl	8007442 <_ZN9LineEntry4sizeEv>
 80074a2:	4602      	mov	r2, r0
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	4293      	cmp	r3, r2
 80074a8:	bfac      	ite	ge
 80074aa:	2301      	movge	r3, #1
 80074ac:	2300      	movlt	r3, #0
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <_ZN9LineEntry3getEiP6Symbol+0x28>
		return false;
 80074b4:	2300      	movs	r3, #0
 80074b6:	e00c      	b.n	80074d2 <_ZN9LineEntry3getEiP6Symbol+0x42>
	}
	*sym = *m_line[idx];
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	4611      	mov	r1, r2
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 f85c 	bl	800757c <_ZNSt6vectorIP6SymbolSaIS1_EEixEj>
 80074c4:	4603      	mov	r3, r0
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7ff ffc6 	bl	800745c <_ZN6SymbolaSERKS_>
	return true;
 80074d0:	2301      	movs	r3, #1
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <_ZN9LineEntry18remove_last_symbolEv>:

void LineEntry::remove_last_symbol() {
 80074da:	b580      	push	{r7, lr}
 80074dc:	b082      	sub	sp, #8
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
	if (this->size() > 0) {
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff ffad 	bl	8007442 <_ZN9LineEntry4sizeEv>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	bfcc      	ite	gt
 80074ee:	2301      	movgt	r3, #1
 80074f0:	2300      	movle	r3, #0
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d003      	beq.n	8007500 <_ZN9LineEntry18remove_last_symbolEv+0x26>
		this->m_line.pop_back();
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 f84e 	bl	800759c <_ZNSt6vectorIP6SymbolSaIS1_EE8pop_backEv>

	}
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <_ZNSt6vectorIP6SymbolSaIS1_EEC1Ev>:
      vector()
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4618      	mov	r0, r3
 8007514:	f000 f856 	bl	80075c4 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EEC1Ev>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <_ZSt4moveIRP6SymbolEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4618      	mov	r0, r3
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <_ZNSt6vectorIP6SymbolSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8007542:	6838      	ldr	r0, [r7, #0]
 8007544:	f7ff ffed 	bl	8007522 <_ZSt4moveIRP6SymbolEONSt16remove_referenceIT_E4typeEOS4_>
 8007548:	4603      	mov	r3, r0
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f851 	bl	80075f4 <_ZNSt6vectorIP6SymbolSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <_ZNKSt6vectorIP6SymbolSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	461a      	mov	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	109b      	asrs	r3, r3, #2
 8007570:	4618      	mov	r0, r3
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <_ZNSt6vectorIP6SymbolSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
      }
 8007590:	4618      	mov	r0, r3
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <_ZNSt6vectorIP6SymbolSaIS1_EE8pop_backEv>:
      pop_back() _GLIBCXX_NOEXCEPT
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
	--this->_M_impl._M_finish;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	1f1a      	subs	r2, r3, #4
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	605a      	str	r2, [r3, #4]
	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	4619      	mov	r1, r3
 80075b6:	4610      	mov	r0, r2
 80075b8:	f000 f84a 	bl	8007650 <_ZNSt16allocator_traitsISaIP6SymbolEE7destroyIS1_EEvRS2_PT_>
      }
 80075bc:	bf00      	nop
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EEC1Ev>:
      _Vector_base()
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 f84b 	bl	800766a <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE12_Vector_implC1Ev>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <_ZSt7forwardIP6SymbolEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80075de:	b480      	push	{r7}
 80075e0:	b083      	sub	sp, #12
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <_ZNSt6vectorIP6SymbolSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 80075f4:	b5b0      	push	{r4, r5, r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	429a      	cmp	r2, r3
 8007608:	d011      	beq.n	800762e <_ZNSt6vectorIP6SymbolSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800760a:	687c      	ldr	r4, [r7, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685d      	ldr	r5, [r3, #4]
 8007610:	6838      	ldr	r0, [r7, #0]
 8007612:	f7ff ffe4 	bl	80075de <_ZSt7forwardIP6SymbolEOT_RNSt16remove_referenceIS2_E4typeE>
 8007616:	4603      	mov	r3, r0
 8007618:	461a      	mov	r2, r3
 800761a:	4629      	mov	r1, r5
 800761c:	4620      	mov	r0, r4
 800761e:	f000 f839 	bl	8007694 <_ZNSt16allocator_traitsISaIP6SymbolEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	1d1a      	adds	r2, r3, #4
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	605a      	str	r2, [r3, #4]
      }
 800762c:	e00c      	b.n	8007648 <_ZNSt6vectorIP6SymbolSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f843 	bl	80076ba <_ZNSt6vectorIP6SymbolSaIS1_EE3endEv>
 8007634:	4604      	mov	r4, r0
 8007636:	6838      	ldr	r0, [r7, #0]
 8007638:	f7ff ffd1 	bl	80075de <_ZSt7forwardIP6SymbolEOT_RNSt16remove_referenceIS2_E4typeE>
 800763c:	4603      	mov	r3, r0
 800763e:	461a      	mov	r2, r3
 8007640:	4621      	mov	r1, r4
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f84a 	bl	80076dc <_ZNSt6vectorIP6SymbolSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8007648:	bf00      	nop
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bdb0      	pop	{r4, r5, r7, pc}

08007650 <_ZNSt16allocator_traitsISaIP6SymbolEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f8c9 	bl	80077f4 <_ZN9__gnu_cxx13new_allocatorIP6SymbolE7destroyIS2_EEvPT_>
 8007662:	bf00      	nop
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800766a:	b580      	push	{r7, lr}
 800766c:	b082      	sub	sp, #8
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f8c9 	bl	800780a <_ZNSaIP6SymbolEC1Ev>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	605a      	str	r2, [r3, #4]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	609a      	str	r2, [r3, #8]
	{ }
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <_ZNSt16allocator_traitsISaIP6SymbolEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7ff ff9c 	bl	80075de <_ZSt7forwardIP6SymbolEOT_RNSt16remove_referenceIS2_E4typeE>
 80076a6:	4603      	mov	r3, r0
 80076a8:	461a      	mov	r2, r3
 80076aa:	68b9      	ldr	r1, [r7, #8]
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 f8b8 	bl	8007822 <_ZN9__gnu_cxx13new_allocatorIP6SymbolE9constructIS2_JS2_EEEvPT_DpOT0_>
 80076b2:	bf00      	nop
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <_ZNSt6vectorIP6SymbolSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b084      	sub	sp, #16
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	1d1a      	adds	r2, r3, #4
 80076c6:	f107 030c 	add.w	r3, r7, #12
 80076ca:	4611      	mov	r1, r2
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 f8c0 	bl	8007852 <_ZN9__gnu_cxx17__normal_iteratorIPP6SymbolSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <_ZNSt6vectorIP6SymbolSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80076dc:	b5b0      	push	{r4, r5, r7, lr}
 80076de:	b08a      	sub	sp, #40	; 0x28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
      const size_type __len =
 80076e8:	4a41      	ldr	r2, [pc, #260]	; (80077f0 <_ZNSt6vectorIP6SymbolSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 80076ea:	2101      	movs	r1, #1
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 f8c0 	bl	8007872 <_ZNKSt6vectorIP6SymbolSaIS1_EE12_M_check_lenEjPKc>
 80076f2:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f000 f904 	bl	8007902 <_ZNSt6vectorIP6SymbolSaIS1_EE5beginEv>
 80076fa:	4603      	mov	r3, r0
 80076fc:	617b      	str	r3, [r7, #20]
 80076fe:	f107 0214 	add.w	r2, r7, #20
 8007702:	f107 0308 	add.w	r3, r7, #8
 8007706:	4611      	mov	r1, r2
 8007708:	4618      	mov	r0, r3
 800770a:	f000 f90a 	bl	8007922 <_ZN9__gnu_cxxmiIPP6SymbolSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800770e:	4603      	mov	r3, r0
 8007710:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007716:	4618      	mov	r0, r3
 8007718:	f000 f919 	bl	800794e <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE11_M_allocateEj>
 800771c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8007722:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8007728:	69fa      	ldr	r2, [r7, #28]
 800772a:	18d5      	adds	r5, r2, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7ff ff56 	bl	80075de <_ZSt7forwardIP6SymbolEOT_RNSt16remove_referenceIS2_E4typeE>
 8007732:	4603      	mov	r3, r0
 8007734:	461a      	mov	r2, r3
 8007736:	4629      	mov	r1, r5
 8007738:	4620      	mov	r0, r4
 800773a:	f7ff ffab 	bl	8007694 <_ZNSt16allocator_traitsISaIP6SymbolEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800773e:	2300      	movs	r3, #0
 8007740:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681c      	ldr	r4, [r3, #0]
 8007746:	f107 0308 	add.w	r3, r7, #8
 800774a:	4618      	mov	r0, r3
 800774c:	f000 f913 	bl	8007976 <_ZNK9__gnu_cxx17__normal_iteratorIPP6SymbolSt6vectorIS2_SaIS2_EEE4baseEv>
 8007750:	4603      	mov	r3, r0
 8007752:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff fa6e 	bl	8006c38 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE19_M_get_Tp_allocatorEv>
 800775c:	4603      	mov	r3, r0
	  __new_finish
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	4629      	mov	r1, r5
 8007762:	4620      	mov	r0, r4
 8007764:	f000 f912 	bl	800798c <_ZSt34__uninitialized_move_if_noexcept_aIPP6SymbolS2_SaIS1_EET0_T_S5_S4_RT1_>
 8007768:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	3304      	adds	r3, #4
 800776e:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 8007770:	f107 0308 	add.w	r3, r7, #8
 8007774:	4618      	mov	r0, r3
 8007776:	f000 f8fe 	bl	8007976 <_ZNK9__gnu_cxx17__normal_iteratorIPP6SymbolSt6vectorIS2_SaIS2_EEE4baseEv>
 800777a:	4603      	mov	r3, r0
 800777c:	681c      	ldr	r4, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff fa57 	bl	8006c38 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE19_M_get_Tp_allocatorEv>
 800778a:	4603      	mov	r3, r0
	  __new_finish
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	4629      	mov	r1, r5
 8007790:	4620      	mov	r0, r4
 8007792:	f000 f8fb 	bl	800798c <_ZSt34__uninitialized_move_if_noexcept_aIPP6SymbolS2_SaIS1_EET0_T_S5_S4_RT1_>
 8007796:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681c      	ldr	r4, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff fa48 	bl	8006c38 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE19_M_get_Tp_allocatorEv>
 80077a8:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80077aa:	461a      	mov	r2, r3
 80077ac:	4629      	mov	r1, r5
 80077ae:	4620      	mov	r0, r4
 80077b0:	f7ff fa4d 	bl	8006c4e <_ZSt8_DestroyIPP6SymbolS1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 80077be:	461a      	mov	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 80077c8:	461a      	mov	r2, r3
 80077ca:	f7ff fadd 	bl	8006d88 <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80077da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	69fa      	ldr	r2, [r7, #28]
 80077e0:	441a      	add	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	609a      	str	r2, [r3, #8]
    }
 80077e6:	bf00      	nop
 80077e8:	3728      	adds	r7, #40	; 0x28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bdb0      	pop	{r4, r5, r7, pc}
 80077ee:	bf00      	nop
 80077f0:	0800bbd4 	.word	0x0800bbd4

080077f4 <_ZN9__gnu_cxx13new_allocatorIP6SymbolE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
 80077fe:	bf00      	nop
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <_ZNSaIP6SymbolEC1Ev>:
 800780a:	b580      	push	{r7, lr}
 800780c:	b082      	sub	sp, #8
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f8d3 	bl	80079be <_ZN9__gnu_cxx13new_allocatorIP6SymbolEC1Ev>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4618      	mov	r0, r3
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <_ZN9__gnu_cxx13new_allocatorIP6SymbolE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8007822:	b590      	push	{r4, r7, lr}
 8007824:	b085      	sub	sp, #20
 8007826:	af00      	add	r7, sp, #0
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	60b9      	str	r1, [r7, #8]
 800782c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7ff fed5 	bl	80075de <_ZSt7forwardIP6SymbolEOT_RNSt16remove_referenceIS2_E4typeE>
 8007834:	4603      	mov	r3, r0
 8007836:	681c      	ldr	r4, [r3, #0]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	4619      	mov	r1, r3
 800783c:	2004      	movs	r0, #4
 800783e:	f7fa fc73 	bl	8002128 <_ZnwjPv>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d000      	beq.n	800784a <_ZN9__gnu_cxx13new_allocatorIP6SymbolE9constructIS2_JS2_EEEvPT_DpOT0_+0x28>
 8007848:	601c      	str	r4, [r3, #0]
 800784a:	bf00      	nop
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	bd90      	pop	{r4, r7, pc}

08007852 <_ZN9__gnu_cxx17__normal_iteratorIPP6SymbolSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4618      	mov	r0, r3
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <_ZNKSt6vectorIP6SymbolSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8007872:	b590      	push	{r4, r7, lr}
 8007874:	b087      	sub	sp, #28
 8007876:	af00      	add	r7, sp, #0
 8007878:	60f8      	str	r0, [r7, #12]
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 f8a8 	bl	80079d4 <_ZNKSt6vectorIP6SymbolSaIS1_EE8max_sizeEv>
 8007884:	4604      	mov	r4, r0
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7ff fe67 	bl	800755a <_ZNKSt6vectorIP6SymbolSaIS1_EE4sizeEv>
 800788c:	4603      	mov	r3, r0
 800788e:	1ae2      	subs	r2, r4, r3
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	429a      	cmp	r2, r3
 8007894:	bf34      	ite	cc
 8007896:	2301      	movcc	r3, #1
 8007898:	2300      	movcs	r3, #0
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <_ZNKSt6vectorIP6SymbolSaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f002 fdd3 	bl	800a44e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f7ff fe56 	bl	800755a <_ZNKSt6vectorIP6SymbolSaIS1_EE4sizeEv>
 80078ae:	4604      	mov	r4, r0
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f7ff fe52 	bl	800755a <_ZNKSt6vectorIP6SymbolSaIS1_EE4sizeEv>
 80078b6:	4603      	mov	r3, r0
 80078b8:	613b      	str	r3, [r7, #16]
 80078ba:	f107 0208 	add.w	r2, r7, #8
 80078be:	f107 0310 	add.w	r3, r7, #16
 80078c2:	4611      	mov	r1, r2
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fb ffe5 	bl	8003894 <_ZSt3maxIjERKT_S2_S2_>
 80078ca:	4603      	mov	r3, r0
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4423      	add	r3, r4
 80078d0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f7ff fe41 	bl	800755a <_ZNKSt6vectorIP6SymbolSaIS1_EE4sizeEv>
 80078d8:	4602      	mov	r2, r0
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	4293      	cmp	r3, r2
 80078de:	d306      	bcc.n	80078ee <_ZNKSt6vectorIP6SymbolSaIS1_EE12_M_check_lenEjPKc+0x7c>
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 f877 	bl	80079d4 <_ZNKSt6vectorIP6SymbolSaIS1_EE8max_sizeEv>
 80078e6:	4602      	mov	r2, r0
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d904      	bls.n	80078f8 <_ZNKSt6vectorIP6SymbolSaIS1_EE12_M_check_lenEjPKc+0x86>
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 f870 	bl	80079d4 <_ZNKSt6vectorIP6SymbolSaIS1_EE8max_sizeEv>
 80078f4:	4603      	mov	r3, r0
 80078f6:	e000      	b.n	80078fa <_ZNKSt6vectorIP6SymbolSaIS1_EE12_M_check_lenEjPKc+0x88>
 80078f8:	697b      	ldr	r3, [r7, #20]
      }
 80078fa:	4618      	mov	r0, r3
 80078fc:	371c      	adds	r7, #28
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd90      	pop	{r4, r7, pc}

08007902 <_ZNSt6vectorIP6SymbolSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	f107 030c 	add.w	r3, r7, #12
 8007910:	4611      	mov	r1, r2
 8007912:	4618      	mov	r0, r3
 8007914:	f7ff ff9d 	bl	8007852 <_ZN9__gnu_cxx17__normal_iteratorIPP6SymbolSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <_ZN9__gnu_cxxmiIPP6SymbolSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007922:	b590      	push	{r4, r7, lr}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f822 	bl	8007976 <_ZNK9__gnu_cxx17__normal_iteratorIPP6SymbolSt6vectorIS2_SaIS2_EEE4baseEv>
 8007932:	4603      	mov	r3, r0
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	461c      	mov	r4, r3
 8007938:	6838      	ldr	r0, [r7, #0]
 800793a:	f000 f81c 	bl	8007976 <_ZNK9__gnu_cxx17__normal_iteratorIPP6SymbolSt6vectorIS2_SaIS2_EEE4baseEv>
 800793e:	4603      	mov	r3, r0
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	1ae3      	subs	r3, r4, r3
 8007944:	109b      	asrs	r3, r3, #2
 8007946:	4618      	mov	r0, r3
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	bd90      	pop	{r4, r7, pc}

0800794e <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d006      	beq.n	800796c <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE11_M_allocateEj+0x1e>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	4618      	mov	r0, r3
 8007964:	f000 f847 	bl	80079f6 <_ZNSt16allocator_traitsISaIP6SymbolEE8allocateERS2_j>
 8007968:	4603      	mov	r3, r0
 800796a:	e000      	b.n	800796e <_ZNSt12_Vector_baseIP6SymbolSaIS1_EE11_M_allocateEj+0x20>
 800796c:	2300      	movs	r3, #0
      }
 800796e:	4618      	mov	r0, r3
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <_ZNK9__gnu_cxx17__normal_iteratorIPP6SymbolSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007976:	b480      	push	{r7}
 8007978:	b083      	sub	sp, #12
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4618      	mov	r0, r3
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <_ZSt34__uninitialized_move_if_noexcept_aIPP6SymbolS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800798c:	b590      	push	{r4, r7, lr}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
 8007998:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 f83a 	bl	8007a14 <_ZSt32__make_move_if_noexcept_iteratorIP6SymbolSt13move_iteratorIPS1_EET0_PT_>
 80079a0:	4604      	mov	r4, r0
 80079a2:	68b8      	ldr	r0, [r7, #8]
 80079a4:	f000 f836 	bl	8007a14 <_ZSt32__make_move_if_noexcept_iteratorIP6SymbolSt13move_iteratorIPS1_EET0_PT_>
 80079a8:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	4620      	mov	r0, r4
 80079b0:	f000 f83f 	bl	8007a32 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP6SymbolES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80079b4:	4603      	mov	r3, r0
    }
 80079b6:	4618      	mov	r0, r3
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd90      	pop	{r4, r7, pc}

080079be <_ZN9__gnu_cxx13new_allocatorIP6SymbolEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <_ZNKSt6vectorIP6SymbolSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 f844 	bl	8007a6c <_ZNKSt12_Vector_baseIP6SymbolSaIS1_EE19_M_get_Tp_allocatorEv>
 80079e4:	4603      	mov	r3, r0
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 f834 	bl	8007a54 <_ZNSt16allocator_traitsISaIP6SymbolEE8max_sizeERKS2_>
 80079ec:	4603      	mov	r3, r0
 80079ee:	4618      	mov	r0, r3
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <_ZNSt16allocator_traitsISaIP6SymbolEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007a00:	2200      	movs	r2, #0
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f83c 	bl	8007a82 <_ZN9__gnu_cxx13new_allocatorIP6SymbolE8allocateEjPKv>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <_ZSt32__make_move_if_noexcept_iteratorIP6SymbolSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8007a1c:	f107 030c 	add.w	r3, r7, #12
 8007a20:	6879      	ldr	r1, [r7, #4]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 f84b 	bl	8007abe <_ZNSt13move_iteratorIPP6SymbolEC1ES2_>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP6SymbolES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	60f8      	str	r0, [r7, #12]
 8007a3a:	60b9      	str	r1, [r7, #8]
 8007a3c:	607a      	str	r2, [r7, #4]
 8007a3e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	68b9      	ldr	r1, [r7, #8]
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 f849 	bl	8007adc <_ZSt18uninitialized_copyISt13move_iteratorIPP6SymbolES3_ET0_T_S6_S5_>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <_ZNSt16allocator_traitsISaIP6SymbolEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f84f 	bl	8007b00 <_ZNK9__gnu_cxx13new_allocatorIP6SymbolE8max_sizeEv>
 8007a62:	4603      	mov	r3, r0
 8007a64:	4618      	mov	r0, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <_ZNKSt12_Vector_baseIP6SymbolSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4618      	mov	r0, r3
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <_ZN9__gnu_cxx13new_allocatorIP6SymbolE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	60f8      	str	r0, [r7, #12]
 8007a8a:	60b9      	str	r1, [r7, #8]
 8007a8c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 f836 	bl	8007b00 <_ZNK9__gnu_cxx13new_allocatorIP6SymbolE8max_sizeEv>
 8007a94:	4602      	mov	r2, r0
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	bf8c      	ite	hi
 8007a9c:	2301      	movhi	r3, #1
 8007a9e:	2300      	movls	r3, #0
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <_ZN9__gnu_cxx13new_allocatorIP6SymbolE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007aa6:	f002 fccc 	bl	800a442 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f002 fc89 	bl	800a3c6 <_Znwj>
 8007ab4:	4603      	mov	r3, r0
      }
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <_ZNSt13move_iteratorIPP6SymbolEC1ES2_>:
      move_iterator(iterator_type __i)
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <_ZSt18uninitialized_copyISt13move_iteratorIPP6SymbolES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 f811 	bl	8007b18 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP6SymbolES5_EET0_T_S8_S7_>
 8007af6:	4603      	mov	r3, r0
    }
 8007af8:	4618      	mov	r0, r3
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <_ZNK9__gnu_cxx13new_allocatorIP6SymbolE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8007b08:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP6SymbolES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	68b9      	ldr	r1, [r7, #8]
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 f805 	bl	8007b38 <_ZSt4copyISt13move_iteratorIPP6SymbolES3_ET0_T_S6_S5_>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <_ZSt4copyISt13move_iteratorIPP6SymbolES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8007b38:	b590      	push	{r4, r7, lr}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 f80f 	bl	8007b68 <_ZSt12__miter_baseIPP6SymbolEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	68b8      	ldr	r0, [r7, #8]
 8007b4e:	f000 f80b 	bl	8007b68 <_ZSt12__miter_baseIPP6SymbolEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007b52:	4603      	mov	r3, r0
	       __result));
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	4619      	mov	r1, r3
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f000 f816 	bl	8007b8a <_ZSt14__copy_move_a2ILb1EPP6SymbolS2_ET1_T0_S4_S3_>
 8007b5e:	4603      	mov	r3, r0
    }
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd90      	pop	{r4, r7, pc}

08007b68 <_ZSt12__miter_baseIPP6SymbolEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8007b70:	1d3b      	adds	r3, r7, #4
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 f825 	bl	8007bc2 <_ZNKSt13move_iteratorIPP6SymbolE4baseEv>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f000 f82d 	bl	8007bda <_ZSt12__miter_baseIPP6SymbolET_S3_>
 8007b80:	4603      	mov	r3, r0
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <_ZSt14__copy_move_a2ILb1EPP6SymbolS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007b8a:	b5b0      	push	{r4, r5, r7, lr}
 8007b8c:	b084      	sub	sp, #16
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	60f8      	str	r0, [r7, #12]
 8007b92:	60b9      	str	r1, [r7, #8]
 8007b94:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f000 f82a 	bl	8007bf0 <_ZSt12__niter_baseIPP6SymbolET_S3_>
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	68b8      	ldr	r0, [r7, #8]
 8007ba0:	f000 f826 	bl	8007bf0 <_ZSt12__niter_baseIPP6SymbolET_S3_>
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f822 	bl	8007bf0 <_ZSt12__niter_baseIPP6SymbolET_S3_>
 8007bac:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8007bae:	461a      	mov	r2, r3
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f000 f827 	bl	8007c06 <_ZSt13__copy_move_aILb1EPP6SymbolS2_ET1_T0_S4_S3_>
 8007bb8:	4603      	mov	r3, r0
    }
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bdb0      	pop	{r4, r5, r7, pc}

08007bc2 <_ZNKSt13move_iteratorIPP6SymbolE4baseEv>:
      base() const
 8007bc2:	b480      	push	{r7}
 8007bc4:	b083      	sub	sp, #12
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <_ZSt12__miter_baseIPP6SymbolET_S3_>:
    __miter_base(_Iterator __it)
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4618      	mov	r0, r3
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <_ZSt12__niter_baseIPP6SymbolET_S3_>:
    __niter_base(_Iterator __it)
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <_ZSt13__copy_move_aILb1EPP6SymbolS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b086      	sub	sp, #24
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	60f8      	str	r0, [r7, #12]
 8007c0e:	60b9      	str	r1, [r7, #8]
 8007c10:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8007c12:	2301      	movs	r3, #1
 8007c14:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	68b9      	ldr	r1, [r7, #8]
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 f805 	bl	8007c2a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6SymbolEEPT_PKS5_S8_S6_>
 8007c20:	4603      	mov	r3, r0
    }
 8007c22:	4618      	mov	r0, r3
 8007c24:	3718      	adds	r7, #24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6SymbolEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b086      	sub	sp, #24
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	109b      	asrs	r3, r3, #2
 8007c3e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d006      	beq.n	8007c54 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6SymbolEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	68f9      	ldr	r1, [r7, #12]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f002 fe7d 	bl	800a94e <memmove>
	  return __result + _Num;
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	4413      	add	r3, r2
	}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af02      	add	r7, sp, #8
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	4b04      	ldr	r3, [pc, #16]	; (8007c88 <_ZNSt7__cxx119to_stringEi+0x24>)
 8007c76:	2210      	movs	r2, #16
 8007c78:	4904      	ldr	r1, [pc, #16]	; (8007c8c <_ZNSt7__cxx119to_stringEi+0x28>)
 8007c7a:	f000 f8cf 	bl	8007e1c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	0800bbf0 	.word	0x0800bbf0
 8007c8c:	0800b171 	.word	0x0800b171

08007c90 <_ZN7Symbols3numEi>:

Symbol Symbols::m_num[10];
Symbol Symbols::m_op[4];
Symbol Symbols::m_rand;

Symbol& Symbols::num(int num) {
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
	if (m_needs_init) {
 8007c98:	4b08      	ldr	r3, [pc, #32]	; (8007cbc <_ZN7Symbols3numEi+0x2c>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d004      	beq.n	8007caa <_ZN7Symbols3numEi+0x1a>
		init();
 8007ca0:	f000 f83c 	bl	8007d1c <_ZN7Symbols4initEv>
		m_needs_init = false;
 8007ca4:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <_ZN7Symbols3numEi+0x2c>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	701a      	strb	r2, [r3, #0]

	if ((num < 0) || (num > 9)) {
		// TODO: error
	}

	return m_num[num];
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	015b      	lsls	r3, r3, #5
 8007cae:	4a04      	ldr	r2, [pc, #16]	; (8007cc0 <_ZN7Symbols3numEi+0x30>)
 8007cb0:	4413      	add	r3, r2
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	200000e8 	.word	0x200000e8
 8007cc0:	20001604 	.word	0x20001604

08007cc4 <_ZN7Symbols2opE18OperatorSymbolType>:

Symbol& Symbols::op(OperatorSymbolType op) {
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	71fb      	strb	r3, [r7, #7]
	if (m_needs_init) {
 8007cce:	4b08      	ldr	r3, [pc, #32]	; (8007cf0 <_ZN7Symbols2opE18OperatorSymbolType+0x2c>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d004      	beq.n	8007ce0 <_ZN7Symbols2opE18OperatorSymbolType+0x1c>
		init();
 8007cd6:	f000 f821 	bl	8007d1c <_ZN7Symbols4initEv>
		m_needs_init = false;
 8007cda:	4b05      	ldr	r3, [pc, #20]	; (8007cf0 <_ZN7Symbols2opE18OperatorSymbolType+0x2c>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	701a      	strb	r2, [r3, #0]

	if ((op < 0) || (op > 3)) {
		// TODO: error
	}

	return m_op[op];
 8007ce0:	79fb      	ldrb	r3, [r7, #7]
 8007ce2:	015b      	lsls	r3, r3, #5
 8007ce4:	4a03      	ldr	r2, [pc, #12]	; (8007cf4 <_ZN7Symbols2opE18OperatorSymbolType+0x30>)
 8007ce6:	4413      	add	r3, r2
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	200000e8 	.word	0x200000e8
 8007cf4:	20001744 	.word	0x20001744

08007cf8 <_ZN7Symbols4randEv>:

Symbol& Symbols::rand() {
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
	if (m_needs_init) {
 8007cfc:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <_ZN7Symbols4randEv+0x1c>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d004      	beq.n	8007d0e <_ZN7Symbols4randEv+0x16>
		init();
 8007d04:	f000 f80a 	bl	8007d1c <_ZN7Symbols4initEv>
		m_needs_init = false;
 8007d08:	4b02      	ldr	r3, [pc, #8]	; (8007d14 <_ZN7Symbols4randEv+0x1c>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	701a      	strb	r2, [r3, #0]
	}

	return m_rand;
 8007d0e:	4b02      	ldr	r3, [pc, #8]	; (8007d18 <_ZN7Symbols4randEv+0x20>)
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	200000e8 	.word	0x200000e8
 8007d18:	200017c4 	.word	0x200017c4

08007d1c <_ZN7Symbols4initEv>:


void Symbols::init() {
 8007d1c:	b590      	push	{r4, r7, lr}
 8007d1e:	b089      	sub	sp, #36	; 0x24
 8007d20:	af00      	add	r7, sp, #0
	for (int i=0; i<10; i++) {
 8007d22:	2300      	movs	r3, #0
 8007d24:	61fb      	str	r3, [r7, #28]
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	2b09      	cmp	r3, #9
 8007d2a:	dc23      	bgt.n	8007d74 <_ZN7Symbols4initEv+0x58>
		m_num[i].type = SYMBOL_INTEGER;
 8007d2c:	4a2e      	ldr	r2, [pc, #184]	; (8007de8 <_ZN7Symbols4initEv+0xcc>)
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	015b      	lsls	r3, r3, #5
 8007d32:	4413      	add	r3, r2
 8007d34:	2201      	movs	r2, #1
 8007d36:	701a      	strb	r2, [r3, #0]
		m_num[i].rep = std::to_string(i);
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	015b      	lsls	r3, r3, #5
 8007d3c:	4a2a      	ldr	r2, [pc, #168]	; (8007de8 <_ZN7Symbols4initEv+0xcc>)
 8007d3e:	4413      	add	r3, r2
 8007d40:	1d1c      	adds	r4, r3, #4
 8007d42:	1d3b      	adds	r3, r7, #4
 8007d44:	69f9      	ldr	r1, [r7, #28]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7ff ff8c 	bl	8007c64 <_ZNSt7__cxx119to_stringEi>
 8007d4c:	1d3b      	adds	r3, r7, #4
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4620      	mov	r0, r4
 8007d52:	f002 fc63 	bl	800a61c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007d56:	1d3b      	adds	r3, r7, #4
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f002 fc53 	bl	800a604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		m_num[i].data.as_int.value = i;
 8007d5e:	4a22      	ldr	r2, [pc, #136]	; (8007de8 <_ZN7Symbols4initEv+0xcc>)
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	015b      	lsls	r3, r3, #5
 8007d64:	4413      	add	r3, r2
 8007d66:	331c      	adds	r3, #28
 8007d68:	69fa      	ldr	r2, [r7, #28]
 8007d6a:	601a      	str	r2, [r3, #0]
	for (int i=0; i<10; i++) {
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	61fb      	str	r3, [r7, #28]
 8007d72:	e7d8      	b.n	8007d26 <_ZN7Symbols4initEv+0xa>
	}

	m_op[SYMBOL_MULTIPLICATION].type = SYMBOL_OPERATOR;
 8007d74:	4b1d      	ldr	r3, [pc, #116]	; (8007dec <_ZN7Symbols4initEv+0xd0>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	701a      	strb	r2, [r3, #0]
	m_op[SYMBOL_MULTIPLICATION].rep = "*";
 8007d7a:	491d      	ldr	r1, [pc, #116]	; (8007df0 <_ZN7Symbols4initEv+0xd4>)
 8007d7c:	481d      	ldr	r0, [pc, #116]	; (8007df4 <_ZN7Symbols4initEv+0xd8>)
 8007d7e:	f002 fcfe 	bl	800a77e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	m_op[SYMBOL_MULTIPLICATION].data.as_op.op_type = SYMBOL_MULTIPLICATION;
 8007d82:	4b1a      	ldr	r3, [pc, #104]	; (8007dec <_ZN7Symbols4initEv+0xd0>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	771a      	strb	r2, [r3, #28]

	m_op[SYMBOL_DIVISION].type = SYMBOL_OPERATOR;
 8007d88:	4b18      	ldr	r3, [pc, #96]	; (8007dec <_ZN7Symbols4initEv+0xd0>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2020 	strb.w	r2, [r3, #32]
	m_op[SYMBOL_DIVISION].rep = "/";
 8007d90:	4919      	ldr	r1, [pc, #100]	; (8007df8 <_ZN7Symbols4initEv+0xdc>)
 8007d92:	481a      	ldr	r0, [pc, #104]	; (8007dfc <_ZN7Symbols4initEv+0xe0>)
 8007d94:	f002 fcf3 	bl	800a77e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	m_op[SYMBOL_DIVISION].data.as_op.op_type = SYMBOL_DIVISION;
 8007d98:	4b14      	ldr	r3, [pc, #80]	; (8007dec <_ZN7Symbols4initEv+0xd0>)
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	m_op[SYMBOL_ADDITION].type = SYMBOL_OPERATOR;
 8007da0:	4b12      	ldr	r3, [pc, #72]	; (8007dec <_ZN7Symbols4initEv+0xd0>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	m_op[SYMBOL_ADDITION].rep = "+";
 8007da8:	4915      	ldr	r1, [pc, #84]	; (8007e00 <_ZN7Symbols4initEv+0xe4>)
 8007daa:	4816      	ldr	r0, [pc, #88]	; (8007e04 <_ZN7Symbols4initEv+0xe8>)
 8007dac:	f002 fce7 	bl	800a77e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	m_op[SYMBOL_ADDITION].data.as_op.op_type = SYMBOL_ADDITION;
 8007db0:	4b0e      	ldr	r3, [pc, #56]	; (8007dec <_ZN7Symbols4initEv+0xd0>)
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	m_op[SYMBOL_SUBTRACTION].type = SYMBOL_OPERATOR;
 8007db8:	4b0c      	ldr	r3, [pc, #48]	; (8007dec <_ZN7Symbols4initEv+0xd0>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_op[SYMBOL_SUBTRACTION].rep = "-";
 8007dc0:	4911      	ldr	r1, [pc, #68]	; (8007e08 <_ZN7Symbols4initEv+0xec>)
 8007dc2:	4812      	ldr	r0, [pc, #72]	; (8007e0c <_ZN7Symbols4initEv+0xf0>)
 8007dc4:	f002 fcdb 	bl	800a77e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	m_op[SYMBOL_SUBTRACTION].data.as_op.op_type = SYMBOL_SUBTRACTION;
 8007dc8:	4b08      	ldr	r3, [pc, #32]	; (8007dec <_ZN7Symbols4initEv+0xd0>)
 8007dca:	2203      	movs	r2, #3
 8007dcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

	m_rand.type = SYMBOL_RAND;
 8007dd0:	4b0f      	ldr	r3, [pc, #60]	; (8007e10 <_ZN7Symbols4initEv+0xf4>)
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	701a      	strb	r2, [r3, #0]
	m_rand.rep = "d";
 8007dd6:	490f      	ldr	r1, [pc, #60]	; (8007e14 <_ZN7Symbols4initEv+0xf8>)
 8007dd8:	480f      	ldr	r0, [pc, #60]	; (8007e18 <_ZN7Symbols4initEv+0xfc>)
 8007dda:	f002 fcd0 	bl	800a77e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
}
 8007dde:	bf00      	nop
 8007de0:	3724      	adds	r7, #36	; 0x24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd90      	pop	{r4, r7, pc}
 8007de6:	bf00      	nop
 8007de8:	20001604 	.word	0x20001604
 8007dec:	20001744 	.word	0x20001744
 8007df0:	0800bbf4 	.word	0x0800bbf4
 8007df4:	20001748 	.word	0x20001748
 8007df8:	0800bbf8 	.word	0x0800bbf8
 8007dfc:	20001768 	.word	0x20001768
 8007e00:	0800bbfc 	.word	0x0800bbfc
 8007e04:	20001788 	.word	0x20001788
 8007e08:	0800bc00 	.word	0x0800bc00
 8007e0c:	200017a8 	.word	0x200017a8
 8007e10:	200017c4 	.word	0x200017c4
 8007e14:	0800bc04 	.word	0x0800bc04
 8007e18:	200017c8 	.word	0x200017c8

08007e1c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8007e1c:	b408      	push	{r3}
 8007e1e:	b590      	push	{r4, r7, lr}
 8007e20:	b088      	sub	sp, #32
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	60f8      	str	r0, [r7, #12]
 8007e26:	60b9      	str	r1, [r7, #8]
 8007e28:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3307      	adds	r3, #7
 8007e2e:	3307      	adds	r3, #7
 8007e30:	08db      	lsrs	r3, r3, #3
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	ebad 0d03 	sub.w	sp, sp, r3
 8007e38:	466b      	mov	r3, sp
 8007e3a:	3307      	adds	r3, #7
 8007e3c:	08db      	lsrs	r3, r3, #3
 8007e3e:	00db      	lsls	r3, r3, #3
 8007e40:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8007e42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e46:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8007e48:	68bc      	ldr	r4, [r7, #8]
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	69f8      	ldr	r0, [r7, #28]
 8007e52:	47a0      	blx	r4
 8007e54:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	69fa      	ldr	r2, [r7, #28]
 8007e5a:	18d4      	adds	r4, r2, r3
 8007e5c:	f107 0314 	add.w	r3, r7, #20
 8007e60:	4618      	mov	r0, r3
 8007e62:	f002 faec 	bl	800a43e <_ZNSaIcEC1Ev>
 8007e66:	f107 0314 	add.w	r3, r7, #20
 8007e6a:	4622      	mov	r2, r4
 8007e6c:	69f9      	ldr	r1, [r7, #28]
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 f80c 	bl	8007e8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8007e74:	f107 0314 	add.w	r3, r7, #20
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f002 fae1 	bl	800a440 <_ZNSaIcED1Ev>
    }
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	3720      	adds	r7, #32
 8007e82:	46bd      	mov	sp, r7
 8007e84:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8007e88:	b001      	add	sp, #4
 8007e8a:	4770      	bx	lr

08007e8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8007e8c:	b590      	push	{r4, r7, lr}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
 8007e98:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8007e9a:	68fc      	ldr	r4, [r7, #12]
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f002 fae1 	bl	800a464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f002 fc96 	bl	800a7da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	68b9      	ldr	r1, [r7, #8]
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f000 f805 	bl	8007ec2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd90      	pop	{r4, r7, pc}

08007ec2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b086      	sub	sp, #24
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	60f8      	str	r0, [r7, #12]
 8007eca:	60b9      	str	r1, [r7, #8]
 8007ecc:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	68b9      	ldr	r1, [r7, #8]
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 f804 	bl	8007ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8007ed8:	bf00      	nop
 8007eda:	3718      	adds	r7, #24
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8007ee0:	b590      	push	{r4, r7, lr}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8007eee:	4623      	mov	r3, r4
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	68b9      	ldr	r1, [r7, #8]
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 f805 	bl	8007f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8007efa:	bf00      	nop
 8007efc:	371c      	adds	r7, #28
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd90      	pop	{r4, r7, pc}
	...

08007f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8007f12:	68b8      	ldr	r0, [r7, #8]
 8007f14:	f000 f83e 	bl	8007f94 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d005      	beq.n	8007f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d001      	beq.n	8007f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8007f26:	2301      	movs	r3, #1
 8007f28:	e000      	b.n	8007f2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8007f30:	4817      	ldr	r0, [pc, #92]	; (8007f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8007f32:	f002 fa89 	bl	800a448 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8007f36:	6879      	ldr	r1, [r7, #4]
 8007f38:	68b8      	ldr	r0, [r7, #8]
 8007f3a:	f000 f845 	bl	8007fc8 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2b0f      	cmp	r3, #15
 8007f46:	d910      	bls.n	8007f6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8007f48:	f107 0314 	add.w	r3, r7, #20
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4619      	mov	r1, r3
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f002 fa91 	bl	800a478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007f56:	4603      	mov	r3, r0
 8007f58:	4619      	mov	r1, r3
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f002 fa7e 	bl	800a45c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	4619      	mov	r1, r3
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f002 fa7f 	bl	800a468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f002 fa78 	bl	800a460 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8007f70:	4603      	mov	r3, r0
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	68b9      	ldr	r1, [r7, #8]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f002 facd 	bl	800a516 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f002 fa73 	bl	800a46c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8007f86:	bf00      	nop
 8007f88:	3718      	adds	r7, #24
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	0800bc08 	.word	0x0800bc08

08007f94 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	bf0c      	ite	eq
 8007fa2:	2301      	moveq	r3, #1
 8007fa4:	2300      	movne	r3, #0
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	4618      	mov	r0, r3
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8007fc8:	b5b0      	push	{r4, r5, r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8007fd2:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8007fd4:	1d3b      	adds	r3, r7, #4
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff ffec 	bl	8007fb4 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8007fdc:	462a      	mov	r2, r5
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f000 f805 	bl	8007ff0 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8007fe6:	4603      	mov	r3, r0
    }
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bdb0      	pop	{r4, r5, r7, pc}

08007ff0 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	1ad3      	subs	r3, r2, r3
    }
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
	...

08008010 <_Z41__static_initialization_and_destruction_0ii>:
 8008010:	b5b0      	push	{r4, r5, r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d11d      	bne.n	800805c <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008026:	4293      	cmp	r3, r2
 8008028:	d118      	bne.n	800805c <_Z41__static_initialization_and_destruction_0ii+0x4c>
Symbol Symbols::m_num[10];
 800802a:	4b1d      	ldr	r3, [pc, #116]	; (80080a0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800802c:	2409      	movs	r4, #9
 800802e:	461d      	mov	r5, r3
 8008030:	2c00      	cmp	r4, #0
 8008032:	db05      	blt.n	8008040 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8008034:	4628      	mov	r0, r5
 8008036:	f7fa fc26 	bl	8002886 <_ZN6SymbolC1Ev>
 800803a:	3520      	adds	r5, #32
 800803c:	3c01      	subs	r4, #1
 800803e:	e7f7      	b.n	8008030 <_Z41__static_initialization_and_destruction_0ii+0x20>
Symbol Symbols::m_op[4];
 8008040:	4b18      	ldr	r3, [pc, #96]	; (80080a4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8008042:	2403      	movs	r4, #3
 8008044:	461d      	mov	r5, r3
 8008046:	2c00      	cmp	r4, #0
 8008048:	db05      	blt.n	8008056 <_Z41__static_initialization_and_destruction_0ii+0x46>
 800804a:	4628      	mov	r0, r5
 800804c:	f7fa fc1b 	bl	8002886 <_ZN6SymbolC1Ev>
 8008050:	3520      	adds	r5, #32
 8008052:	3c01      	subs	r4, #1
 8008054:	e7f7      	b.n	8008046 <_Z41__static_initialization_and_destruction_0ii+0x36>
Symbol Symbols::m_rand;
 8008056:	4814      	ldr	r0, [pc, #80]	; (80080a8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8008058:	f7fa fc15 	bl	8002886 <_ZN6SymbolC1Ev>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d119      	bne.n	8008096 <_Z41__static_initialization_and_destruction_0ii+0x86>
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008068:	4293      	cmp	r3, r2
 800806a:	d114      	bne.n	8008096 <_Z41__static_initialization_and_destruction_0ii+0x86>
 800806c:	480e      	ldr	r0, [pc, #56]	; (80080a8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800806e:	f7fa fc18 	bl	80028a2 <_ZN6SymbolD1Ev>
Symbol Symbols::m_op[4];
 8008072:	4c0e      	ldr	r4, [pc, #56]	; (80080ac <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8008074:	4b0b      	ldr	r3, [pc, #44]	; (80080a4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8008076:	429c      	cmp	r4, r3
 8008078:	d004      	beq.n	8008084 <_Z41__static_initialization_and_destruction_0ii+0x74>
 800807a:	3c20      	subs	r4, #32
 800807c:	4620      	mov	r0, r4
 800807e:	f7fa fc10 	bl	80028a2 <_ZN6SymbolD1Ev>
 8008082:	e7f7      	b.n	8008074 <_Z41__static_initialization_and_destruction_0ii+0x64>
Symbol Symbols::m_num[10];
 8008084:	4c0a      	ldr	r4, [pc, #40]	; (80080b0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008086:	4b06      	ldr	r3, [pc, #24]	; (80080a0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8008088:	429c      	cmp	r4, r3
 800808a:	d004      	beq.n	8008096 <_Z41__static_initialization_and_destruction_0ii+0x86>
 800808c:	3c20      	subs	r4, #32
 800808e:	4620      	mov	r0, r4
 8008090:	f7fa fc07 	bl	80028a2 <_ZN6SymbolD1Ev>
 8008094:	e7f7      	b.n	8008086 <_Z41__static_initialization_and_destruction_0ii+0x76>
}
 8008096:	bf00      	nop
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bdb0      	pop	{r4, r5, r7, pc}
 800809e:	bf00      	nop
 80080a0:	20001604 	.word	0x20001604
 80080a4:	20001744 	.word	0x20001744
 80080a8:	200017c4 	.word	0x200017c4
 80080ac:	200017c4 	.word	0x200017c4
 80080b0:	20001744 	.word	0x20001744

080080b4 <_GLOBAL__sub_I__ZN7Symbols12m_needs_initE>:
 80080b4:	b580      	push	{r7, lr}
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80080bc:	2001      	movs	r0, #1
 80080be:	f7ff ffa7 	bl	8008010 <_Z41__static_initialization_and_destruction_0ii>
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <_GLOBAL__sub_D__ZN7Symbols12m_needs_initE>:
 80080c4:	b580      	push	{r7, lr}
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80080cc:	2000      	movs	r0, #0
 80080ce:	f7ff ff9f 	bl	8008010 <_Z41__static_initialization_and_destruction_0ii>
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80080d8:	4b0e      	ldr	r3, [pc, #56]	; (8008114 <HAL_Init+0x40>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a0d      	ldr	r2, [pc, #52]	; (8008114 <HAL_Init+0x40>)
 80080de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80080e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80080e4:	4b0b      	ldr	r3, [pc, #44]	; (8008114 <HAL_Init+0x40>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a0a      	ldr	r2, [pc, #40]	; (8008114 <HAL_Init+0x40>)
 80080ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80080ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80080f0:	4b08      	ldr	r3, [pc, #32]	; (8008114 <HAL_Init+0x40>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a07      	ldr	r2, [pc, #28]	; (8008114 <HAL_Init+0x40>)
 80080f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80080fc:	2003      	movs	r0, #3
 80080fe:	f000 f96f 	bl	80083e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008102:	2000      	movs	r0, #0
 8008104:	f000 f808 	bl	8008118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008108:	f7fd ffac 	bl	8006064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	40023c00 	.word	0x40023c00

08008118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008120:	4b12      	ldr	r3, [pc, #72]	; (800816c <HAL_InitTick+0x54>)
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	4b12      	ldr	r3, [pc, #72]	; (8008170 <HAL_InitTick+0x58>)
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	4619      	mov	r1, r3
 800812a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800812e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008132:	fbb2 f3f3 	udiv	r3, r2, r3
 8008136:	4618      	mov	r0, r3
 8008138:	f000 f995 	bl	8008466 <HAL_SYSTICK_Config>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e00e      	b.n	8008164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b0f      	cmp	r3, #15
 800814a:	d80a      	bhi.n	8008162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800814c:	2200      	movs	r2, #0
 800814e:	6879      	ldr	r1, [r7, #4]
 8008150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008154:	f000 f94f 	bl	80083f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008158:	4a06      	ldr	r2, [pc, #24]	; (8008174 <HAL_InitTick+0x5c>)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	e000      	b.n	8008164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
}
 8008164:	4618      	mov	r0, r3
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	200000e4 	.word	0x200000e4
 8008170:	200000f0 	.word	0x200000f0
 8008174:	200000ec 	.word	0x200000ec

08008178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008178:	b480      	push	{r7}
 800817a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800817c:	4b06      	ldr	r3, [pc, #24]	; (8008198 <HAL_IncTick+0x20>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	461a      	mov	r2, r3
 8008182:	4b06      	ldr	r3, [pc, #24]	; (800819c <HAL_IncTick+0x24>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4413      	add	r3, r2
 8008188:	4a04      	ldr	r2, [pc, #16]	; (800819c <HAL_IncTick+0x24>)
 800818a:	6013      	str	r3, [r2, #0]
}
 800818c:	bf00      	nop
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	200000f0 	.word	0x200000f0
 800819c:	200017f0 	.word	0x200017f0

080081a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80081a0:	b480      	push	{r7}
 80081a2:	af00      	add	r7, sp, #0
  return uwTick;
 80081a4:	4b03      	ldr	r3, [pc, #12]	; (80081b4 <HAL_GetTick+0x14>)
 80081a6:	681b      	ldr	r3, [r3, #0]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	200017f0 	.word	0x200017f0

080081b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80081c0:	f7ff ffee 	bl	80081a0 <HAL_GetTick>
 80081c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081d0:	d005      	beq.n	80081de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80081d2:	4b09      	ldr	r3, [pc, #36]	; (80081f8 <HAL_Delay+0x40>)
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	461a      	mov	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	4413      	add	r3, r2
 80081dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80081de:	bf00      	nop
 80081e0:	f7ff ffde 	bl	80081a0 <HAL_GetTick>
 80081e4:	4602      	mov	r2, r0
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d8f7      	bhi.n	80081e0 <HAL_Delay+0x28>
  {
  }
}
 80081f0:	bf00      	nop
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	200000f0 	.word	0x200000f0

080081fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f003 0307 	and.w	r3, r3, #7
 800820a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800820c:	4b0c      	ldr	r3, [pc, #48]	; (8008240 <__NVIC_SetPriorityGrouping+0x44>)
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008218:	4013      	ands	r3, r2
 800821a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800822c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800822e:	4a04      	ldr	r2, [pc, #16]	; (8008240 <__NVIC_SetPriorityGrouping+0x44>)
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	60d3      	str	r3, [r2, #12]
}
 8008234:	bf00      	nop
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	e000ed00 	.word	0xe000ed00

08008244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008244:	b480      	push	{r7}
 8008246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008248:	4b04      	ldr	r3, [pc, #16]	; (800825c <__NVIC_GetPriorityGrouping+0x18>)
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	0a1b      	lsrs	r3, r3, #8
 800824e:	f003 0307 	and.w	r3, r3, #7
}
 8008252:	4618      	mov	r0, r3
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	e000ed00 	.word	0xe000ed00

08008260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	4603      	mov	r3, r0
 8008268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800826a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800826e:	2b00      	cmp	r3, #0
 8008270:	db0b      	blt.n	800828a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	f003 021f 	and.w	r2, r3, #31
 8008278:	4907      	ldr	r1, [pc, #28]	; (8008298 <__NVIC_EnableIRQ+0x38>)
 800827a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800827e:	095b      	lsrs	r3, r3, #5
 8008280:	2001      	movs	r0, #1
 8008282:	fa00 f202 	lsl.w	r2, r0, r2
 8008286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800828a:	bf00      	nop
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	e000e100 	.word	0xe000e100

0800829c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	db10      	blt.n	80082d0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082ae:	79fb      	ldrb	r3, [r7, #7]
 80082b0:	f003 021f 	and.w	r2, r3, #31
 80082b4:	4909      	ldr	r1, [pc, #36]	; (80082dc <__NVIC_DisableIRQ+0x40>)
 80082b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082ba:	095b      	lsrs	r3, r3, #5
 80082bc:	2001      	movs	r0, #1
 80082be:	fa00 f202 	lsl.w	r2, r0, r2
 80082c2:	3320      	adds	r3, #32
 80082c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80082c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80082cc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	e000e100 	.word	0xe000e100

080082e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	6039      	str	r1, [r7, #0]
 80082ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	db0a      	blt.n	800830a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	490c      	ldr	r1, [pc, #48]	; (800832c <__NVIC_SetPriority+0x4c>)
 80082fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082fe:	0112      	lsls	r2, r2, #4
 8008300:	b2d2      	uxtb	r2, r2
 8008302:	440b      	add	r3, r1
 8008304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008308:	e00a      	b.n	8008320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	b2da      	uxtb	r2, r3
 800830e:	4908      	ldr	r1, [pc, #32]	; (8008330 <__NVIC_SetPriority+0x50>)
 8008310:	79fb      	ldrb	r3, [r7, #7]
 8008312:	f003 030f 	and.w	r3, r3, #15
 8008316:	3b04      	subs	r3, #4
 8008318:	0112      	lsls	r2, r2, #4
 800831a:	b2d2      	uxtb	r2, r2
 800831c:	440b      	add	r3, r1
 800831e:	761a      	strb	r2, [r3, #24]
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	e000e100 	.word	0xe000e100
 8008330:	e000ed00 	.word	0xe000ed00

08008334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008334:	b480      	push	{r7}
 8008336:	b089      	sub	sp, #36	; 0x24
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f003 0307 	and.w	r3, r3, #7
 8008346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	f1c3 0307 	rsb	r3, r3, #7
 800834e:	2b04      	cmp	r3, #4
 8008350:	bf28      	it	cs
 8008352:	2304      	movcs	r3, #4
 8008354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	3304      	adds	r3, #4
 800835a:	2b06      	cmp	r3, #6
 800835c:	d902      	bls.n	8008364 <NVIC_EncodePriority+0x30>
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	3b03      	subs	r3, #3
 8008362:	e000      	b.n	8008366 <NVIC_EncodePriority+0x32>
 8008364:	2300      	movs	r3, #0
 8008366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	fa02 f303 	lsl.w	r3, r2, r3
 8008372:	43da      	mvns	r2, r3
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	401a      	ands	r2, r3
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800837c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	fa01 f303 	lsl.w	r3, r1, r3
 8008386:	43d9      	mvns	r1, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800838c:	4313      	orrs	r3, r2
         );
}
 800838e:	4618      	mov	r0, r3
 8008390:	3724      	adds	r7, #36	; 0x24
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
	...

0800839c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80083ac:	d301      	bcc.n	80083b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80083ae:	2301      	movs	r3, #1
 80083b0:	e00f      	b.n	80083d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80083b2:	4a0a      	ldr	r2, [pc, #40]	; (80083dc <SysTick_Config+0x40>)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80083ba:	210f      	movs	r1, #15
 80083bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083c0:	f7ff ff8e 	bl	80082e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80083c4:	4b05      	ldr	r3, [pc, #20]	; (80083dc <SysTick_Config+0x40>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80083ca:	4b04      	ldr	r3, [pc, #16]	; (80083dc <SysTick_Config+0x40>)
 80083cc:	2207      	movs	r2, #7
 80083ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	e000e010 	.word	0xe000e010

080083e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff ff07 	bl	80081fc <__NVIC_SetPriorityGrouping>
}
 80083ee:	bf00      	nop
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b086      	sub	sp, #24
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	4603      	mov	r3, r0
 80083fe:	60b9      	str	r1, [r7, #8]
 8008400:	607a      	str	r2, [r7, #4]
 8008402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008404:	2300      	movs	r3, #0
 8008406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008408:	f7ff ff1c 	bl	8008244 <__NVIC_GetPriorityGrouping>
 800840c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	68b9      	ldr	r1, [r7, #8]
 8008412:	6978      	ldr	r0, [r7, #20]
 8008414:	f7ff ff8e 	bl	8008334 <NVIC_EncodePriority>
 8008418:	4602      	mov	r2, r0
 800841a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800841e:	4611      	mov	r1, r2
 8008420:	4618      	mov	r0, r3
 8008422:	f7ff ff5d 	bl	80082e0 <__NVIC_SetPriority>
}
 8008426:	bf00      	nop
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b082      	sub	sp, #8
 8008432:	af00      	add	r7, sp, #0
 8008434:	4603      	mov	r3, r0
 8008436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800843c:	4618      	mov	r0, r3
 800843e:	f7ff ff0f 	bl	8008260 <__NVIC_EnableIRQ>
}
 8008442:	bf00      	nop
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b082      	sub	sp, #8
 800844e:	af00      	add	r7, sp, #0
 8008450:	4603      	mov	r3, r0
 8008452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008458:	4618      	mov	r0, r3
 800845a:	f7ff ff1f 	bl	800829c <__NVIC_DisableIRQ>
}
 800845e:	bf00      	nop
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b082      	sub	sp, #8
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7ff ff94 	bl	800839c <SysTick_Config>
 8008474:	4603      	mov	r3, r0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
	...

08008480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008480:	b480      	push	{r7}
 8008482:	b089      	sub	sp, #36	; 0x24
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800848a:	2300      	movs	r3, #0
 800848c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800848e:	2300      	movs	r3, #0
 8008490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008492:	2300      	movs	r3, #0
 8008494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008496:	2300      	movs	r3, #0
 8008498:	61fb      	str	r3, [r7, #28]
 800849a:	e165      	b.n	8008768 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800849c:	2201      	movs	r2, #1
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	fa02 f303 	lsl.w	r3, r2, r3
 80084a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	4013      	ands	r3, r2
 80084ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	f040 8154 	bne.w	8008762 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d00b      	beq.n	80084da <HAL_GPIO_Init+0x5a>
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d007      	beq.n	80084da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80084ce:	2b11      	cmp	r3, #17
 80084d0:	d003      	beq.n	80084da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	2b12      	cmp	r3, #18
 80084d8:	d130      	bne.n	800853c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	2203      	movs	r2, #3
 80084e6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ea:	43db      	mvns	r3, r3
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	4013      	ands	r3, r2
 80084f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	fa02 f303 	lsl.w	r3, r2, r3
 80084fe:	69ba      	ldr	r2, [r7, #24]
 8008500:	4313      	orrs	r3, r2
 8008502:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008510:	2201      	movs	r2, #1
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	fa02 f303 	lsl.w	r3, r2, r3
 8008518:	43db      	mvns	r3, r3
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	4013      	ands	r3, r2
 800851e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	091b      	lsrs	r3, r3, #4
 8008526:	f003 0201 	and.w	r2, r3, #1
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	fa02 f303 	lsl.w	r3, r2, r3
 8008530:	69ba      	ldr	r2, [r7, #24]
 8008532:	4313      	orrs	r3, r2
 8008534:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	69ba      	ldr	r2, [r7, #24]
 800853a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	2203      	movs	r2, #3
 8008548:	fa02 f303 	lsl.w	r3, r2, r3
 800854c:	43db      	mvns	r3, r3
 800854e:	69ba      	ldr	r2, [r7, #24]
 8008550:	4013      	ands	r3, r2
 8008552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	005b      	lsls	r3, r3, #1
 800855c:	fa02 f303 	lsl.w	r3, r2, r3
 8008560:	69ba      	ldr	r2, [r7, #24]
 8008562:	4313      	orrs	r3, r2
 8008564:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	69ba      	ldr	r2, [r7, #24]
 800856a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	2b02      	cmp	r3, #2
 8008572:	d003      	beq.n	800857c <HAL_GPIO_Init+0xfc>
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	2b12      	cmp	r3, #18
 800857a:	d123      	bne.n	80085c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	08da      	lsrs	r2, r3, #3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3208      	adds	r2, #8
 8008584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008588:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	f003 0307 	and.w	r3, r3, #7
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	220f      	movs	r2, #15
 8008594:	fa02 f303 	lsl.w	r3, r2, r3
 8008598:	43db      	mvns	r3, r3
 800859a:	69ba      	ldr	r2, [r7, #24]
 800859c:	4013      	ands	r3, r2
 800859e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	691a      	ldr	r2, [r3, #16]
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	fa02 f303 	lsl.w	r3, r2, r3
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	08da      	lsrs	r2, r3, #3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	3208      	adds	r2, #8
 80085be:	69b9      	ldr	r1, [r7, #24]
 80085c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	2203      	movs	r2, #3
 80085d0:	fa02 f303 	lsl.w	r3, r2, r3
 80085d4:	43db      	mvns	r3, r3
 80085d6:	69ba      	ldr	r2, [r7, #24]
 80085d8:	4013      	ands	r3, r2
 80085da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	f003 0203 	and.w	r2, r3, #3
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	005b      	lsls	r3, r3, #1
 80085e8:	fa02 f303 	lsl.w	r3, r2, r3
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 80ae 	beq.w	8008762 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008606:	2300      	movs	r3, #0
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	4b5c      	ldr	r3, [pc, #368]	; (800877c <HAL_GPIO_Init+0x2fc>)
 800860c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800860e:	4a5b      	ldr	r2, [pc, #364]	; (800877c <HAL_GPIO_Init+0x2fc>)
 8008610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008614:	6453      	str	r3, [r2, #68]	; 0x44
 8008616:	4b59      	ldr	r3, [pc, #356]	; (800877c <HAL_GPIO_Init+0x2fc>)
 8008618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800861a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008622:	4a57      	ldr	r2, [pc, #348]	; (8008780 <HAL_GPIO_Init+0x300>)
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	089b      	lsrs	r3, r3, #2
 8008628:	3302      	adds	r3, #2
 800862a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800862e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	f003 0303 	and.w	r3, r3, #3
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	220f      	movs	r2, #15
 800863a:	fa02 f303 	lsl.w	r3, r2, r3
 800863e:	43db      	mvns	r3, r3
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	4013      	ands	r3, r2
 8008644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a4e      	ldr	r2, [pc, #312]	; (8008784 <HAL_GPIO_Init+0x304>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d025      	beq.n	800869a <HAL_GPIO_Init+0x21a>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a4d      	ldr	r2, [pc, #308]	; (8008788 <HAL_GPIO_Init+0x308>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d01f      	beq.n	8008696 <HAL_GPIO_Init+0x216>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a4c      	ldr	r2, [pc, #304]	; (800878c <HAL_GPIO_Init+0x30c>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d019      	beq.n	8008692 <HAL_GPIO_Init+0x212>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a4b      	ldr	r2, [pc, #300]	; (8008790 <HAL_GPIO_Init+0x310>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d013      	beq.n	800868e <HAL_GPIO_Init+0x20e>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a4a      	ldr	r2, [pc, #296]	; (8008794 <HAL_GPIO_Init+0x314>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d00d      	beq.n	800868a <HAL_GPIO_Init+0x20a>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a49      	ldr	r2, [pc, #292]	; (8008798 <HAL_GPIO_Init+0x318>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d007      	beq.n	8008686 <HAL_GPIO_Init+0x206>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a48      	ldr	r2, [pc, #288]	; (800879c <HAL_GPIO_Init+0x31c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d101      	bne.n	8008682 <HAL_GPIO_Init+0x202>
 800867e:	2306      	movs	r3, #6
 8008680:	e00c      	b.n	800869c <HAL_GPIO_Init+0x21c>
 8008682:	2307      	movs	r3, #7
 8008684:	e00a      	b.n	800869c <HAL_GPIO_Init+0x21c>
 8008686:	2305      	movs	r3, #5
 8008688:	e008      	b.n	800869c <HAL_GPIO_Init+0x21c>
 800868a:	2304      	movs	r3, #4
 800868c:	e006      	b.n	800869c <HAL_GPIO_Init+0x21c>
 800868e:	2303      	movs	r3, #3
 8008690:	e004      	b.n	800869c <HAL_GPIO_Init+0x21c>
 8008692:	2302      	movs	r3, #2
 8008694:	e002      	b.n	800869c <HAL_GPIO_Init+0x21c>
 8008696:	2301      	movs	r3, #1
 8008698:	e000      	b.n	800869c <HAL_GPIO_Init+0x21c>
 800869a:	2300      	movs	r3, #0
 800869c:	69fa      	ldr	r2, [r7, #28]
 800869e:	f002 0203 	and.w	r2, r2, #3
 80086a2:	0092      	lsls	r2, r2, #2
 80086a4:	4093      	lsls	r3, r2
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086ac:	4934      	ldr	r1, [pc, #208]	; (8008780 <HAL_GPIO_Init+0x300>)
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	089b      	lsrs	r3, r3, #2
 80086b2:	3302      	adds	r3, #2
 80086b4:	69ba      	ldr	r2, [r7, #24]
 80086b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80086ba:	4b39      	ldr	r3, [pc, #228]	; (80087a0 <HAL_GPIO_Init+0x320>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	43db      	mvns	r3, r3
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	4013      	ands	r3, r2
 80086c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80086d6:	69ba      	ldr	r2, [r7, #24]
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	4313      	orrs	r3, r2
 80086dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80086de:	4a30      	ldr	r2, [pc, #192]	; (80087a0 <HAL_GPIO_Init+0x320>)
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80086e4:	4b2e      	ldr	r3, [pc, #184]	; (80087a0 <HAL_GPIO_Init+0x320>)
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	43db      	mvns	r3, r3
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	4013      	ands	r3, r2
 80086f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d003      	beq.n	8008708 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	4313      	orrs	r3, r2
 8008706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008708:	4a25      	ldr	r2, [pc, #148]	; (80087a0 <HAL_GPIO_Init+0x320>)
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800870e:	4b24      	ldr	r3, [pc, #144]	; (80087a0 <HAL_GPIO_Init+0x320>)
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	43db      	mvns	r3, r3
 8008718:	69ba      	ldr	r2, [r7, #24]
 800871a:	4013      	ands	r3, r2
 800871c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800872a:	69ba      	ldr	r2, [r7, #24]
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	4313      	orrs	r3, r2
 8008730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008732:	4a1b      	ldr	r2, [pc, #108]	; (80087a0 <HAL_GPIO_Init+0x320>)
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008738:	4b19      	ldr	r3, [pc, #100]	; (80087a0 <HAL_GPIO_Init+0x320>)
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	43db      	mvns	r3, r3
 8008742:	69ba      	ldr	r2, [r7, #24]
 8008744:	4013      	ands	r3, r2
 8008746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d003      	beq.n	800875c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	4313      	orrs	r3, r2
 800875a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800875c:	4a10      	ldr	r2, [pc, #64]	; (80087a0 <HAL_GPIO_Init+0x320>)
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	3301      	adds	r3, #1
 8008766:	61fb      	str	r3, [r7, #28]
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	2b0f      	cmp	r3, #15
 800876c:	f67f ae96 	bls.w	800849c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008770:	bf00      	nop
 8008772:	3724      	adds	r7, #36	; 0x24
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	40023800 	.word	0x40023800
 8008780:	40013800 	.word	0x40013800
 8008784:	40020000 	.word	0x40020000
 8008788:	40020400 	.word	0x40020400
 800878c:	40020800 	.word	0x40020800
 8008790:	40020c00 	.word	0x40020c00
 8008794:	40021000 	.word	0x40021000
 8008798:	40021400 	.word	0x40021400
 800879c:	40021800 	.word	0x40021800
 80087a0:	40013c00 	.word	0x40013c00

080087a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	691a      	ldr	r2, [r3, #16]
 80087b4:	887b      	ldrh	r3, [r7, #2]
 80087b6:	4013      	ands	r3, r2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d002      	beq.n	80087c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80087bc:	2301      	movs	r3, #1
 80087be:	73fb      	strb	r3, [r7, #15]
 80087c0:	e001      	b.n	80087c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	807b      	strh	r3, [r7, #2]
 80087e0:	4613      	mov	r3, r2
 80087e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80087e4:	787b      	ldrb	r3, [r7, #1]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80087ea:	887a      	ldrh	r2, [r7, #2]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80087f0:	e003      	b.n	80087fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80087f2:	887b      	ldrh	r3, [r7, #2]
 80087f4:	041a      	lsls	r2, r3, #16
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	619a      	str	r2, [r3, #24]
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
	...

08008808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d101      	bne.n	800881c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e0cc      	b.n	80089b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800881c:	4b68      	ldr	r3, [pc, #416]	; (80089c0 <HAL_RCC_ClockConfig+0x1b8>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 030f 	and.w	r3, r3, #15
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	429a      	cmp	r2, r3
 8008828:	d90c      	bls.n	8008844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800882a:	4b65      	ldr	r3, [pc, #404]	; (80089c0 <HAL_RCC_ClockConfig+0x1b8>)
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	b2d2      	uxtb	r2, r2
 8008830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008832:	4b63      	ldr	r3, [pc, #396]	; (80089c0 <HAL_RCC_ClockConfig+0x1b8>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 030f 	and.w	r3, r3, #15
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	429a      	cmp	r2, r3
 800883e:	d001      	beq.n	8008844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e0b8      	b.n	80089b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d020      	beq.n	8008892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0304 	and.w	r3, r3, #4
 8008858:	2b00      	cmp	r3, #0
 800885a:	d005      	beq.n	8008868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800885c:	4b59      	ldr	r3, [pc, #356]	; (80089c4 <HAL_RCC_ClockConfig+0x1bc>)
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	4a58      	ldr	r2, [pc, #352]	; (80089c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008862:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008866:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0308 	and.w	r3, r3, #8
 8008870:	2b00      	cmp	r3, #0
 8008872:	d005      	beq.n	8008880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008874:	4b53      	ldr	r3, [pc, #332]	; (80089c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	4a52      	ldr	r2, [pc, #328]	; (80089c4 <HAL_RCC_ClockConfig+0x1bc>)
 800887a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800887e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008880:	4b50      	ldr	r3, [pc, #320]	; (80089c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	494d      	ldr	r1, [pc, #308]	; (80089c4 <HAL_RCC_ClockConfig+0x1bc>)
 800888e:	4313      	orrs	r3, r2
 8008890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b00      	cmp	r3, #0
 800889c:	d044      	beq.n	8008928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d107      	bne.n	80088b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088a6:	4b47      	ldr	r3, [pc, #284]	; (80089c4 <HAL_RCC_ClockConfig+0x1bc>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d119      	bne.n	80088e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e07f      	b.n	80089b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d003      	beq.n	80088c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d107      	bne.n	80088d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088c6:	4b3f      	ldr	r3, [pc, #252]	; (80089c4 <HAL_RCC_ClockConfig+0x1bc>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d109      	bne.n	80088e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e06f      	b.n	80089b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088d6:	4b3b      	ldr	r3, [pc, #236]	; (80089c4 <HAL_RCC_ClockConfig+0x1bc>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 0302 	and.w	r3, r3, #2
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d101      	bne.n	80088e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e067      	b.n	80089b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088e6:	4b37      	ldr	r3, [pc, #220]	; (80089c4 <HAL_RCC_ClockConfig+0x1bc>)
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f023 0203 	bic.w	r2, r3, #3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	4934      	ldr	r1, [pc, #208]	; (80089c4 <HAL_RCC_ClockConfig+0x1bc>)
 80088f4:	4313      	orrs	r3, r2
 80088f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80088f8:	f7ff fc52 	bl	80081a0 <HAL_GetTick>
 80088fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088fe:	e00a      	b.n	8008916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008900:	f7ff fc4e 	bl	80081a0 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	f241 3288 	movw	r2, #5000	; 0x1388
 800890e:	4293      	cmp	r3, r2
 8008910:	d901      	bls.n	8008916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e04f      	b.n	80089b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008916:	4b2b      	ldr	r3, [pc, #172]	; (80089c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f003 020c 	and.w	r2, r3, #12
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	429a      	cmp	r2, r3
 8008926:	d1eb      	bne.n	8008900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008928:	4b25      	ldr	r3, [pc, #148]	; (80089c0 <HAL_RCC_ClockConfig+0x1b8>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 030f 	and.w	r3, r3, #15
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	429a      	cmp	r2, r3
 8008934:	d20c      	bcs.n	8008950 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008936:	4b22      	ldr	r3, [pc, #136]	; (80089c0 <HAL_RCC_ClockConfig+0x1b8>)
 8008938:	683a      	ldr	r2, [r7, #0]
 800893a:	b2d2      	uxtb	r2, r2
 800893c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800893e:	4b20      	ldr	r3, [pc, #128]	; (80089c0 <HAL_RCC_ClockConfig+0x1b8>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 030f 	and.w	r3, r3, #15
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	d001      	beq.n	8008950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e032      	b.n	80089b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b00      	cmp	r3, #0
 800895a:	d008      	beq.n	800896e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800895c:	4b19      	ldr	r3, [pc, #100]	; (80089c4 <HAL_RCC_ClockConfig+0x1bc>)
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	4916      	ldr	r1, [pc, #88]	; (80089c4 <HAL_RCC_ClockConfig+0x1bc>)
 800896a:	4313      	orrs	r3, r2
 800896c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0308 	and.w	r3, r3, #8
 8008976:	2b00      	cmp	r3, #0
 8008978:	d009      	beq.n	800898e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800897a:	4b12      	ldr	r3, [pc, #72]	; (80089c4 <HAL_RCC_ClockConfig+0x1bc>)
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	00db      	lsls	r3, r3, #3
 8008988:	490e      	ldr	r1, [pc, #56]	; (80089c4 <HAL_RCC_ClockConfig+0x1bc>)
 800898a:	4313      	orrs	r3, r2
 800898c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800898e:	f000 f855 	bl	8008a3c <HAL_RCC_GetSysClockFreq>
 8008992:	4601      	mov	r1, r0
 8008994:	4b0b      	ldr	r3, [pc, #44]	; (80089c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	091b      	lsrs	r3, r3, #4
 800899a:	f003 030f 	and.w	r3, r3, #15
 800899e:	4a0a      	ldr	r2, [pc, #40]	; (80089c8 <HAL_RCC_ClockConfig+0x1c0>)
 80089a0:	5cd3      	ldrb	r3, [r2, r3]
 80089a2:	fa21 f303 	lsr.w	r3, r1, r3
 80089a6:	4a09      	ldr	r2, [pc, #36]	; (80089cc <HAL_RCC_ClockConfig+0x1c4>)
 80089a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80089aa:	4b09      	ldr	r3, [pc, #36]	; (80089d0 <HAL_RCC_ClockConfig+0x1c8>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7ff fbb2 	bl	8008118 <HAL_InitTick>

  return HAL_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	40023c00 	.word	0x40023c00
 80089c4:	40023800 	.word	0x40023800
 80089c8:	0800d1f8 	.word	0x0800d1f8
 80089cc:	200000e4 	.word	0x200000e4
 80089d0:	200000ec 	.word	0x200000ec

080089d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089d4:	b480      	push	{r7}
 80089d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80089d8:	4b03      	ldr	r3, [pc, #12]	; (80089e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80089da:	681b      	ldr	r3, [r3, #0]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	200000e4 	.word	0x200000e4

080089ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80089f0:	f7ff fff0 	bl	80089d4 <HAL_RCC_GetHCLKFreq>
 80089f4:	4601      	mov	r1, r0
 80089f6:	4b05      	ldr	r3, [pc, #20]	; (8008a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	0a9b      	lsrs	r3, r3, #10
 80089fc:	f003 0307 	and.w	r3, r3, #7
 8008a00:	4a03      	ldr	r2, [pc, #12]	; (8008a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a02:	5cd3      	ldrb	r3, [r2, r3]
 8008a04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	40023800 	.word	0x40023800
 8008a10:	0800d208 	.word	0x0800d208

08008a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008a18:	f7ff ffdc 	bl	80089d4 <HAL_RCC_GetHCLKFreq>
 8008a1c:	4601      	mov	r1, r0
 8008a1e:	4b05      	ldr	r3, [pc, #20]	; (8008a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	0b5b      	lsrs	r3, r3, #13
 8008a24:	f003 0307 	and.w	r3, r3, #7
 8008a28:	4a03      	ldr	r2, [pc, #12]	; (8008a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a2a:	5cd3      	ldrb	r3, [r2, r3]
 8008a2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	40023800 	.word	0x40023800
 8008a38:	0800d208 	.word	0x0800d208

08008a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8008a46:	2300      	movs	r3, #0
 8008a48:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008a52:	2300      	movs	r3, #0
 8008a54:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a56:	4bc6      	ldr	r3, [pc, #792]	; (8008d70 <HAL_RCC_GetSysClockFreq+0x334>)
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f003 030c 	and.w	r3, r3, #12
 8008a5e:	2b0c      	cmp	r3, #12
 8008a60:	f200 817e 	bhi.w	8008d60 <HAL_RCC_GetSysClockFreq+0x324>
 8008a64:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <HAL_RCC_GetSysClockFreq+0x30>)
 8008a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6a:	bf00      	nop
 8008a6c:	08008aa1 	.word	0x08008aa1
 8008a70:	08008d61 	.word	0x08008d61
 8008a74:	08008d61 	.word	0x08008d61
 8008a78:	08008d61 	.word	0x08008d61
 8008a7c:	08008aa7 	.word	0x08008aa7
 8008a80:	08008d61 	.word	0x08008d61
 8008a84:	08008d61 	.word	0x08008d61
 8008a88:	08008d61 	.word	0x08008d61
 8008a8c:	08008aad 	.word	0x08008aad
 8008a90:	08008d61 	.word	0x08008d61
 8008a94:	08008d61 	.word	0x08008d61
 8008a98:	08008d61 	.word	0x08008d61
 8008a9c:	08008c09 	.word	0x08008c09
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008aa0:	4bb4      	ldr	r3, [pc, #720]	; (8008d74 <HAL_RCC_GetSysClockFreq+0x338>)
 8008aa2:	613b      	str	r3, [r7, #16]
       break;
 8008aa4:	e15f      	b.n	8008d66 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008aa6:	4bb4      	ldr	r3, [pc, #720]	; (8008d78 <HAL_RCC_GetSysClockFreq+0x33c>)
 8008aa8:	613b      	str	r3, [r7, #16]
      break;
 8008aaa:	e15c      	b.n	8008d66 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008aac:	4bb0      	ldr	r3, [pc, #704]	; (8008d70 <HAL_RCC_GetSysClockFreq+0x334>)
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ab4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ab6:	4bae      	ldr	r3, [pc, #696]	; (8008d70 <HAL_RCC_GetSysClockFreq+0x334>)
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d04a      	beq.n	8008b58 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ac2:	4bab      	ldr	r3, [pc, #684]	; (8008d70 <HAL_RCC_GetSysClockFreq+0x334>)
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	099b      	lsrs	r3, r3, #6
 8008ac8:	f04f 0400 	mov.w	r4, #0
 8008acc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008ad0:	f04f 0200 	mov.w	r2, #0
 8008ad4:	ea03 0501 	and.w	r5, r3, r1
 8008ad8:	ea04 0602 	and.w	r6, r4, r2
 8008adc:	4629      	mov	r1, r5
 8008ade:	4632      	mov	r2, r6
 8008ae0:	f04f 0300 	mov.w	r3, #0
 8008ae4:	f04f 0400 	mov.w	r4, #0
 8008ae8:	0154      	lsls	r4, r2, #5
 8008aea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008aee:	014b      	lsls	r3, r1, #5
 8008af0:	4619      	mov	r1, r3
 8008af2:	4622      	mov	r2, r4
 8008af4:	1b49      	subs	r1, r1, r5
 8008af6:	eb62 0206 	sbc.w	r2, r2, r6
 8008afa:	f04f 0300 	mov.w	r3, #0
 8008afe:	f04f 0400 	mov.w	r4, #0
 8008b02:	0194      	lsls	r4, r2, #6
 8008b04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008b08:	018b      	lsls	r3, r1, #6
 8008b0a:	1a5b      	subs	r3, r3, r1
 8008b0c:	eb64 0402 	sbc.w	r4, r4, r2
 8008b10:	f04f 0100 	mov.w	r1, #0
 8008b14:	f04f 0200 	mov.w	r2, #0
 8008b18:	00e2      	lsls	r2, r4, #3
 8008b1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008b1e:	00d9      	lsls	r1, r3, #3
 8008b20:	460b      	mov	r3, r1
 8008b22:	4614      	mov	r4, r2
 8008b24:	195b      	adds	r3, r3, r5
 8008b26:	eb44 0406 	adc.w	r4, r4, r6
 8008b2a:	f04f 0100 	mov.w	r1, #0
 8008b2e:	f04f 0200 	mov.w	r2, #0
 8008b32:	0262      	lsls	r2, r4, #9
 8008b34:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008b38:	0259      	lsls	r1, r3, #9
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4614      	mov	r4, r2
 8008b3e:	4618      	mov	r0, r3
 8008b40:	4621      	mov	r1, r4
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f04f 0400 	mov.w	r4, #0
 8008b48:	461a      	mov	r2, r3
 8008b4a:	4623      	mov	r3, r4
 8008b4c:	f7f7 fc08 	bl	8000360 <__aeabi_uldivmod>
 8008b50:	4603      	mov	r3, r0
 8008b52:	460c      	mov	r4, r1
 8008b54:	617b      	str	r3, [r7, #20]
 8008b56:	e049      	b.n	8008bec <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b58:	4b85      	ldr	r3, [pc, #532]	; (8008d70 <HAL_RCC_GetSysClockFreq+0x334>)
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	099b      	lsrs	r3, r3, #6
 8008b5e:	f04f 0400 	mov.w	r4, #0
 8008b62:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008b66:	f04f 0200 	mov.w	r2, #0
 8008b6a:	ea03 0501 	and.w	r5, r3, r1
 8008b6e:	ea04 0602 	and.w	r6, r4, r2
 8008b72:	4629      	mov	r1, r5
 8008b74:	4632      	mov	r2, r6
 8008b76:	f04f 0300 	mov.w	r3, #0
 8008b7a:	f04f 0400 	mov.w	r4, #0
 8008b7e:	0154      	lsls	r4, r2, #5
 8008b80:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008b84:	014b      	lsls	r3, r1, #5
 8008b86:	4619      	mov	r1, r3
 8008b88:	4622      	mov	r2, r4
 8008b8a:	1b49      	subs	r1, r1, r5
 8008b8c:	eb62 0206 	sbc.w	r2, r2, r6
 8008b90:	f04f 0300 	mov.w	r3, #0
 8008b94:	f04f 0400 	mov.w	r4, #0
 8008b98:	0194      	lsls	r4, r2, #6
 8008b9a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008b9e:	018b      	lsls	r3, r1, #6
 8008ba0:	1a5b      	subs	r3, r3, r1
 8008ba2:	eb64 0402 	sbc.w	r4, r4, r2
 8008ba6:	f04f 0100 	mov.w	r1, #0
 8008baa:	f04f 0200 	mov.w	r2, #0
 8008bae:	00e2      	lsls	r2, r4, #3
 8008bb0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008bb4:	00d9      	lsls	r1, r3, #3
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4614      	mov	r4, r2
 8008bba:	195b      	adds	r3, r3, r5
 8008bbc:	eb44 0406 	adc.w	r4, r4, r6
 8008bc0:	f04f 0100 	mov.w	r1, #0
 8008bc4:	f04f 0200 	mov.w	r2, #0
 8008bc8:	02a2      	lsls	r2, r4, #10
 8008bca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008bce:	0299      	lsls	r1, r3, #10
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4614      	mov	r4, r2
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f04f 0400 	mov.w	r4, #0
 8008bde:	461a      	mov	r2, r3
 8008be0:	4623      	mov	r3, r4
 8008be2:	f7f7 fbbd 	bl	8000360 <__aeabi_uldivmod>
 8008be6:	4603      	mov	r3, r0
 8008be8:	460c      	mov	r4, r1
 8008bea:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008bec:	4b60      	ldr	r3, [pc, #384]	; (8008d70 <HAL_RCC_GetSysClockFreq+0x334>)
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	0c1b      	lsrs	r3, r3, #16
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c04:	613b      	str	r3, [r7, #16]
      break;
 8008c06:	e0ae      	b.n	8008d66 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c08:	4b59      	ldr	r3, [pc, #356]	; (8008d70 <HAL_RCC_GetSysClockFreq+0x334>)
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c10:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c12:	4b57      	ldr	r3, [pc, #348]	; (8008d70 <HAL_RCC_GetSysClockFreq+0x334>)
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d04a      	beq.n	8008cb4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c1e:	4b54      	ldr	r3, [pc, #336]	; (8008d70 <HAL_RCC_GetSysClockFreq+0x334>)
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	099b      	lsrs	r3, r3, #6
 8008c24:	f04f 0400 	mov.w	r4, #0
 8008c28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008c2c:	f04f 0200 	mov.w	r2, #0
 8008c30:	ea03 0501 	and.w	r5, r3, r1
 8008c34:	ea04 0602 	and.w	r6, r4, r2
 8008c38:	4629      	mov	r1, r5
 8008c3a:	4632      	mov	r2, r6
 8008c3c:	f04f 0300 	mov.w	r3, #0
 8008c40:	f04f 0400 	mov.w	r4, #0
 8008c44:	0154      	lsls	r4, r2, #5
 8008c46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008c4a:	014b      	lsls	r3, r1, #5
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	4622      	mov	r2, r4
 8008c50:	1b49      	subs	r1, r1, r5
 8008c52:	eb62 0206 	sbc.w	r2, r2, r6
 8008c56:	f04f 0300 	mov.w	r3, #0
 8008c5a:	f04f 0400 	mov.w	r4, #0
 8008c5e:	0194      	lsls	r4, r2, #6
 8008c60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008c64:	018b      	lsls	r3, r1, #6
 8008c66:	1a5b      	subs	r3, r3, r1
 8008c68:	eb64 0402 	sbc.w	r4, r4, r2
 8008c6c:	f04f 0100 	mov.w	r1, #0
 8008c70:	f04f 0200 	mov.w	r2, #0
 8008c74:	00e2      	lsls	r2, r4, #3
 8008c76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008c7a:	00d9      	lsls	r1, r3, #3
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	4614      	mov	r4, r2
 8008c80:	195b      	adds	r3, r3, r5
 8008c82:	eb44 0406 	adc.w	r4, r4, r6
 8008c86:	f04f 0100 	mov.w	r1, #0
 8008c8a:	f04f 0200 	mov.w	r2, #0
 8008c8e:	0262      	lsls	r2, r4, #9
 8008c90:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008c94:	0259      	lsls	r1, r3, #9
 8008c96:	460b      	mov	r3, r1
 8008c98:	4614      	mov	r4, r2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f04f 0400 	mov.w	r4, #0
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	4623      	mov	r3, r4
 8008ca8:	f7f7 fb5a 	bl	8000360 <__aeabi_uldivmod>
 8008cac:	4603      	mov	r3, r0
 8008cae:	460c      	mov	r4, r1
 8008cb0:	617b      	str	r3, [r7, #20]
 8008cb2:	e049      	b.n	8008d48 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cb4:	4b2e      	ldr	r3, [pc, #184]	; (8008d70 <HAL_RCC_GetSysClockFreq+0x334>)
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	099b      	lsrs	r3, r3, #6
 8008cba:	f04f 0400 	mov.w	r4, #0
 8008cbe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008cc2:	f04f 0200 	mov.w	r2, #0
 8008cc6:	ea03 0501 	and.w	r5, r3, r1
 8008cca:	ea04 0602 	and.w	r6, r4, r2
 8008cce:	4629      	mov	r1, r5
 8008cd0:	4632      	mov	r2, r6
 8008cd2:	f04f 0300 	mov.w	r3, #0
 8008cd6:	f04f 0400 	mov.w	r4, #0
 8008cda:	0154      	lsls	r4, r2, #5
 8008cdc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008ce0:	014b      	lsls	r3, r1, #5
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	4622      	mov	r2, r4
 8008ce6:	1b49      	subs	r1, r1, r5
 8008ce8:	eb62 0206 	sbc.w	r2, r2, r6
 8008cec:	f04f 0300 	mov.w	r3, #0
 8008cf0:	f04f 0400 	mov.w	r4, #0
 8008cf4:	0194      	lsls	r4, r2, #6
 8008cf6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008cfa:	018b      	lsls	r3, r1, #6
 8008cfc:	1a5b      	subs	r3, r3, r1
 8008cfe:	eb64 0402 	sbc.w	r4, r4, r2
 8008d02:	f04f 0100 	mov.w	r1, #0
 8008d06:	f04f 0200 	mov.w	r2, #0
 8008d0a:	00e2      	lsls	r2, r4, #3
 8008d0c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008d10:	00d9      	lsls	r1, r3, #3
 8008d12:	460b      	mov	r3, r1
 8008d14:	4614      	mov	r4, r2
 8008d16:	195b      	adds	r3, r3, r5
 8008d18:	eb44 0406 	adc.w	r4, r4, r6
 8008d1c:	f04f 0100 	mov.w	r1, #0
 8008d20:	f04f 0200 	mov.w	r2, #0
 8008d24:	02a2      	lsls	r2, r4, #10
 8008d26:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008d2a:	0299      	lsls	r1, r3, #10
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4614      	mov	r4, r2
 8008d30:	4618      	mov	r0, r3
 8008d32:	4621      	mov	r1, r4
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f04f 0400 	mov.w	r4, #0
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	4623      	mov	r3, r4
 8008d3e:	f7f7 fb0f 	bl	8000360 <__aeabi_uldivmod>
 8008d42:	4603      	mov	r3, r0
 8008d44:	460c      	mov	r4, r1
 8008d46:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008d48:	4b09      	ldr	r3, [pc, #36]	; (8008d70 <HAL_RCC_GetSysClockFreq+0x334>)
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	0f1b      	lsrs	r3, r3, #28
 8008d4e:	f003 0307 	and.w	r3, r3, #7
 8008d52:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8008d54:	697a      	ldr	r2, [r7, #20]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d5c:	613b      	str	r3, [r7, #16]
      break;
 8008d5e:	e002      	b.n	8008d66 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d60:	4b04      	ldr	r3, [pc, #16]	; (8008d74 <HAL_RCC_GetSysClockFreq+0x338>)
 8008d62:	613b      	str	r3, [r7, #16]
      break;
 8008d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d66:	693b      	ldr	r3, [r7, #16]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	371c      	adds	r7, #28
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d70:	40023800 	.word	0x40023800
 8008d74:	00f42400 	.word	0x00f42400
 8008d78:	007a1200 	.word	0x007a1200

08008d7c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d84:	2300      	movs	r3, #0
 8008d86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f000 8083 	beq.w	8008e9c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008d96:	4b95      	ldr	r3, [pc, #596]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f003 030c 	and.w	r3, r3, #12
 8008d9e:	2b04      	cmp	r3, #4
 8008da0:	d019      	beq.n	8008dd6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008da2:	4b92      	ldr	r3, [pc, #584]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008daa:	2b08      	cmp	r3, #8
 8008dac:	d106      	bne.n	8008dbc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008dae:	4b8f      	ldr	r3, [pc, #572]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dba:	d00c      	beq.n	8008dd6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008dbc:	4b8b      	ldr	r3, [pc, #556]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008dc4:	2b0c      	cmp	r3, #12
 8008dc6:	d112      	bne.n	8008dee <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008dc8:	4b88      	ldr	r3, [pc, #544]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dd4:	d10b      	bne.n	8008dee <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dd6:	4b85      	ldr	r3, [pc, #532]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d05b      	beq.n	8008e9a <HAL_RCC_OscConfig+0x11e>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d157      	bne.n	8008e9a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e216      	b.n	800921c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008df6:	d106      	bne.n	8008e06 <HAL_RCC_OscConfig+0x8a>
 8008df8:	4b7c      	ldr	r3, [pc, #496]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a7b      	ldr	r2, [pc, #492]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e02:	6013      	str	r3, [r2, #0]
 8008e04:	e01d      	b.n	8008e42 <HAL_RCC_OscConfig+0xc6>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e0e:	d10c      	bne.n	8008e2a <HAL_RCC_OscConfig+0xae>
 8008e10:	4b76      	ldr	r3, [pc, #472]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a75      	ldr	r2, [pc, #468]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008e16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e1a:	6013      	str	r3, [r2, #0]
 8008e1c:	4b73      	ldr	r3, [pc, #460]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a72      	ldr	r2, [pc, #456]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e26:	6013      	str	r3, [r2, #0]
 8008e28:	e00b      	b.n	8008e42 <HAL_RCC_OscConfig+0xc6>
 8008e2a:	4b70      	ldr	r3, [pc, #448]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a6f      	ldr	r2, [pc, #444]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e34:	6013      	str	r3, [r2, #0]
 8008e36:	4b6d      	ldr	r3, [pc, #436]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a6c      	ldr	r2, [pc, #432]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e40:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d013      	beq.n	8008e72 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e4a:	f7ff f9a9 	bl	80081a0 <HAL_GetTick>
 8008e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e50:	e008      	b.n	8008e64 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e52:	f7ff f9a5 	bl	80081a0 <HAL_GetTick>
 8008e56:	4602      	mov	r2, r0
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	2b64      	cmp	r3, #100	; 0x64
 8008e5e:	d901      	bls.n	8008e64 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e1db      	b.n	800921c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e64:	4b61      	ldr	r3, [pc, #388]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d0f0      	beq.n	8008e52 <HAL_RCC_OscConfig+0xd6>
 8008e70:	e014      	b.n	8008e9c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e72:	f7ff f995 	bl	80081a0 <HAL_GetTick>
 8008e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e78:	e008      	b.n	8008e8c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e7a:	f7ff f991 	bl	80081a0 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	2b64      	cmp	r3, #100	; 0x64
 8008e86:	d901      	bls.n	8008e8c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e1c7      	b.n	800921c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e8c:	4b57      	ldr	r3, [pc, #348]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1f0      	bne.n	8008e7a <HAL_RCC_OscConfig+0xfe>
 8008e98:	e000      	b.n	8008e9c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e9a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0302 	and.w	r3, r3, #2
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d06f      	beq.n	8008f88 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008ea8:	4b50      	ldr	r3, [pc, #320]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	f003 030c 	and.w	r3, r3, #12
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d017      	beq.n	8008ee4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008eb4:	4b4d      	ldr	r3, [pc, #308]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008ebc:	2b08      	cmp	r3, #8
 8008ebe:	d105      	bne.n	8008ecc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008ec0:	4b4a      	ldr	r3, [pc, #296]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00b      	beq.n	8008ee4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ecc:	4b47      	ldr	r3, [pc, #284]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008ed4:	2b0c      	cmp	r3, #12
 8008ed6:	d11c      	bne.n	8008f12 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ed8:	4b44      	ldr	r3, [pc, #272]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d116      	bne.n	8008f12 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ee4:	4b41      	ldr	r3, [pc, #260]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0302 	and.w	r3, r3, #2
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d005      	beq.n	8008efc <HAL_RCC_OscConfig+0x180>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d001      	beq.n	8008efc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e18f      	b.n	800921c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008efc:	4b3b      	ldr	r3, [pc, #236]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	00db      	lsls	r3, r3, #3
 8008f0a:	4938      	ldr	r1, [pc, #224]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f10:	e03a      	b.n	8008f88 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d020      	beq.n	8008f5c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f1a:	4b35      	ldr	r3, [pc, #212]	; (8008ff0 <HAL_RCC_OscConfig+0x274>)
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f20:	f7ff f93e 	bl	80081a0 <HAL_GetTick>
 8008f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f26:	e008      	b.n	8008f3a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f28:	f7ff f93a 	bl	80081a0 <HAL_GetTick>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d901      	bls.n	8008f3a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008f36:	2303      	movs	r3, #3
 8008f38:	e170      	b.n	800921c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f3a:	4b2c      	ldr	r3, [pc, #176]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d0f0      	beq.n	8008f28 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f46:	4b29      	ldr	r3, [pc, #164]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	00db      	lsls	r3, r3, #3
 8008f54:	4925      	ldr	r1, [pc, #148]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	600b      	str	r3, [r1, #0]
 8008f5a:	e015      	b.n	8008f88 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f5c:	4b24      	ldr	r3, [pc, #144]	; (8008ff0 <HAL_RCC_OscConfig+0x274>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f62:	f7ff f91d 	bl	80081a0 <HAL_GetTick>
 8008f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f68:	e008      	b.n	8008f7c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f6a:	f7ff f919 	bl	80081a0 <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d901      	bls.n	8008f7c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e14f      	b.n	800921c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f7c:	4b1b      	ldr	r3, [pc, #108]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1f0      	bne.n	8008f6a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0308 	and.w	r3, r3, #8
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d037      	beq.n	8009004 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d016      	beq.n	8008fca <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f9c:	4b15      	ldr	r3, [pc, #84]	; (8008ff4 <HAL_RCC_OscConfig+0x278>)
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fa2:	f7ff f8fd 	bl	80081a0 <HAL_GetTick>
 8008fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008fa8:	e008      	b.n	8008fbc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008faa:	f7ff f8f9 	bl	80081a0 <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d901      	bls.n	8008fbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e12f      	b.n	800921c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008fbc:	4b0b      	ldr	r3, [pc, #44]	; (8008fec <HAL_RCC_OscConfig+0x270>)
 8008fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fc0:	f003 0302 	and.w	r3, r3, #2
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0f0      	beq.n	8008faa <HAL_RCC_OscConfig+0x22e>
 8008fc8:	e01c      	b.n	8009004 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008fca:	4b0a      	ldr	r3, [pc, #40]	; (8008ff4 <HAL_RCC_OscConfig+0x278>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fd0:	f7ff f8e6 	bl	80081a0 <HAL_GetTick>
 8008fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008fd6:	e00f      	b.n	8008ff8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008fd8:	f7ff f8e2 	bl	80081a0 <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d908      	bls.n	8008ff8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e118      	b.n	800921c <HAL_RCC_OscConfig+0x4a0>
 8008fea:	bf00      	nop
 8008fec:	40023800 	.word	0x40023800
 8008ff0:	42470000 	.word	0x42470000
 8008ff4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ff8:	4b8a      	ldr	r3, [pc, #552]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 8008ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ffc:	f003 0302 	and.w	r3, r3, #2
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1e9      	bne.n	8008fd8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0304 	and.w	r3, r3, #4
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 8097 	beq.w	8009140 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009012:	2300      	movs	r3, #0
 8009014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009016:	4b83      	ldr	r3, [pc, #524]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 8009018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10f      	bne.n	8009042 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
 8009026:	4b7f      	ldr	r3, [pc, #508]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 8009028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902a:	4a7e      	ldr	r2, [pc, #504]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 800902c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009030:	6413      	str	r3, [r2, #64]	; 0x40
 8009032:	4b7c      	ldr	r3, [pc, #496]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 8009034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800903a:	60fb      	str	r3, [r7, #12]
 800903c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800903e:	2301      	movs	r3, #1
 8009040:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009042:	4b79      	ldr	r3, [pc, #484]	; (8009228 <HAL_RCC_OscConfig+0x4ac>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800904a:	2b00      	cmp	r3, #0
 800904c:	d118      	bne.n	8009080 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800904e:	4b76      	ldr	r3, [pc, #472]	; (8009228 <HAL_RCC_OscConfig+0x4ac>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a75      	ldr	r2, [pc, #468]	; (8009228 <HAL_RCC_OscConfig+0x4ac>)
 8009054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800905a:	f7ff f8a1 	bl	80081a0 <HAL_GetTick>
 800905e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009060:	e008      	b.n	8009074 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009062:	f7ff f89d 	bl	80081a0 <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	2b02      	cmp	r3, #2
 800906e:	d901      	bls.n	8009074 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009070:	2303      	movs	r3, #3
 8009072:	e0d3      	b.n	800921c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009074:	4b6c      	ldr	r3, [pc, #432]	; (8009228 <HAL_RCC_OscConfig+0x4ac>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800907c:	2b00      	cmp	r3, #0
 800907e:	d0f0      	beq.n	8009062 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d106      	bne.n	8009096 <HAL_RCC_OscConfig+0x31a>
 8009088:	4b66      	ldr	r3, [pc, #408]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 800908a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908c:	4a65      	ldr	r2, [pc, #404]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 800908e:	f043 0301 	orr.w	r3, r3, #1
 8009092:	6713      	str	r3, [r2, #112]	; 0x70
 8009094:	e01c      	b.n	80090d0 <HAL_RCC_OscConfig+0x354>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	2b05      	cmp	r3, #5
 800909c:	d10c      	bne.n	80090b8 <HAL_RCC_OscConfig+0x33c>
 800909e:	4b61      	ldr	r3, [pc, #388]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 80090a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a2:	4a60      	ldr	r2, [pc, #384]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 80090a4:	f043 0304 	orr.w	r3, r3, #4
 80090a8:	6713      	str	r3, [r2, #112]	; 0x70
 80090aa:	4b5e      	ldr	r3, [pc, #376]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 80090ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ae:	4a5d      	ldr	r2, [pc, #372]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 80090b0:	f043 0301 	orr.w	r3, r3, #1
 80090b4:	6713      	str	r3, [r2, #112]	; 0x70
 80090b6:	e00b      	b.n	80090d0 <HAL_RCC_OscConfig+0x354>
 80090b8:	4b5a      	ldr	r3, [pc, #360]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 80090ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090bc:	4a59      	ldr	r2, [pc, #356]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 80090be:	f023 0301 	bic.w	r3, r3, #1
 80090c2:	6713      	str	r3, [r2, #112]	; 0x70
 80090c4:	4b57      	ldr	r3, [pc, #348]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 80090c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c8:	4a56      	ldr	r2, [pc, #344]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 80090ca:	f023 0304 	bic.w	r3, r3, #4
 80090ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d015      	beq.n	8009104 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090d8:	f7ff f862 	bl	80081a0 <HAL_GetTick>
 80090dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090de:	e00a      	b.n	80090f6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090e0:	f7ff f85e 	bl	80081a0 <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d901      	bls.n	80090f6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e092      	b.n	800921c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090f6:	4b4b      	ldr	r3, [pc, #300]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 80090f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090fa:	f003 0302 	and.w	r3, r3, #2
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0ee      	beq.n	80090e0 <HAL_RCC_OscConfig+0x364>
 8009102:	e014      	b.n	800912e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009104:	f7ff f84c 	bl	80081a0 <HAL_GetTick>
 8009108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800910a:	e00a      	b.n	8009122 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800910c:	f7ff f848 	bl	80081a0 <HAL_GetTick>
 8009110:	4602      	mov	r2, r0
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	f241 3288 	movw	r2, #5000	; 0x1388
 800911a:	4293      	cmp	r3, r2
 800911c:	d901      	bls.n	8009122 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e07c      	b.n	800921c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009122:	4b40      	ldr	r3, [pc, #256]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 8009124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009126:	f003 0302 	and.w	r3, r3, #2
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1ee      	bne.n	800910c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800912e:	7dfb      	ldrb	r3, [r7, #23]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d105      	bne.n	8009140 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009134:	4b3b      	ldr	r3, [pc, #236]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 8009136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009138:	4a3a      	ldr	r2, [pc, #232]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 800913a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800913e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	699b      	ldr	r3, [r3, #24]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d068      	beq.n	800921a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009148:	4b36      	ldr	r3, [pc, #216]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f003 030c 	and.w	r3, r3, #12
 8009150:	2b08      	cmp	r3, #8
 8009152:	d060      	beq.n	8009216 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	2b02      	cmp	r3, #2
 800915a:	d145      	bne.n	80091e8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800915c:	4b33      	ldr	r3, [pc, #204]	; (800922c <HAL_RCC_OscConfig+0x4b0>)
 800915e:	2200      	movs	r2, #0
 8009160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009162:	f7ff f81d 	bl	80081a0 <HAL_GetTick>
 8009166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009168:	e008      	b.n	800917c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800916a:	f7ff f819 	bl	80081a0 <HAL_GetTick>
 800916e:	4602      	mov	r2, r0
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	2b02      	cmp	r3, #2
 8009176:	d901      	bls.n	800917c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8009178:	2303      	movs	r3, #3
 800917a:	e04f      	b.n	800921c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800917c:	4b29      	ldr	r3, [pc, #164]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1f0      	bne.n	800916a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	69da      	ldr	r2, [r3, #28]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	431a      	orrs	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009196:	019b      	lsls	r3, r3, #6
 8009198:	431a      	orrs	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919e:	085b      	lsrs	r3, r3, #1
 80091a0:	3b01      	subs	r3, #1
 80091a2:	041b      	lsls	r3, r3, #16
 80091a4:	431a      	orrs	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091aa:	061b      	lsls	r3, r3, #24
 80091ac:	431a      	orrs	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b2:	071b      	lsls	r3, r3, #28
 80091b4:	491b      	ldr	r1, [pc, #108]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 80091b6:	4313      	orrs	r3, r2
 80091b8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80091ba:	4b1c      	ldr	r3, [pc, #112]	; (800922c <HAL_RCC_OscConfig+0x4b0>)
 80091bc:	2201      	movs	r2, #1
 80091be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091c0:	f7fe ffee 	bl	80081a0 <HAL_GetTick>
 80091c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091c6:	e008      	b.n	80091da <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091c8:	f7fe ffea 	bl	80081a0 <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d901      	bls.n	80091da <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e020      	b.n	800921c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091da:	4b12      	ldr	r3, [pc, #72]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0f0      	beq.n	80091c8 <HAL_RCC_OscConfig+0x44c>
 80091e6:	e018      	b.n	800921a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091e8:	4b10      	ldr	r3, [pc, #64]	; (800922c <HAL_RCC_OscConfig+0x4b0>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ee:	f7fe ffd7 	bl	80081a0 <HAL_GetTick>
 80091f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091f4:	e008      	b.n	8009208 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091f6:	f7fe ffd3 	bl	80081a0 <HAL_GetTick>
 80091fa:	4602      	mov	r2, r0
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	2b02      	cmp	r3, #2
 8009202:	d901      	bls.n	8009208 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	e009      	b.n	800921c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009208:	4b06      	ldr	r3, [pc, #24]	; (8009224 <HAL_RCC_OscConfig+0x4a8>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1f0      	bne.n	80091f6 <HAL_RCC_OscConfig+0x47a>
 8009214:	e001      	b.n	800921a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e000      	b.n	800921c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3718      	adds	r7, #24
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	40023800 	.word	0x40023800
 8009228:	40007000 	.word	0x40007000
 800922c:	42470060 	.word	0x42470060

08009230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e056      	b.n	80092f0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800924e:	b2db      	uxtb	r3, r3
 8009250:	2b00      	cmp	r3, #0
 8009252:	d106      	bne.n	8009262 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7fc ff71 	bl	8006144 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2202      	movs	r2, #2
 8009266:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009278:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	685a      	ldr	r2, [r3, #4]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	431a      	orrs	r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	431a      	orrs	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	431a      	orrs	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	695b      	ldr	r3, [r3, #20]
 8009294:	431a      	orrs	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800929e:	431a      	orrs	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	431a      	orrs	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	ea42 0103 	orr.w	r1, r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	430a      	orrs	r2, r1
 80092b8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	0c1b      	lsrs	r3, r3, #16
 80092c0:	f003 0104 	and.w	r1, r3, #4
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	430a      	orrs	r2, r1
 80092ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	69da      	ldr	r2, [r3, #28]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b088      	sub	sp, #32
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	603b      	str	r3, [r7, #0]
 8009304:	4613      	mov	r3, r2
 8009306:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009308:	2300      	movs	r3, #0
 800930a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009312:	2b01      	cmp	r3, #1
 8009314:	d101      	bne.n	800931a <HAL_SPI_Transmit+0x22>
 8009316:	2302      	movs	r3, #2
 8009318:	e11e      	b.n	8009558 <HAL_SPI_Transmit+0x260>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009322:	f7fe ff3d 	bl	80081a0 <HAL_GetTick>
 8009326:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009328:	88fb      	ldrh	r3, [r7, #6]
 800932a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b01      	cmp	r3, #1
 8009336:	d002      	beq.n	800933e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009338:	2302      	movs	r3, #2
 800933a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800933c:	e103      	b.n	8009546 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <HAL_SPI_Transmit+0x52>
 8009344:	88fb      	ldrh	r3, [r7, #6]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d102      	bne.n	8009350 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800934e:	e0fa      	b.n	8009546 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2203      	movs	r2, #3
 8009354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	88fa      	ldrh	r2, [r7, #6]
 8009368:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	88fa      	ldrh	r2, [r7, #6]
 800936e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2200      	movs	r2, #0
 8009374:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009396:	d107      	bne.n	80093a8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b2:	2b40      	cmp	r3, #64	; 0x40
 80093b4:	d007      	beq.n	80093c6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ce:	d14b      	bne.n	8009468 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <HAL_SPI_Transmit+0xe6>
 80093d8:	8afb      	ldrh	r3, [r7, #22]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d13e      	bne.n	800945c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e2:	881a      	ldrh	r2, [r3, #0]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ee:	1c9a      	adds	r2, r3, #2
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	3b01      	subs	r3, #1
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009402:	e02b      	b.n	800945c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f003 0302 	and.w	r3, r3, #2
 800940e:	2b02      	cmp	r3, #2
 8009410:	d112      	bne.n	8009438 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009416:	881a      	ldrh	r2, [r3, #0]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009422:	1c9a      	adds	r2, r3, #2
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800942c:	b29b      	uxth	r3, r3
 800942e:	3b01      	subs	r3, #1
 8009430:	b29a      	uxth	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	86da      	strh	r2, [r3, #54]	; 0x36
 8009436:	e011      	b.n	800945c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009438:	f7fe feb2 	bl	80081a0 <HAL_GetTick>
 800943c:	4602      	mov	r2, r0
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	429a      	cmp	r2, r3
 8009446:	d803      	bhi.n	8009450 <HAL_SPI_Transmit+0x158>
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800944e:	d102      	bne.n	8009456 <HAL_SPI_Transmit+0x15e>
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d102      	bne.n	800945c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	77fb      	strb	r3, [r7, #31]
          goto error;
 800945a:	e074      	b.n	8009546 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009460:	b29b      	uxth	r3, r3
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1ce      	bne.n	8009404 <HAL_SPI_Transmit+0x10c>
 8009466:	e04c      	b.n	8009502 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d002      	beq.n	8009476 <HAL_SPI_Transmit+0x17e>
 8009470:	8afb      	ldrh	r3, [r7, #22]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d140      	bne.n	80094f8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	330c      	adds	r3, #12
 8009480:	7812      	ldrb	r2, [r2, #0]
 8009482:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009488:	1c5a      	adds	r2, r3, #1
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009492:	b29b      	uxth	r3, r3
 8009494:	3b01      	subs	r3, #1
 8009496:	b29a      	uxth	r2, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800949c:	e02c      	b.n	80094f8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f003 0302 	and.w	r3, r3, #2
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d113      	bne.n	80094d4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	330c      	adds	r3, #12
 80094b6:	7812      	ldrb	r2, [r2, #0]
 80094b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094be:	1c5a      	adds	r2, r3, #1
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	3b01      	subs	r3, #1
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80094d2:	e011      	b.n	80094f8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094d4:	f7fe fe64 	bl	80081a0 <HAL_GetTick>
 80094d8:	4602      	mov	r2, r0
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d803      	bhi.n	80094ec <HAL_SPI_Transmit+0x1f4>
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094ea:	d102      	bne.n	80094f2 <HAL_SPI_Transmit+0x1fa>
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d102      	bne.n	80094f8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80094f2:	2303      	movs	r3, #3
 80094f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80094f6:	e026      	b.n	8009546 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1cd      	bne.n	800949e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009502:	69ba      	ldr	r2, [r7, #24]
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f000 f894 	bl	8009634 <SPI_EndRxTxTransaction>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d002      	beq.n	8009518 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2220      	movs	r2, #32
 8009516:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10a      	bne.n	8009536 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009520:	2300      	movs	r3, #0
 8009522:	613b      	str	r3, [r7, #16]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	613b      	str	r3, [r7, #16]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	613b      	str	r3, [r7, #16]
 8009534:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800953a:	2b00      	cmp	r3, #0
 800953c:	d002      	beq.n	8009544 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	77fb      	strb	r3, [r7, #31]
 8009542:	e000      	b.n	8009546 <HAL_SPI_Transmit+0x24e>
  }

error:
 8009544:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2201      	movs	r2, #1
 800954a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009556:	7ffb      	ldrb	r3, [r7, #31]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3720      	adds	r7, #32
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	603b      	str	r3, [r7, #0]
 800956c:	4613      	mov	r3, r2
 800956e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009570:	e04c      	b.n	800960c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009578:	d048      	beq.n	800960c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800957a:	f7fe fe11 	bl	80081a0 <HAL_GetTick>
 800957e:	4602      	mov	r2, r0
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	429a      	cmp	r2, r3
 8009588:	d902      	bls.n	8009590 <SPI_WaitFlagStateUntilTimeout+0x30>
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d13d      	bne.n	800960c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	685a      	ldr	r2, [r3, #4]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800959e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095a8:	d111      	bne.n	80095ce <SPI_WaitFlagStateUntilTimeout+0x6e>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095b2:	d004      	beq.n	80095be <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095bc:	d107      	bne.n	80095ce <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095d6:	d10f      	bne.n	80095f8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095e6:	601a      	str	r2, [r3, #0]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009608:	2303      	movs	r3, #3
 800960a:	e00f      	b.n	800962c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	689a      	ldr	r2, [r3, #8]
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	4013      	ands	r3, r2
 8009616:	68ba      	ldr	r2, [r7, #8]
 8009618:	429a      	cmp	r2, r3
 800961a:	bf0c      	ite	eq
 800961c:	2301      	moveq	r3, #1
 800961e:	2300      	movne	r3, #0
 8009620:	b2db      	uxtb	r3, r3
 8009622:	461a      	mov	r2, r3
 8009624:	79fb      	ldrb	r3, [r7, #7]
 8009626:	429a      	cmp	r2, r3
 8009628:	d1a3      	bne.n	8009572 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b088      	sub	sp, #32
 8009638:	af02      	add	r7, sp, #8
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009640:	4b1b      	ldr	r3, [pc, #108]	; (80096b0 <SPI_EndRxTxTransaction+0x7c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a1b      	ldr	r2, [pc, #108]	; (80096b4 <SPI_EndRxTxTransaction+0x80>)
 8009646:	fba2 2303 	umull	r2, r3, r2, r3
 800964a:	0d5b      	lsrs	r3, r3, #21
 800964c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009650:	fb02 f303 	mul.w	r3, r2, r3
 8009654:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800965e:	d112      	bne.n	8009686 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2200      	movs	r2, #0
 8009668:	2180      	movs	r1, #128	; 0x80
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f7ff ff78 	bl	8009560 <SPI_WaitFlagStateUntilTimeout>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d016      	beq.n	80096a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800967a:	f043 0220 	orr.w	r2, r3, #32
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	e00f      	b.n	80096a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00a      	beq.n	80096a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	3b01      	subs	r3, #1
 8009690:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800969c:	2b80      	cmp	r3, #128	; 0x80
 800969e:	d0f2      	beq.n	8009686 <SPI_EndRxTxTransaction+0x52>
 80096a0:	e000      	b.n	80096a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80096a2:	bf00      	nop
  }

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	200000e4 	.word	0x200000e4
 80096b4:	165e9f81 	.word	0x165e9f81

080096b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e01d      	b.n	8009706 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d106      	bne.n	80096e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7fc fd88 	bl	80061f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2202      	movs	r2, #2
 80096e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	3304      	adds	r3, #4
 80096f4:	4619      	mov	r1, r3
 80096f6:	4610      	mov	r0, r2
 80096f8:	f000 f9e2 	bl	8009ac0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800970e:	b480      	push	{r7}
 8009710:	b085      	sub	sp, #20
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2202      	movs	r2, #2
 800971a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	f003 0307 	and.w	r3, r3, #7
 8009728:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2b06      	cmp	r3, #6
 800972e:	d007      	beq.n	8009740 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f042 0201 	orr.w	r2, r2, #1
 800973e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3714      	adds	r7, #20
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009756:	b480      	push	{r7}
 8009758:	b083      	sub	sp, #12
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2202      	movs	r2, #2
 8009762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6a1a      	ldr	r2, [r3, #32]
 800976c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009770:	4013      	ands	r3, r2
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10f      	bne.n	8009796 <HAL_TIM_Base_Stop+0x40>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	6a1a      	ldr	r2, [r3, #32]
 800977c:	f240 4344 	movw	r3, #1092	; 0x444
 8009780:	4013      	ands	r3, r2
 8009782:	2b00      	cmp	r3, #0
 8009784:	d107      	bne.n	8009796 <HAL_TIM_Base_Stop+0x40>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f022 0201 	bic.w	r2, r2, #1
 8009794:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68da      	ldr	r2, [r3, #12]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f042 0201 	orr.w	r2, r2, #1
 80097c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	f003 0307 	and.w	r3, r3, #7
 80097ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2b06      	cmp	r3, #6
 80097d4:	d007      	beq.n	80097e6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f042 0201 	orr.w	r2, r2, #1
 80097e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	68da      	ldr	r2, [r3, #12]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f022 0201 	bic.w	r2, r2, #1
 800980a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6a1a      	ldr	r2, [r3, #32]
 8009812:	f241 1311 	movw	r3, #4369	; 0x1111
 8009816:	4013      	ands	r3, r2
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10f      	bne.n	800983c <HAL_TIM_Base_Stop_IT+0x48>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6a1a      	ldr	r2, [r3, #32]
 8009822:	f240 4344 	movw	r3, #1092	; 0x444
 8009826:	4013      	ands	r3, r2
 8009828:	2b00      	cmp	r3, #0
 800982a:	d107      	bne.n	800983c <HAL_TIM_Base_Stop_IT+0x48>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f022 0201 	bic.w	r2, r2, #1
 800983a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b082      	sub	sp, #8
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	f003 0302 	and.w	r3, r3, #2
 800985c:	2b02      	cmp	r3, #2
 800985e:	d122      	bne.n	80098a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	f003 0302 	and.w	r3, r3, #2
 800986a:	2b02      	cmp	r3, #2
 800986c:	d11b      	bne.n	80098a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f06f 0202 	mvn.w	r2, #2
 8009876:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	f003 0303 	and.w	r3, r3, #3
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 f8f8 	bl	8009a82 <HAL_TIM_IC_CaptureCallback>
 8009892:	e005      	b.n	80098a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 f8ea 	bl	8009a6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f8fb 	bl	8009a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b04      	cmp	r3, #4
 80098b2:	d122      	bne.n	80098fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b04      	cmp	r3, #4
 80098c0:	d11b      	bne.n	80098fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f06f 0204 	mvn.w	r2, #4
 80098ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2202      	movs	r2, #2
 80098d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 f8ce 	bl	8009a82 <HAL_TIM_IC_CaptureCallback>
 80098e6:	e005      	b.n	80098f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f8c0 	bl	8009a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f8d1 	bl	8009a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	f003 0308 	and.w	r3, r3, #8
 8009904:	2b08      	cmp	r3, #8
 8009906:	d122      	bne.n	800994e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	f003 0308 	and.w	r3, r3, #8
 8009912:	2b08      	cmp	r3, #8
 8009914:	d11b      	bne.n	800994e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f06f 0208 	mvn.w	r2, #8
 800991e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2204      	movs	r2, #4
 8009924:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	69db      	ldr	r3, [r3, #28]
 800992c:	f003 0303 	and.w	r3, r3, #3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d003      	beq.n	800993c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f8a4 	bl	8009a82 <HAL_TIM_IC_CaptureCallback>
 800993a:	e005      	b.n	8009948 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f896 	bl	8009a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f8a7 	bl	8009a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	f003 0310 	and.w	r3, r3, #16
 8009958:	2b10      	cmp	r3, #16
 800995a:	d122      	bne.n	80099a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	f003 0310 	and.w	r3, r3, #16
 8009966:	2b10      	cmp	r3, #16
 8009968:	d11b      	bne.n	80099a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f06f 0210 	mvn.w	r2, #16
 8009972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2208      	movs	r2, #8
 8009978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	69db      	ldr	r3, [r3, #28]
 8009980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009984:	2b00      	cmp	r3, #0
 8009986:	d003      	beq.n	8009990 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f87a 	bl	8009a82 <HAL_TIM_IC_CaptureCallback>
 800998e:	e005      	b.n	800999c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f86c 	bl	8009a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f87d 	bl	8009a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d10e      	bne.n	80099ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d107      	bne.n	80099ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f06f 0201 	mvn.w	r2, #1
 80099c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f846 	bl	8009a5a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099d8:	2b80      	cmp	r3, #128	; 0x80
 80099da:	d10e      	bne.n	80099fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099e6:	2b80      	cmp	r3, #128	; 0x80
 80099e8:	d107      	bne.n	80099fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f90d 	bl	8009c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a04:	2b40      	cmp	r3, #64	; 0x40
 8009a06:	d10e      	bne.n	8009a26 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a12:	2b40      	cmp	r3, #64	; 0x40
 8009a14:	d107      	bne.n	8009a26 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f842 	bl	8009aaa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	f003 0320 	and.w	r3, r3, #32
 8009a30:	2b20      	cmp	r3, #32
 8009a32:	d10e      	bne.n	8009a52 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	f003 0320 	and.w	r3, r3, #32
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	d107      	bne.n	8009a52 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f06f 0220 	mvn.w	r2, #32
 8009a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 f8d7 	bl	8009c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a52:	bf00      	nop
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b083      	sub	sp, #12
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009a62:	bf00      	nop
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b083      	sub	sp, #12
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a76:	bf00      	nop
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b083      	sub	sp, #12
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a8a:	bf00      	nop
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a9e:	bf00      	nop
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b083      	sub	sp, #12
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ab2:	bf00      	nop
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
	...

08009ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a40      	ldr	r2, [pc, #256]	; (8009bd4 <TIM_Base_SetConfig+0x114>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d013      	beq.n	8009b00 <TIM_Base_SetConfig+0x40>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ade:	d00f      	beq.n	8009b00 <TIM_Base_SetConfig+0x40>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a3d      	ldr	r2, [pc, #244]	; (8009bd8 <TIM_Base_SetConfig+0x118>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d00b      	beq.n	8009b00 <TIM_Base_SetConfig+0x40>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a3c      	ldr	r2, [pc, #240]	; (8009bdc <TIM_Base_SetConfig+0x11c>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d007      	beq.n	8009b00 <TIM_Base_SetConfig+0x40>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a3b      	ldr	r2, [pc, #236]	; (8009be0 <TIM_Base_SetConfig+0x120>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d003      	beq.n	8009b00 <TIM_Base_SetConfig+0x40>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a3a      	ldr	r2, [pc, #232]	; (8009be4 <TIM_Base_SetConfig+0x124>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d108      	bne.n	8009b12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a2f      	ldr	r2, [pc, #188]	; (8009bd4 <TIM_Base_SetConfig+0x114>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d02b      	beq.n	8009b72 <TIM_Base_SetConfig+0xb2>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b20:	d027      	beq.n	8009b72 <TIM_Base_SetConfig+0xb2>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a2c      	ldr	r2, [pc, #176]	; (8009bd8 <TIM_Base_SetConfig+0x118>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d023      	beq.n	8009b72 <TIM_Base_SetConfig+0xb2>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a2b      	ldr	r2, [pc, #172]	; (8009bdc <TIM_Base_SetConfig+0x11c>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d01f      	beq.n	8009b72 <TIM_Base_SetConfig+0xb2>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a2a      	ldr	r2, [pc, #168]	; (8009be0 <TIM_Base_SetConfig+0x120>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d01b      	beq.n	8009b72 <TIM_Base_SetConfig+0xb2>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a29      	ldr	r2, [pc, #164]	; (8009be4 <TIM_Base_SetConfig+0x124>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d017      	beq.n	8009b72 <TIM_Base_SetConfig+0xb2>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4a28      	ldr	r2, [pc, #160]	; (8009be8 <TIM_Base_SetConfig+0x128>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d013      	beq.n	8009b72 <TIM_Base_SetConfig+0xb2>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4a27      	ldr	r2, [pc, #156]	; (8009bec <TIM_Base_SetConfig+0x12c>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d00f      	beq.n	8009b72 <TIM_Base_SetConfig+0xb2>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4a26      	ldr	r2, [pc, #152]	; (8009bf0 <TIM_Base_SetConfig+0x130>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d00b      	beq.n	8009b72 <TIM_Base_SetConfig+0xb2>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4a25      	ldr	r2, [pc, #148]	; (8009bf4 <TIM_Base_SetConfig+0x134>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d007      	beq.n	8009b72 <TIM_Base_SetConfig+0xb2>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4a24      	ldr	r2, [pc, #144]	; (8009bf8 <TIM_Base_SetConfig+0x138>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d003      	beq.n	8009b72 <TIM_Base_SetConfig+0xb2>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4a23      	ldr	r2, [pc, #140]	; (8009bfc <TIM_Base_SetConfig+0x13c>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d108      	bne.n	8009b84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	689a      	ldr	r2, [r3, #8]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a0a      	ldr	r2, [pc, #40]	; (8009bd4 <TIM_Base_SetConfig+0x114>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d003      	beq.n	8009bb8 <TIM_Base_SetConfig+0xf8>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a0c      	ldr	r2, [pc, #48]	; (8009be4 <TIM_Base_SetConfig+0x124>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d103      	bne.n	8009bc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	691a      	ldr	r2, [r3, #16]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	615a      	str	r2, [r3, #20]
}
 8009bc6:	bf00      	nop
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	40010000 	.word	0x40010000
 8009bd8:	40000400 	.word	0x40000400
 8009bdc:	40000800 	.word	0x40000800
 8009be0:	40000c00 	.word	0x40000c00
 8009be4:	40010400 	.word	0x40010400
 8009be8:	40014000 	.word	0x40014000
 8009bec:	40014400 	.word	0x40014400
 8009bf0:	40014800 	.word	0x40014800
 8009bf4:	40001800 	.word	0x40001800
 8009bf8:	40001c00 	.word	0x40001c00
 8009bfc:	40002000 	.word	0x40002000

08009c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c08:	bf00      	nop
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c1c:	bf00      	nop
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d101      	bne.n	8009c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	e03f      	b.n	8009cba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d106      	bne.n	8009c54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7fc fa30 	bl	80060b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2224      	movs	r2, #36	; 0x24
 8009c58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68da      	ldr	r2, [r3, #12]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f829 	bl	8009cc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	691a      	ldr	r2, [r3, #16]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	695a      	ldr	r2, [r3, #20]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68da      	ldr	r2, [r3, #12]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ca0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2220      	movs	r2, #32
 8009cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3708      	adds	r7, #8
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
	...

08009cc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc8:	b085      	sub	sp, #20
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	68da      	ldr	r2, [r3, #12]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	430a      	orrs	r2, r1
 8009ce2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	689a      	ldr	r2, [r3, #8]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	431a      	orrs	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	695b      	ldr	r3, [r3, #20]
 8009cf2:	431a      	orrs	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	69db      	ldr	r3, [r3, #28]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009d06:	f023 030c 	bic.w	r3, r3, #12
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	6812      	ldr	r2, [r2, #0]
 8009d0e:	68f9      	ldr	r1, [r7, #12]
 8009d10:	430b      	orrs	r3, r1
 8009d12:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	699a      	ldr	r2, [r3, #24]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	430a      	orrs	r2, r1
 8009d28:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	69db      	ldr	r3, [r3, #28]
 8009d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d32:	f040 818b 	bne.w	800a04c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4ac1      	ldr	r2, [pc, #772]	; (800a040 <UART_SetConfig+0x37c>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d005      	beq.n	8009d4c <UART_SetConfig+0x88>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4abf      	ldr	r2, [pc, #764]	; (800a044 <UART_SetConfig+0x380>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	f040 80bd 	bne.w	8009ec6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d4c:	f7fe fe62 	bl	8008a14 <HAL_RCC_GetPCLK2Freq>
 8009d50:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	461d      	mov	r5, r3
 8009d56:	f04f 0600 	mov.w	r6, #0
 8009d5a:	46a8      	mov	r8, r5
 8009d5c:	46b1      	mov	r9, r6
 8009d5e:	eb18 0308 	adds.w	r3, r8, r8
 8009d62:	eb49 0409 	adc.w	r4, r9, r9
 8009d66:	4698      	mov	r8, r3
 8009d68:	46a1      	mov	r9, r4
 8009d6a:	eb18 0805 	adds.w	r8, r8, r5
 8009d6e:	eb49 0906 	adc.w	r9, r9, r6
 8009d72:	f04f 0100 	mov.w	r1, #0
 8009d76:	f04f 0200 	mov.w	r2, #0
 8009d7a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009d7e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009d82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009d86:	4688      	mov	r8, r1
 8009d88:	4691      	mov	r9, r2
 8009d8a:	eb18 0005 	adds.w	r0, r8, r5
 8009d8e:	eb49 0106 	adc.w	r1, r9, r6
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	461d      	mov	r5, r3
 8009d98:	f04f 0600 	mov.w	r6, #0
 8009d9c:	196b      	adds	r3, r5, r5
 8009d9e:	eb46 0406 	adc.w	r4, r6, r6
 8009da2:	461a      	mov	r2, r3
 8009da4:	4623      	mov	r3, r4
 8009da6:	f7f6 fadb 	bl	8000360 <__aeabi_uldivmod>
 8009daa:	4603      	mov	r3, r0
 8009dac:	460c      	mov	r4, r1
 8009dae:	461a      	mov	r2, r3
 8009db0:	4ba5      	ldr	r3, [pc, #660]	; (800a048 <UART_SetConfig+0x384>)
 8009db2:	fba3 2302 	umull	r2, r3, r3, r2
 8009db6:	095b      	lsrs	r3, r3, #5
 8009db8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	461d      	mov	r5, r3
 8009dc0:	f04f 0600 	mov.w	r6, #0
 8009dc4:	46a9      	mov	r9, r5
 8009dc6:	46b2      	mov	sl, r6
 8009dc8:	eb19 0309 	adds.w	r3, r9, r9
 8009dcc:	eb4a 040a 	adc.w	r4, sl, sl
 8009dd0:	4699      	mov	r9, r3
 8009dd2:	46a2      	mov	sl, r4
 8009dd4:	eb19 0905 	adds.w	r9, r9, r5
 8009dd8:	eb4a 0a06 	adc.w	sl, sl, r6
 8009ddc:	f04f 0100 	mov.w	r1, #0
 8009de0:	f04f 0200 	mov.w	r2, #0
 8009de4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009de8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009dec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009df0:	4689      	mov	r9, r1
 8009df2:	4692      	mov	sl, r2
 8009df4:	eb19 0005 	adds.w	r0, r9, r5
 8009df8:	eb4a 0106 	adc.w	r1, sl, r6
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	461d      	mov	r5, r3
 8009e02:	f04f 0600 	mov.w	r6, #0
 8009e06:	196b      	adds	r3, r5, r5
 8009e08:	eb46 0406 	adc.w	r4, r6, r6
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	4623      	mov	r3, r4
 8009e10:	f7f6 faa6 	bl	8000360 <__aeabi_uldivmod>
 8009e14:	4603      	mov	r3, r0
 8009e16:	460c      	mov	r4, r1
 8009e18:	461a      	mov	r2, r3
 8009e1a:	4b8b      	ldr	r3, [pc, #556]	; (800a048 <UART_SetConfig+0x384>)
 8009e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8009e20:	095b      	lsrs	r3, r3, #5
 8009e22:	2164      	movs	r1, #100	; 0x64
 8009e24:	fb01 f303 	mul.w	r3, r1, r3
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	00db      	lsls	r3, r3, #3
 8009e2c:	3332      	adds	r3, #50	; 0x32
 8009e2e:	4a86      	ldr	r2, [pc, #536]	; (800a048 <UART_SetConfig+0x384>)
 8009e30:	fba2 2303 	umull	r2, r3, r2, r3
 8009e34:	095b      	lsrs	r3, r3, #5
 8009e36:	005b      	lsls	r3, r3, #1
 8009e38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e3c:	4498      	add	r8, r3
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	461d      	mov	r5, r3
 8009e42:	f04f 0600 	mov.w	r6, #0
 8009e46:	46a9      	mov	r9, r5
 8009e48:	46b2      	mov	sl, r6
 8009e4a:	eb19 0309 	adds.w	r3, r9, r9
 8009e4e:	eb4a 040a 	adc.w	r4, sl, sl
 8009e52:	4699      	mov	r9, r3
 8009e54:	46a2      	mov	sl, r4
 8009e56:	eb19 0905 	adds.w	r9, r9, r5
 8009e5a:	eb4a 0a06 	adc.w	sl, sl, r6
 8009e5e:	f04f 0100 	mov.w	r1, #0
 8009e62:	f04f 0200 	mov.w	r2, #0
 8009e66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009e6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009e72:	4689      	mov	r9, r1
 8009e74:	4692      	mov	sl, r2
 8009e76:	eb19 0005 	adds.w	r0, r9, r5
 8009e7a:	eb4a 0106 	adc.w	r1, sl, r6
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	461d      	mov	r5, r3
 8009e84:	f04f 0600 	mov.w	r6, #0
 8009e88:	196b      	adds	r3, r5, r5
 8009e8a:	eb46 0406 	adc.w	r4, r6, r6
 8009e8e:	461a      	mov	r2, r3
 8009e90:	4623      	mov	r3, r4
 8009e92:	f7f6 fa65 	bl	8000360 <__aeabi_uldivmod>
 8009e96:	4603      	mov	r3, r0
 8009e98:	460c      	mov	r4, r1
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	4b6a      	ldr	r3, [pc, #424]	; (800a048 <UART_SetConfig+0x384>)
 8009e9e:	fba3 1302 	umull	r1, r3, r3, r2
 8009ea2:	095b      	lsrs	r3, r3, #5
 8009ea4:	2164      	movs	r1, #100	; 0x64
 8009ea6:	fb01 f303 	mul.w	r3, r1, r3
 8009eaa:	1ad3      	subs	r3, r2, r3
 8009eac:	00db      	lsls	r3, r3, #3
 8009eae:	3332      	adds	r3, #50	; 0x32
 8009eb0:	4a65      	ldr	r2, [pc, #404]	; (800a048 <UART_SetConfig+0x384>)
 8009eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009eb6:	095b      	lsrs	r3, r3, #5
 8009eb8:	f003 0207 	and.w	r2, r3, #7
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4442      	add	r2, r8
 8009ec2:	609a      	str	r2, [r3, #8]
 8009ec4:	e26f      	b.n	800a3a6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ec6:	f7fe fd91 	bl	80089ec <HAL_RCC_GetPCLK1Freq>
 8009eca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	461d      	mov	r5, r3
 8009ed0:	f04f 0600 	mov.w	r6, #0
 8009ed4:	46a8      	mov	r8, r5
 8009ed6:	46b1      	mov	r9, r6
 8009ed8:	eb18 0308 	adds.w	r3, r8, r8
 8009edc:	eb49 0409 	adc.w	r4, r9, r9
 8009ee0:	4698      	mov	r8, r3
 8009ee2:	46a1      	mov	r9, r4
 8009ee4:	eb18 0805 	adds.w	r8, r8, r5
 8009ee8:	eb49 0906 	adc.w	r9, r9, r6
 8009eec:	f04f 0100 	mov.w	r1, #0
 8009ef0:	f04f 0200 	mov.w	r2, #0
 8009ef4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009ef8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009efc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009f00:	4688      	mov	r8, r1
 8009f02:	4691      	mov	r9, r2
 8009f04:	eb18 0005 	adds.w	r0, r8, r5
 8009f08:	eb49 0106 	adc.w	r1, r9, r6
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	461d      	mov	r5, r3
 8009f12:	f04f 0600 	mov.w	r6, #0
 8009f16:	196b      	adds	r3, r5, r5
 8009f18:	eb46 0406 	adc.w	r4, r6, r6
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	4623      	mov	r3, r4
 8009f20:	f7f6 fa1e 	bl	8000360 <__aeabi_uldivmod>
 8009f24:	4603      	mov	r3, r0
 8009f26:	460c      	mov	r4, r1
 8009f28:	461a      	mov	r2, r3
 8009f2a:	4b47      	ldr	r3, [pc, #284]	; (800a048 <UART_SetConfig+0x384>)
 8009f2c:	fba3 2302 	umull	r2, r3, r3, r2
 8009f30:	095b      	lsrs	r3, r3, #5
 8009f32:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	461d      	mov	r5, r3
 8009f3a:	f04f 0600 	mov.w	r6, #0
 8009f3e:	46a9      	mov	r9, r5
 8009f40:	46b2      	mov	sl, r6
 8009f42:	eb19 0309 	adds.w	r3, r9, r9
 8009f46:	eb4a 040a 	adc.w	r4, sl, sl
 8009f4a:	4699      	mov	r9, r3
 8009f4c:	46a2      	mov	sl, r4
 8009f4e:	eb19 0905 	adds.w	r9, r9, r5
 8009f52:	eb4a 0a06 	adc.w	sl, sl, r6
 8009f56:	f04f 0100 	mov.w	r1, #0
 8009f5a:	f04f 0200 	mov.w	r2, #0
 8009f5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009f66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009f6a:	4689      	mov	r9, r1
 8009f6c:	4692      	mov	sl, r2
 8009f6e:	eb19 0005 	adds.w	r0, r9, r5
 8009f72:	eb4a 0106 	adc.w	r1, sl, r6
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	461d      	mov	r5, r3
 8009f7c:	f04f 0600 	mov.w	r6, #0
 8009f80:	196b      	adds	r3, r5, r5
 8009f82:	eb46 0406 	adc.w	r4, r6, r6
 8009f86:	461a      	mov	r2, r3
 8009f88:	4623      	mov	r3, r4
 8009f8a:	f7f6 f9e9 	bl	8000360 <__aeabi_uldivmod>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	460c      	mov	r4, r1
 8009f92:	461a      	mov	r2, r3
 8009f94:	4b2c      	ldr	r3, [pc, #176]	; (800a048 <UART_SetConfig+0x384>)
 8009f96:	fba3 1302 	umull	r1, r3, r3, r2
 8009f9a:	095b      	lsrs	r3, r3, #5
 8009f9c:	2164      	movs	r1, #100	; 0x64
 8009f9e:	fb01 f303 	mul.w	r3, r1, r3
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	00db      	lsls	r3, r3, #3
 8009fa6:	3332      	adds	r3, #50	; 0x32
 8009fa8:	4a27      	ldr	r2, [pc, #156]	; (800a048 <UART_SetConfig+0x384>)
 8009faa:	fba2 2303 	umull	r2, r3, r2, r3
 8009fae:	095b      	lsrs	r3, r3, #5
 8009fb0:	005b      	lsls	r3, r3, #1
 8009fb2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009fb6:	4498      	add	r8, r3
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	461d      	mov	r5, r3
 8009fbc:	f04f 0600 	mov.w	r6, #0
 8009fc0:	46a9      	mov	r9, r5
 8009fc2:	46b2      	mov	sl, r6
 8009fc4:	eb19 0309 	adds.w	r3, r9, r9
 8009fc8:	eb4a 040a 	adc.w	r4, sl, sl
 8009fcc:	4699      	mov	r9, r3
 8009fce:	46a2      	mov	sl, r4
 8009fd0:	eb19 0905 	adds.w	r9, r9, r5
 8009fd4:	eb4a 0a06 	adc.w	sl, sl, r6
 8009fd8:	f04f 0100 	mov.w	r1, #0
 8009fdc:	f04f 0200 	mov.w	r2, #0
 8009fe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009fe4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009fe8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009fec:	4689      	mov	r9, r1
 8009fee:	4692      	mov	sl, r2
 8009ff0:	eb19 0005 	adds.w	r0, r9, r5
 8009ff4:	eb4a 0106 	adc.w	r1, sl, r6
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	461d      	mov	r5, r3
 8009ffe:	f04f 0600 	mov.w	r6, #0
 800a002:	196b      	adds	r3, r5, r5
 800a004:	eb46 0406 	adc.w	r4, r6, r6
 800a008:	461a      	mov	r2, r3
 800a00a:	4623      	mov	r3, r4
 800a00c:	f7f6 f9a8 	bl	8000360 <__aeabi_uldivmod>
 800a010:	4603      	mov	r3, r0
 800a012:	460c      	mov	r4, r1
 800a014:	461a      	mov	r2, r3
 800a016:	4b0c      	ldr	r3, [pc, #48]	; (800a048 <UART_SetConfig+0x384>)
 800a018:	fba3 1302 	umull	r1, r3, r3, r2
 800a01c:	095b      	lsrs	r3, r3, #5
 800a01e:	2164      	movs	r1, #100	; 0x64
 800a020:	fb01 f303 	mul.w	r3, r1, r3
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	00db      	lsls	r3, r3, #3
 800a028:	3332      	adds	r3, #50	; 0x32
 800a02a:	4a07      	ldr	r2, [pc, #28]	; (800a048 <UART_SetConfig+0x384>)
 800a02c:	fba2 2303 	umull	r2, r3, r2, r3
 800a030:	095b      	lsrs	r3, r3, #5
 800a032:	f003 0207 	and.w	r2, r3, #7
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4442      	add	r2, r8
 800a03c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a03e:	e1b2      	b.n	800a3a6 <UART_SetConfig+0x6e2>
 800a040:	40011000 	.word	0x40011000
 800a044:	40011400 	.word	0x40011400
 800a048:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4ad7      	ldr	r2, [pc, #860]	; (800a3b0 <UART_SetConfig+0x6ec>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d005      	beq.n	800a062 <UART_SetConfig+0x39e>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4ad6      	ldr	r2, [pc, #856]	; (800a3b4 <UART_SetConfig+0x6f0>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	f040 80d1 	bne.w	800a204 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a062:	f7fe fcd7 	bl	8008a14 <HAL_RCC_GetPCLK2Freq>
 800a066:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	469a      	mov	sl, r3
 800a06c:	f04f 0b00 	mov.w	fp, #0
 800a070:	46d0      	mov	r8, sl
 800a072:	46d9      	mov	r9, fp
 800a074:	eb18 0308 	adds.w	r3, r8, r8
 800a078:	eb49 0409 	adc.w	r4, r9, r9
 800a07c:	4698      	mov	r8, r3
 800a07e:	46a1      	mov	r9, r4
 800a080:	eb18 080a 	adds.w	r8, r8, sl
 800a084:	eb49 090b 	adc.w	r9, r9, fp
 800a088:	f04f 0100 	mov.w	r1, #0
 800a08c:	f04f 0200 	mov.w	r2, #0
 800a090:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a094:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a098:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a09c:	4688      	mov	r8, r1
 800a09e:	4691      	mov	r9, r2
 800a0a0:	eb1a 0508 	adds.w	r5, sl, r8
 800a0a4:	eb4b 0609 	adc.w	r6, fp, r9
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	f04f 0200 	mov.w	r2, #0
 800a0b2:	f04f 0300 	mov.w	r3, #0
 800a0b6:	f04f 0400 	mov.w	r4, #0
 800a0ba:	0094      	lsls	r4, r2, #2
 800a0bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a0c0:	008b      	lsls	r3, r1, #2
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	4623      	mov	r3, r4
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	4631      	mov	r1, r6
 800a0ca:	f7f6 f949 	bl	8000360 <__aeabi_uldivmod>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	460c      	mov	r4, r1
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	4bb8      	ldr	r3, [pc, #736]	; (800a3b8 <UART_SetConfig+0x6f4>)
 800a0d6:	fba3 2302 	umull	r2, r3, r3, r2
 800a0da:	095b      	lsrs	r3, r3, #5
 800a0dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	469b      	mov	fp, r3
 800a0e4:	f04f 0c00 	mov.w	ip, #0
 800a0e8:	46d9      	mov	r9, fp
 800a0ea:	46e2      	mov	sl, ip
 800a0ec:	eb19 0309 	adds.w	r3, r9, r9
 800a0f0:	eb4a 040a 	adc.w	r4, sl, sl
 800a0f4:	4699      	mov	r9, r3
 800a0f6:	46a2      	mov	sl, r4
 800a0f8:	eb19 090b 	adds.w	r9, r9, fp
 800a0fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a100:	f04f 0100 	mov.w	r1, #0
 800a104:	f04f 0200 	mov.w	r2, #0
 800a108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a10c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a110:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a114:	4689      	mov	r9, r1
 800a116:	4692      	mov	sl, r2
 800a118:	eb1b 0509 	adds.w	r5, fp, r9
 800a11c:	eb4c 060a 	adc.w	r6, ip, sl
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	4619      	mov	r1, r3
 800a126:	f04f 0200 	mov.w	r2, #0
 800a12a:	f04f 0300 	mov.w	r3, #0
 800a12e:	f04f 0400 	mov.w	r4, #0
 800a132:	0094      	lsls	r4, r2, #2
 800a134:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a138:	008b      	lsls	r3, r1, #2
 800a13a:	461a      	mov	r2, r3
 800a13c:	4623      	mov	r3, r4
 800a13e:	4628      	mov	r0, r5
 800a140:	4631      	mov	r1, r6
 800a142:	f7f6 f90d 	bl	8000360 <__aeabi_uldivmod>
 800a146:	4603      	mov	r3, r0
 800a148:	460c      	mov	r4, r1
 800a14a:	461a      	mov	r2, r3
 800a14c:	4b9a      	ldr	r3, [pc, #616]	; (800a3b8 <UART_SetConfig+0x6f4>)
 800a14e:	fba3 1302 	umull	r1, r3, r3, r2
 800a152:	095b      	lsrs	r3, r3, #5
 800a154:	2164      	movs	r1, #100	; 0x64
 800a156:	fb01 f303 	mul.w	r3, r1, r3
 800a15a:	1ad3      	subs	r3, r2, r3
 800a15c:	011b      	lsls	r3, r3, #4
 800a15e:	3332      	adds	r3, #50	; 0x32
 800a160:	4a95      	ldr	r2, [pc, #596]	; (800a3b8 <UART_SetConfig+0x6f4>)
 800a162:	fba2 2303 	umull	r2, r3, r2, r3
 800a166:	095b      	lsrs	r3, r3, #5
 800a168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a16c:	4498      	add	r8, r3
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	469b      	mov	fp, r3
 800a172:	f04f 0c00 	mov.w	ip, #0
 800a176:	46d9      	mov	r9, fp
 800a178:	46e2      	mov	sl, ip
 800a17a:	eb19 0309 	adds.w	r3, r9, r9
 800a17e:	eb4a 040a 	adc.w	r4, sl, sl
 800a182:	4699      	mov	r9, r3
 800a184:	46a2      	mov	sl, r4
 800a186:	eb19 090b 	adds.w	r9, r9, fp
 800a18a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a18e:	f04f 0100 	mov.w	r1, #0
 800a192:	f04f 0200 	mov.w	r2, #0
 800a196:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a19a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a19e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a1a2:	4689      	mov	r9, r1
 800a1a4:	4692      	mov	sl, r2
 800a1a6:	eb1b 0509 	adds.w	r5, fp, r9
 800a1aa:	eb4c 060a 	adc.w	r6, ip, sl
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	f04f 0200 	mov.w	r2, #0
 800a1b8:	f04f 0300 	mov.w	r3, #0
 800a1bc:	f04f 0400 	mov.w	r4, #0
 800a1c0:	0094      	lsls	r4, r2, #2
 800a1c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a1c6:	008b      	lsls	r3, r1, #2
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	4623      	mov	r3, r4
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	4631      	mov	r1, r6
 800a1d0:	f7f6 f8c6 	bl	8000360 <__aeabi_uldivmod>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	461a      	mov	r2, r3
 800a1da:	4b77      	ldr	r3, [pc, #476]	; (800a3b8 <UART_SetConfig+0x6f4>)
 800a1dc:	fba3 1302 	umull	r1, r3, r3, r2
 800a1e0:	095b      	lsrs	r3, r3, #5
 800a1e2:	2164      	movs	r1, #100	; 0x64
 800a1e4:	fb01 f303 	mul.w	r3, r1, r3
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	011b      	lsls	r3, r3, #4
 800a1ec:	3332      	adds	r3, #50	; 0x32
 800a1ee:	4a72      	ldr	r2, [pc, #456]	; (800a3b8 <UART_SetConfig+0x6f4>)
 800a1f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f4:	095b      	lsrs	r3, r3, #5
 800a1f6:	f003 020f 	and.w	r2, r3, #15
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4442      	add	r2, r8
 800a200:	609a      	str	r2, [r3, #8]
 800a202:	e0d0      	b.n	800a3a6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a204:	f7fe fbf2 	bl	80089ec <HAL_RCC_GetPCLK1Freq>
 800a208:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	469a      	mov	sl, r3
 800a20e:	f04f 0b00 	mov.w	fp, #0
 800a212:	46d0      	mov	r8, sl
 800a214:	46d9      	mov	r9, fp
 800a216:	eb18 0308 	adds.w	r3, r8, r8
 800a21a:	eb49 0409 	adc.w	r4, r9, r9
 800a21e:	4698      	mov	r8, r3
 800a220:	46a1      	mov	r9, r4
 800a222:	eb18 080a 	adds.w	r8, r8, sl
 800a226:	eb49 090b 	adc.w	r9, r9, fp
 800a22a:	f04f 0100 	mov.w	r1, #0
 800a22e:	f04f 0200 	mov.w	r2, #0
 800a232:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a236:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a23a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a23e:	4688      	mov	r8, r1
 800a240:	4691      	mov	r9, r2
 800a242:	eb1a 0508 	adds.w	r5, sl, r8
 800a246:	eb4b 0609 	adc.w	r6, fp, r9
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	4619      	mov	r1, r3
 800a250:	f04f 0200 	mov.w	r2, #0
 800a254:	f04f 0300 	mov.w	r3, #0
 800a258:	f04f 0400 	mov.w	r4, #0
 800a25c:	0094      	lsls	r4, r2, #2
 800a25e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a262:	008b      	lsls	r3, r1, #2
 800a264:	461a      	mov	r2, r3
 800a266:	4623      	mov	r3, r4
 800a268:	4628      	mov	r0, r5
 800a26a:	4631      	mov	r1, r6
 800a26c:	f7f6 f878 	bl	8000360 <__aeabi_uldivmod>
 800a270:	4603      	mov	r3, r0
 800a272:	460c      	mov	r4, r1
 800a274:	461a      	mov	r2, r3
 800a276:	4b50      	ldr	r3, [pc, #320]	; (800a3b8 <UART_SetConfig+0x6f4>)
 800a278:	fba3 2302 	umull	r2, r3, r3, r2
 800a27c:	095b      	lsrs	r3, r3, #5
 800a27e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	469b      	mov	fp, r3
 800a286:	f04f 0c00 	mov.w	ip, #0
 800a28a:	46d9      	mov	r9, fp
 800a28c:	46e2      	mov	sl, ip
 800a28e:	eb19 0309 	adds.w	r3, r9, r9
 800a292:	eb4a 040a 	adc.w	r4, sl, sl
 800a296:	4699      	mov	r9, r3
 800a298:	46a2      	mov	sl, r4
 800a29a:	eb19 090b 	adds.w	r9, r9, fp
 800a29e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a2a2:	f04f 0100 	mov.w	r1, #0
 800a2a6:	f04f 0200 	mov.w	r2, #0
 800a2aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a2ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a2b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a2b6:	4689      	mov	r9, r1
 800a2b8:	4692      	mov	sl, r2
 800a2ba:	eb1b 0509 	adds.w	r5, fp, r9
 800a2be:	eb4c 060a 	adc.w	r6, ip, sl
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	f04f 0200 	mov.w	r2, #0
 800a2cc:	f04f 0300 	mov.w	r3, #0
 800a2d0:	f04f 0400 	mov.w	r4, #0
 800a2d4:	0094      	lsls	r4, r2, #2
 800a2d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a2da:	008b      	lsls	r3, r1, #2
 800a2dc:	461a      	mov	r2, r3
 800a2de:	4623      	mov	r3, r4
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	f7f6 f83c 	bl	8000360 <__aeabi_uldivmod>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	4b32      	ldr	r3, [pc, #200]	; (800a3b8 <UART_SetConfig+0x6f4>)
 800a2f0:	fba3 1302 	umull	r1, r3, r3, r2
 800a2f4:	095b      	lsrs	r3, r3, #5
 800a2f6:	2164      	movs	r1, #100	; 0x64
 800a2f8:	fb01 f303 	mul.w	r3, r1, r3
 800a2fc:	1ad3      	subs	r3, r2, r3
 800a2fe:	011b      	lsls	r3, r3, #4
 800a300:	3332      	adds	r3, #50	; 0x32
 800a302:	4a2d      	ldr	r2, [pc, #180]	; (800a3b8 <UART_SetConfig+0x6f4>)
 800a304:	fba2 2303 	umull	r2, r3, r2, r3
 800a308:	095b      	lsrs	r3, r3, #5
 800a30a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a30e:	4498      	add	r8, r3
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	469b      	mov	fp, r3
 800a314:	f04f 0c00 	mov.w	ip, #0
 800a318:	46d9      	mov	r9, fp
 800a31a:	46e2      	mov	sl, ip
 800a31c:	eb19 0309 	adds.w	r3, r9, r9
 800a320:	eb4a 040a 	adc.w	r4, sl, sl
 800a324:	4699      	mov	r9, r3
 800a326:	46a2      	mov	sl, r4
 800a328:	eb19 090b 	adds.w	r9, r9, fp
 800a32c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a330:	f04f 0100 	mov.w	r1, #0
 800a334:	f04f 0200 	mov.w	r2, #0
 800a338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a33c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a340:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a344:	4689      	mov	r9, r1
 800a346:	4692      	mov	sl, r2
 800a348:	eb1b 0509 	adds.w	r5, fp, r9
 800a34c:	eb4c 060a 	adc.w	r6, ip, sl
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	4619      	mov	r1, r3
 800a356:	f04f 0200 	mov.w	r2, #0
 800a35a:	f04f 0300 	mov.w	r3, #0
 800a35e:	f04f 0400 	mov.w	r4, #0
 800a362:	0094      	lsls	r4, r2, #2
 800a364:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a368:	008b      	lsls	r3, r1, #2
 800a36a:	461a      	mov	r2, r3
 800a36c:	4623      	mov	r3, r4
 800a36e:	4628      	mov	r0, r5
 800a370:	4631      	mov	r1, r6
 800a372:	f7f5 fff5 	bl	8000360 <__aeabi_uldivmod>
 800a376:	4603      	mov	r3, r0
 800a378:	460c      	mov	r4, r1
 800a37a:	461a      	mov	r2, r3
 800a37c:	4b0e      	ldr	r3, [pc, #56]	; (800a3b8 <UART_SetConfig+0x6f4>)
 800a37e:	fba3 1302 	umull	r1, r3, r3, r2
 800a382:	095b      	lsrs	r3, r3, #5
 800a384:	2164      	movs	r1, #100	; 0x64
 800a386:	fb01 f303 	mul.w	r3, r1, r3
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	011b      	lsls	r3, r3, #4
 800a38e:	3332      	adds	r3, #50	; 0x32
 800a390:	4a09      	ldr	r2, [pc, #36]	; (800a3b8 <UART_SetConfig+0x6f4>)
 800a392:	fba2 2303 	umull	r2, r3, r2, r3
 800a396:	095b      	lsrs	r3, r3, #5
 800a398:	f003 020f 	and.w	r2, r3, #15
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4442      	add	r2, r8
 800a3a2:	609a      	str	r2, [r3, #8]
}
 800a3a4:	e7ff      	b.n	800a3a6 <UART_SetConfig+0x6e2>
 800a3a6:	bf00      	nop
 800a3a8:	3714      	adds	r7, #20
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b0:	40011000 	.word	0x40011000
 800a3b4:	40011400 	.word	0x40011400
 800a3b8:	51eb851f 	.word	0x51eb851f

0800a3bc <__cxa_pure_virtual>:
 800a3bc:	b508      	push	{r3, lr}
 800a3be:	f000 f839 	bl	800a434 <_ZSt9terminatev>

0800a3c2 <_ZdlPvj>:
 800a3c2:	f000 b829 	b.w	800a418 <_ZdlPv>

0800a3c6 <_Znwj>:
 800a3c6:	b510      	push	{r4, lr}
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	bf14      	ite	ne
 800a3cc:	4604      	movne	r4, r0
 800a3ce:	2401      	moveq	r4, #1
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f000 faa1 	bl	800a918 <malloc>
 800a3d6:	b930      	cbnz	r0, 800a3e6 <_Znwj+0x20>
 800a3d8:	f000 f816 	bl	800a408 <_ZSt15get_new_handlerv>
 800a3dc:	b908      	cbnz	r0, 800a3e2 <_Znwj+0x1c>
 800a3de:	f000 fa39 	bl	800a854 <abort>
 800a3e2:	4780      	blx	r0
 800a3e4:	e7f4      	b.n	800a3d0 <_Znwj+0xa>
 800a3e6:	bd10      	pop	{r4, pc}

0800a3e8 <__cxa_guard_acquire>:
 800a3e8:	6803      	ldr	r3, [r0, #0]
 800a3ea:	07db      	lsls	r3, r3, #31
 800a3ec:	d406      	bmi.n	800a3fc <__cxa_guard_acquire+0x14>
 800a3ee:	7843      	ldrb	r3, [r0, #1]
 800a3f0:	b103      	cbz	r3, 800a3f4 <__cxa_guard_acquire+0xc>
 800a3f2:	deff      	udf	#255	; 0xff
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	7043      	strb	r3, [r0, #1]
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	4770      	bx	lr
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	4770      	bx	lr

0800a400 <__cxa_guard_release>:
 800a400:	2301      	movs	r3, #1
 800a402:	6003      	str	r3, [r0, #0]
 800a404:	4770      	bx	lr
	...

0800a408 <_ZSt15get_new_handlerv>:
 800a408:	4b02      	ldr	r3, [pc, #8]	; (800a414 <_ZSt15get_new_handlerv+0xc>)
 800a40a:	6818      	ldr	r0, [r3, #0]
 800a40c:	f3bf 8f5b 	dmb	ish
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	200017e4 	.word	0x200017e4

0800a418 <_ZdlPv>:
 800a418:	f000 ba86 	b.w	800a928 <free>

0800a41c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a41c:	b508      	push	{r3, lr}
 800a41e:	4780      	blx	r0
 800a420:	f000 fa18 	bl	800a854 <abort>

0800a424 <_ZSt13get_terminatev>:
 800a424:	4b02      	ldr	r3, [pc, #8]	; (800a430 <_ZSt13get_terminatev+0xc>)
 800a426:	6818      	ldr	r0, [r3, #0]
 800a428:	f3bf 8f5b 	dmb	ish
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	200000f4 	.word	0x200000f4

0800a434 <_ZSt9terminatev>:
 800a434:	b508      	push	{r3, lr}
 800a436:	f7ff fff5 	bl	800a424 <_ZSt13get_terminatev>
 800a43a:	f7ff ffef 	bl	800a41c <_ZN10__cxxabiv111__terminateEPFvvE>

0800a43e <_ZNSaIcEC1Ev>:
 800a43e:	4770      	bx	lr

0800a440 <_ZNSaIcED1Ev>:
 800a440:	4770      	bx	lr

0800a442 <_ZSt17__throw_bad_allocv>:
 800a442:	b508      	push	{r3, lr}
 800a444:	f000 fa06 	bl	800a854 <abort>

0800a448 <_ZSt19__throw_logic_errorPKc>:
 800a448:	b508      	push	{r3, lr}
 800a44a:	f000 fa03 	bl	800a854 <abort>

0800a44e <_ZSt20__throw_length_errorPKc>:
 800a44e:	b508      	push	{r3, lr}
 800a450:	f000 fa00 	bl	800a854 <abort>

0800a454 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800a454:	b10a      	cbz	r2, 800a45a <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800a456:	f000 ba6f 	b.w	800a938 <memcpy>
 800a45a:	4770      	bx	lr

0800a45c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800a45c:	6001      	str	r1, [r0, #0]
 800a45e:	4770      	bx	lr

0800a460 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800a460:	6800      	ldr	r0, [r0, #0]
 800a462:	4770      	bx	lr

0800a464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800a464:	3008      	adds	r0, #8
 800a466:	4770      	bx	lr

0800a468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800a468:	6081      	str	r1, [r0, #8]
 800a46a:	4770      	bx	lr

0800a46c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800a46c:	6803      	ldr	r3, [r0, #0]
 800a46e:	6041      	str	r1, [r0, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	545a      	strb	r2, [r3, r1]
 800a474:	4770      	bx	lr
	...

0800a478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800a478:	b508      	push	{r3, lr}
 800a47a:	680b      	ldr	r3, [r1, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	da02      	bge.n	800a486 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 800a480:	4809      	ldr	r0, [pc, #36]	; (800a4a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800a482:	f7ff ffe4 	bl	800a44e <_ZSt20__throw_length_errorPKc>
 800a486:	4293      	cmp	r3, r2
 800a488:	d908      	bls.n	800a49c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800a48a:	0052      	lsls	r2, r2, #1
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d205      	bcs.n	800a49c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800a490:	2a00      	cmp	r2, #0
 800a492:	bfb6      	itet	lt
 800a494:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800a498:	600a      	strge	r2, [r1, #0]
 800a49a:	600b      	strlt	r3, [r1, #0]
 800a49c:	6808      	ldr	r0, [r1, #0]
 800a49e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a4a2:	3001      	adds	r0, #1
 800a4a4:	f7ff bf8f 	b.w	800a3c6 <_Znwj>
 800a4a8:	0800d287 	.word	0x0800d287

0800a4ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	f853 0b08 	ldr.w	r0, [r3], #8
 800a4b2:	4298      	cmp	r0, r3
 800a4b4:	d001      	beq.n	800a4ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800a4b6:	f7ff bfaf 	b.w	800a418 <_ZdlPv>
 800a4ba:	4770      	bx	lr

0800a4bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800a4bc:	b508      	push	{r3, lr}
 800a4be:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a4c2:	6840      	ldr	r0, [r0, #4]
 800a4c4:	3901      	subs	r1, #1
 800a4c6:	1a09      	subs	r1, r1, r0
 800a4c8:	4291      	cmp	r1, r2
 800a4ca:	d202      	bcs.n	800a4d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7ff ffbe 	bl	800a44e <_ZSt20__throw_length_errorPKc>
 800a4d2:	bd08      	pop	{r3, pc}

0800a4d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800a4d4:	6803      	ldr	r3, [r0, #0]
 800a4d6:	428b      	cmp	r3, r1
 800a4d8:	d806      	bhi.n	800a4e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800a4da:	6840      	ldr	r0, [r0, #4]
 800a4dc:	4418      	add	r0, r3
 800a4de:	4281      	cmp	r1, r0
 800a4e0:	bf94      	ite	ls
 800a4e2:	2000      	movls	r0, #0
 800a4e4:	2001      	movhi	r0, #1
 800a4e6:	4770      	bx	lr
 800a4e8:	2001      	movs	r0, #1
 800a4ea:	4770      	bx	lr

0800a4ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800a4ec:	2a01      	cmp	r2, #1
 800a4ee:	b510      	push	{r4, lr}
 800a4f0:	d102      	bne.n	800a4f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800a4f2:	780a      	ldrb	r2, [r1, #0]
 800a4f4:	7002      	strb	r2, [r0, #0]
 800a4f6:	bd10      	pop	{r4, pc}
 800a4f8:	f7ff ffac 	bl	800a454 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800a4fc:	e7fb      	b.n	800a4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800a4fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800a4fe:	2a01      	cmp	r2, #1
 800a500:	b430      	push	{r4, r5}
 800a502:	d103      	bne.n	800a50c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800a504:	780b      	ldrb	r3, [r1, #0]
 800a506:	7003      	strb	r3, [r0, #0]
 800a508:	bc30      	pop	{r4, r5}
 800a50a:	4770      	bx	lr
 800a50c:	2a00      	cmp	r2, #0
 800a50e:	d0fb      	beq.n	800a508 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800a510:	bc30      	pop	{r4, r5}
 800a512:	f000 ba1c 	b.w	800a94e <memmove>

0800a516 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800a516:	b508      	push	{r3, lr}
 800a518:	1a52      	subs	r2, r2, r1
 800a51a:	f7ff ffe7 	bl	800a4ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a51e:	bd08      	pop	{r3, pc}

0800a520 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800a520:	b508      	push	{r3, lr}
 800a522:	1a52      	subs	r2, r2, r1
 800a524:	f7ff ffe2 	bl	800a4ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a528:	bd08      	pop	{r3, pc}

0800a52a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800a52a:	4288      	cmp	r0, r1
 800a52c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a52e:	4604      	mov	r4, r0
 800a530:	460e      	mov	r6, r1
 800a532:	d01f      	beq.n	800a574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4a>
 800a534:	6802      	ldr	r2, [r0, #0]
 800a536:	684d      	ldr	r5, [r1, #4]
 800a538:	f100 0308 	add.w	r3, r0, #8
 800a53c:	429a      	cmp	r2, r3
 800a53e:	bf14      	ite	ne
 800a540:	6882      	ldrne	r2, [r0, #8]
 800a542:	220f      	moveq	r2, #15
 800a544:	42aa      	cmp	r2, r5
 800a546:	d20b      	bcs.n	800a560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x36>
 800a548:	a902      	add	r1, sp, #8
 800a54a:	f841 5d04 	str.w	r5, [r1, #-4]!
 800a54e:	f7ff ff93 	bl	800a478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a552:	4607      	mov	r7, r0
 800a554:	4620      	mov	r0, r4
 800a556:	f7ff ffa9 	bl	800a4ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a55a:	9b01      	ldr	r3, [sp, #4]
 800a55c:	6027      	str	r7, [r4, #0]
 800a55e:	60a3      	str	r3, [r4, #8]
 800a560:	b125      	cbz	r5, 800a56c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x42>
 800a562:	462a      	mov	r2, r5
 800a564:	6831      	ldr	r1, [r6, #0]
 800a566:	6820      	ldr	r0, [r4, #0]
 800a568:	f7ff ffc0 	bl	800a4ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	6065      	str	r5, [r4, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	555a      	strb	r2, [r3, r5]
 800a574:	b003      	add	sp, #12
 800a576:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800a578:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a57c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800a580:	4616      	mov	r6, r2
 800a582:	6842      	ldr	r2, [r0, #4]
 800a584:	469a      	mov	sl, r3
 800a586:	eba8 0306 	sub.w	r3, r8, r6
 800a58a:	1a57      	subs	r7, r2, r1
 800a58c:	4413      	add	r3, r2
 800a58e:	6802      	ldr	r2, [r0, #0]
 800a590:	9301      	str	r3, [sp, #4]
 800a592:	f100 0308 	add.w	r3, r0, #8
 800a596:	429a      	cmp	r2, r3
 800a598:	460d      	mov	r5, r1
 800a59a:	bf14      	ite	ne
 800a59c:	6882      	ldrne	r2, [r0, #8]
 800a59e:	220f      	moveq	r2, #15
 800a5a0:	a901      	add	r1, sp, #4
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	f7ff ff68 	bl	800a478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a5a8:	1bbf      	subs	r7, r7, r6
 800a5aa:	4681      	mov	r9, r0
 800a5ac:	b11d      	cbz	r5, 800a5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800a5ae:	462a      	mov	r2, r5
 800a5b0:	6821      	ldr	r1, [r4, #0]
 800a5b2:	f7ff ff9b 	bl	800a4ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a5b6:	f1ba 0f00 	cmp.w	sl, #0
 800a5ba:	d008      	beq.n	800a5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800a5bc:	f1b8 0f00 	cmp.w	r8, #0
 800a5c0:	d005      	beq.n	800a5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800a5c2:	4642      	mov	r2, r8
 800a5c4:	4651      	mov	r1, sl
 800a5c6:	eb09 0005 	add.w	r0, r9, r5
 800a5ca:	f7ff ff8f 	bl	800a4ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a5ce:	b147      	cbz	r7, 800a5e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 800a5d0:	6821      	ldr	r1, [r4, #0]
 800a5d2:	442e      	add	r6, r5
 800a5d4:	eb05 0008 	add.w	r0, r5, r8
 800a5d8:	463a      	mov	r2, r7
 800a5da:	4431      	add	r1, r6
 800a5dc:	4448      	add	r0, r9
 800a5de:	f7ff ff85 	bl	800a4ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f7ff ff62 	bl	800a4ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a5e8:	9b01      	ldr	r3, [sp, #4]
 800a5ea:	f8c4 9000 	str.w	r9, [r4]
 800a5ee:	60a3      	str	r3, [r4, #8]
 800a5f0:	b002      	add	sp, #8
 800a5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a5f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800a5f6:	f100 0208 	add.w	r2, r0, #8
 800a5fa:	6002      	str	r2, [r0, #0]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	6042      	str	r2, [r0, #4]
 800a600:	7202      	strb	r2, [r0, #8]
 800a602:	4770      	bx	lr

0800a604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800a604:	b510      	push	{r4, lr}
 800a606:	4604      	mov	r4, r0
 800a608:	f7ff ff50 	bl	800a4ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a60c:	4620      	mov	r0, r4
 800a60e:	bd10      	pop	{r4, pc}

0800a610 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800a610:	b510      	push	{r4, lr}
 800a612:	4604      	mov	r4, r0
 800a614:	f7ff ff89 	bl	800a52a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800a618:	4620      	mov	r0, r4
 800a61a:	bd10      	pop	{r4, pc}

0800a61c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 800a61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61e:	460b      	mov	r3, r1
 800a620:	4606      	mov	r6, r0
 800a622:	f853 7b08 	ldr.w	r7, [r3], #8
 800a626:	f856 2b08 	ldr.w	r2, [r6], #8
 800a62a:	42bb      	cmp	r3, r7
 800a62c:	4605      	mov	r5, r0
 800a62e:	460c      	mov	r4, r1
 800a630:	d016      	beq.n	800a660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 800a632:	6007      	str	r7, [r0, #0]
 800a634:	6849      	ldr	r1, [r1, #4]
 800a636:	6041      	str	r1, [r0, #4]
 800a638:	4296      	cmp	r6, r2
 800a63a:	68a1      	ldr	r1, [r4, #8]
 800a63c:	bf18      	it	ne
 800a63e:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 800a642:	6081      	str	r1, [r0, #8]
 800a644:	bf08      	it	eq
 800a646:	2200      	moveq	r2, #0
 800a648:	b142      	cbz	r2, 800a65c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 800a64a:	6022      	str	r2, [r4, #0]
 800a64c:	f8c4 c008 	str.w	ip, [r4, #8]
 800a650:	6822      	ldr	r2, [r4, #0]
 800a652:	2300      	movs	r3, #0
 800a654:	6063      	str	r3, [r4, #4]
 800a656:	7013      	strb	r3, [r2, #0]
 800a658:	4628      	mov	r0, r5
 800a65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	e7f7      	b.n	800a650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 800a660:	f7ff ff63 	bl	800a52a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800a664:	e7f4      	b.n	800a650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

0800a666 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800a666:	6840      	ldr	r0, [r0, #4]
 800a668:	4770      	bx	lr
	...

0800a66c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800a66c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a670:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a672:	4614      	mov	r4, r2
 800a674:	4681      	mov	r9, r0
 800a676:	462a      	mov	r2, r5
 800a678:	460f      	mov	r7, r1
 800a67a:	4698      	mov	r8, r3
 800a67c:	4621      	mov	r1, r4
 800a67e:	4b37      	ldr	r3, [pc, #220]	; (800a75c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 800a680:	f7ff ff1c 	bl	800a4bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800a684:	464a      	mov	r2, r9
 800a686:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a68a:	f852 6b08 	ldr.w	r6, [r2], #8
 800a68e:	4296      	cmp	r6, r2
 800a690:	eba5 0b04 	sub.w	fp, r5, r4
 800a694:	bf18      	it	ne
 800a696:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 800a69a:	eb03 0a0b 	add.w	sl, r3, fp
 800a69e:	bf08      	it	eq
 800a6a0:	220f      	moveq	r2, #15
 800a6a2:	4552      	cmp	r2, sl
 800a6a4:	d34e      	bcc.n	800a744 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 800a6a6:	443e      	add	r6, r7
 800a6a8:	4641      	mov	r1, r8
 800a6aa:	1bdf      	subs	r7, r3, r7
 800a6ac:	4648      	mov	r0, r9
 800a6ae:	1b3f      	subs	r7, r7, r4
 800a6b0:	f7ff ff10 	bl	800a4d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800a6b4:	b170      	cbz	r0, 800a6d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800a6b6:	b137      	cbz	r7, 800a6c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 800a6b8:	42ac      	cmp	r4, r5
 800a6ba:	d004      	beq.n	800a6c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 800a6bc:	463a      	mov	r2, r7
 800a6be:	1931      	adds	r1, r6, r4
 800a6c0:	1970      	adds	r0, r6, r5
 800a6c2:	f7ff ff1c 	bl	800a4fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800a6c6:	b30d      	cbz	r5, 800a70c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800a6c8:	462a      	mov	r2, r5
 800a6ca:	4641      	mov	r1, r8
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	f7ff ff0d 	bl	800a4ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a6d2:	e01b      	b.n	800a70c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800a6d4:	b135      	cbz	r5, 800a6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 800a6d6:	42ac      	cmp	r4, r5
 800a6d8:	d33c      	bcc.n	800a754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 800a6da:	462a      	mov	r2, r5
 800a6dc:	4641      	mov	r1, r8
 800a6de:	4630      	mov	r0, r6
 800a6e0:	f7ff ff0d 	bl	800a4fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800a6e4:	b197      	cbz	r7, 800a70c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800a6e6:	42ac      	cmp	r4, r5
 800a6e8:	d010      	beq.n	800a70c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800a6ea:	463a      	mov	r2, r7
 800a6ec:	1931      	adds	r1, r6, r4
 800a6ee:	1970      	adds	r0, r6, r5
 800a6f0:	f7ff ff05 	bl	800a4fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800a6f4:	42ac      	cmp	r4, r5
 800a6f6:	d209      	bcs.n	800a70c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800a6f8:	4434      	add	r4, r6
 800a6fa:	eb08 0305 	add.w	r3, r8, r5
 800a6fe:	429c      	cmp	r4, r3
 800a700:	d30f      	bcc.n	800a722 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 800a702:	462a      	mov	r2, r5
 800a704:	4641      	mov	r1, r8
 800a706:	4630      	mov	r0, r6
 800a708:	f7ff fef9 	bl	800a4fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800a70c:	f8d9 3000 	ldr.w	r3, [r9]
 800a710:	f8c9 a004 	str.w	sl, [r9, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	4648      	mov	r0, r9
 800a718:	f803 200a 	strb.w	r2, [r3, sl]
 800a71c:	b003      	add	sp, #12
 800a71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a722:	4544      	cmp	r4, r8
 800a724:	d803      	bhi.n	800a72e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 800a726:	462a      	mov	r2, r5
 800a728:	eb08 010b 	add.w	r1, r8, fp
 800a72c:	e7ce      	b.n	800a6cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800a72e:	eba4 0408 	sub.w	r4, r4, r8
 800a732:	4622      	mov	r2, r4
 800a734:	4641      	mov	r1, r8
 800a736:	4630      	mov	r0, r6
 800a738:	f7ff fee1 	bl	800a4fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800a73c:	1b2a      	subs	r2, r5, r4
 800a73e:	1971      	adds	r1, r6, r5
 800a740:	1930      	adds	r0, r6, r4
 800a742:	e7c4      	b.n	800a6ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 800a744:	9500      	str	r5, [sp, #0]
 800a746:	4643      	mov	r3, r8
 800a748:	4622      	mov	r2, r4
 800a74a:	4639      	mov	r1, r7
 800a74c:	4648      	mov	r0, r9
 800a74e:	f7ff ff13 	bl	800a578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800a752:	e7db      	b.n	800a70c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800a754:	2f00      	cmp	r7, #0
 800a756:	d0cf      	beq.n	800a6f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 800a758:	e7c7      	b.n	800a6ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800a75a:	bf00      	nop
 800a75c:	0800d244 	.word	0x0800d244

0800a760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 800a760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a762:	4604      	mov	r4, r0
 800a764:	4608      	mov	r0, r1
 800a766:	460d      	mov	r5, r1
 800a768:	f7f5 fda2 	bl	80002b0 <strlen>
 800a76c:	462b      	mov	r3, r5
 800a76e:	9000      	str	r0, [sp, #0]
 800a770:	6862      	ldr	r2, [r4, #4]
 800a772:	2100      	movs	r1, #0
 800a774:	4620      	mov	r0, r4
 800a776:	f7ff ff79 	bl	800a66c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800a77a:	b003      	add	sp, #12
 800a77c:	bd30      	pop	{r4, r5, pc}

0800a77e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 800a77e:	b508      	push	{r3, lr}
 800a780:	f7ff ffee 	bl	800a760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 800a784:	bd08      	pop	{r3, pc}

0800a786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800a786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a788:	4604      	mov	r4, r0
 800a78a:	4626      	mov	r6, r4
 800a78c:	6840      	ldr	r0, [r0, #4]
 800a78e:	f856 3b08 	ldr.w	r3, [r6], #8
 800a792:	42b3      	cmp	r3, r6
 800a794:	bf18      	it	ne
 800a796:	68a6      	ldrne	r6, [r4, #8]
 800a798:	eb00 0502 	add.w	r5, r0, r2
 800a79c:	bf08      	it	eq
 800a79e:	260f      	moveq	r6, #15
 800a7a0:	42b5      	cmp	r5, r6
 800a7a2:	d80a      	bhi.n	800a7ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800a7a4:	b112      	cbz	r2, 800a7ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800a7a6:	4418      	add	r0, r3
 800a7a8:	f7ff fea0 	bl	800a4ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a7ac:	6823      	ldr	r3, [r4, #0]
 800a7ae:	6065      	str	r5, [r4, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	555a      	strb	r2, [r3, r5]
 800a7b6:	b002      	add	sp, #8
 800a7b8:	bd70      	pop	{r4, r5, r6, pc}
 800a7ba:	9200      	str	r2, [sp, #0]
 800a7bc:	460b      	mov	r3, r1
 800a7be:	2200      	movs	r2, #0
 800a7c0:	4601      	mov	r1, r0
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f7ff fed8 	bl	800a578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800a7c8:	e7f0      	b.n	800a7ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0800a7ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800a7ca:	b508      	push	{r3, lr}
 800a7cc:	e9d1 1200 	ldrd	r1, r2, [r1]
 800a7d0:	f7ff ffd9 	bl	800a786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800a7d4:	bd08      	pop	{r3, pc}

0800a7d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800a7d6:	6800      	ldr	r0, [r0, #0]
 800a7d8:	4770      	bx	lr

0800a7da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800a7da:	6001      	str	r1, [r0, #0]
 800a7dc:	4770      	bx	lr
	...

0800a7e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800a7e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	4616      	mov	r6, r2
 800a7e6:	460d      	mov	r5, r1
 800a7e8:	b919      	cbnz	r1, 800a7f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a7ea:	b112      	cbz	r2, 800a7f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a7ec:	480d      	ldr	r0, [pc, #52]	; (800a824 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800a7ee:	f7ff fe2b 	bl	800a448 <_ZSt19__throw_logic_errorPKc>
 800a7f2:	1b73      	subs	r3, r6, r5
 800a7f4:	2b0f      	cmp	r3, #15
 800a7f6:	9301      	str	r3, [sp, #4]
 800a7f8:	d907      	bls.n	800a80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	a901      	add	r1, sp, #4
 800a7fe:	4620      	mov	r0, r4
 800a800:	f7ff fe3a 	bl	800a478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a804:	9b01      	ldr	r3, [sp, #4]
 800a806:	6020      	str	r0, [r4, #0]
 800a808:	60a3      	str	r3, [r4, #8]
 800a80a:	4632      	mov	r2, r6
 800a80c:	4629      	mov	r1, r5
 800a80e:	6820      	ldr	r0, [r4, #0]
 800a810:	f7ff fe86 	bl	800a520 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800a814:	9b01      	ldr	r3, [sp, #4]
 800a816:	6822      	ldr	r2, [r4, #0]
 800a818:	6063      	str	r3, [r4, #4]
 800a81a:	2100      	movs	r1, #0
 800a81c:	54d1      	strb	r1, [r2, r3]
 800a81e:	b002      	add	sp, #8
 800a820:	bd70      	pop	{r4, r5, r6, pc}
 800a822:	bf00      	nop
 800a824:	0800d25d 	.word	0x0800d25d

0800a828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800a828:	b538      	push	{r3, r4, r5, lr}
 800a82a:	f100 0308 	add.w	r3, r0, #8
 800a82e:	4604      	mov	r4, r0
 800a830:	6003      	str	r3, [r0, #0]
 800a832:	460d      	mov	r5, r1
 800a834:	b159      	cbz	r1, 800a84e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800a836:	4608      	mov	r0, r1
 800a838:	f7f5 fd3a 	bl	80002b0 <strlen>
 800a83c:	182a      	adds	r2, r5, r0
 800a83e:	4620      	mov	r0, r4
 800a840:	f04f 0300 	mov.w	r3, #0
 800a844:	4629      	mov	r1, r5
 800a846:	f7ff ffcb 	bl	800a7e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800a84a:	4620      	mov	r0, r4
 800a84c:	bd38      	pop	{r3, r4, r5, pc}
 800a84e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a852:	e7f4      	b.n	800a83e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800a854 <abort>:
 800a854:	b508      	push	{r3, lr}
 800a856:	2006      	movs	r0, #6
 800a858:	f000 fc42 	bl	800b0e0 <raise>
 800a85c:	2001      	movs	r0, #1
 800a85e:	f7fb fd55 	bl	800630c <_exit>
	...

0800a864 <__assert_func>:
 800a864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a866:	461c      	mov	r4, r3
 800a868:	4b09      	ldr	r3, [pc, #36]	; (800a890 <__assert_func+0x2c>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4605      	mov	r5, r0
 800a86e:	68d8      	ldr	r0, [r3, #12]
 800a870:	b152      	cbz	r2, 800a888 <__assert_func+0x24>
 800a872:	4b08      	ldr	r3, [pc, #32]	; (800a894 <__assert_func+0x30>)
 800a874:	9100      	str	r1, [sp, #0]
 800a876:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a87a:	4907      	ldr	r1, [pc, #28]	; (800a898 <__assert_func+0x34>)
 800a87c:	462b      	mov	r3, r5
 800a87e:	4622      	mov	r2, r4
 800a880:	f000 f814 	bl	800a8ac <fiprintf>
 800a884:	f7ff ffe6 	bl	800a854 <abort>
 800a888:	4b04      	ldr	r3, [pc, #16]	; (800a89c <__assert_func+0x38>)
 800a88a:	461a      	mov	r2, r3
 800a88c:	e7f2      	b.n	800a874 <__assert_func+0x10>
 800a88e:	bf00      	nop
 800a890:	200000f8 	.word	0x200000f8
 800a894:	0800d29f 	.word	0x0800d29f
 800a898:	0800d2ac 	.word	0x0800d2ac
 800a89c:	0800d2da 	.word	0x0800d2da

0800a8a0 <__errno>:
 800a8a0:	4b01      	ldr	r3, [pc, #4]	; (800a8a8 <__errno+0x8>)
 800a8a2:	6818      	ldr	r0, [r3, #0]
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	200000f8 	.word	0x200000f8

0800a8ac <fiprintf>:
 800a8ac:	b40e      	push	{r1, r2, r3}
 800a8ae:	b503      	push	{r0, r1, lr}
 800a8b0:	4601      	mov	r1, r0
 800a8b2:	ab03      	add	r3, sp, #12
 800a8b4:	4805      	ldr	r0, [pc, #20]	; (800a8cc <fiprintf+0x20>)
 800a8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ba:	6800      	ldr	r0, [r0, #0]
 800a8bc:	9301      	str	r3, [sp, #4]
 800a8be:	f000 f939 	bl	800ab34 <_vfiprintf_r>
 800a8c2:	b002      	add	sp, #8
 800a8c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8c8:	b003      	add	sp, #12
 800a8ca:	4770      	bx	lr
 800a8cc:	200000f8 	.word	0x200000f8

0800a8d0 <__libc_init_array>:
 800a8d0:	b570      	push	{r4, r5, r6, lr}
 800a8d2:	4e0d      	ldr	r6, [pc, #52]	; (800a908 <__libc_init_array+0x38>)
 800a8d4:	4c0d      	ldr	r4, [pc, #52]	; (800a90c <__libc_init_array+0x3c>)
 800a8d6:	1ba4      	subs	r4, r4, r6
 800a8d8:	10a4      	asrs	r4, r4, #2
 800a8da:	2500      	movs	r5, #0
 800a8dc:	42a5      	cmp	r5, r4
 800a8de:	d109      	bne.n	800a8f4 <__libc_init_array+0x24>
 800a8e0:	4e0b      	ldr	r6, [pc, #44]	; (800a910 <__libc_init_array+0x40>)
 800a8e2:	4c0c      	ldr	r4, [pc, #48]	; (800a914 <__libc_init_array+0x44>)
 800a8e4:	f001 f91e 	bl	800bb24 <_init>
 800a8e8:	1ba4      	subs	r4, r4, r6
 800a8ea:	10a4      	asrs	r4, r4, #2
 800a8ec:	2500      	movs	r5, #0
 800a8ee:	42a5      	cmp	r5, r4
 800a8f0:	d105      	bne.n	800a8fe <__libc_init_array+0x2e>
 800a8f2:	bd70      	pop	{r4, r5, r6, pc}
 800a8f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a8f8:	4798      	blx	r3
 800a8fa:	3501      	adds	r5, #1
 800a8fc:	e7ee      	b.n	800a8dc <__libc_init_array+0xc>
 800a8fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a902:	4798      	blx	r3
 800a904:	3501      	adds	r5, #1
 800a906:	e7f2      	b.n	800a8ee <__libc_init_array+0x1e>
 800a908:	0800d37c 	.word	0x0800d37c
 800a90c:	0800d37c 	.word	0x0800d37c
 800a910:	0800d37c 	.word	0x0800d37c
 800a914:	0800d388 	.word	0x0800d388

0800a918 <malloc>:
 800a918:	4b02      	ldr	r3, [pc, #8]	; (800a924 <malloc+0xc>)
 800a91a:	4601      	mov	r1, r0
 800a91c:	6818      	ldr	r0, [r3, #0]
 800a91e:	f000 b885 	b.w	800aa2c <_malloc_r>
 800a922:	bf00      	nop
 800a924:	200000f8 	.word	0x200000f8

0800a928 <free>:
 800a928:	4b02      	ldr	r3, [pc, #8]	; (800a934 <free+0xc>)
 800a92a:	4601      	mov	r1, r0
 800a92c:	6818      	ldr	r0, [r3, #0]
 800a92e:	f000 b82f 	b.w	800a990 <_free_r>
 800a932:	bf00      	nop
 800a934:	200000f8 	.word	0x200000f8

0800a938 <memcpy>:
 800a938:	b510      	push	{r4, lr}
 800a93a:	1e43      	subs	r3, r0, #1
 800a93c:	440a      	add	r2, r1
 800a93e:	4291      	cmp	r1, r2
 800a940:	d100      	bne.n	800a944 <memcpy+0xc>
 800a942:	bd10      	pop	{r4, pc}
 800a944:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a948:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a94c:	e7f7      	b.n	800a93e <memcpy+0x6>

0800a94e <memmove>:
 800a94e:	4288      	cmp	r0, r1
 800a950:	b510      	push	{r4, lr}
 800a952:	eb01 0302 	add.w	r3, r1, r2
 800a956:	d807      	bhi.n	800a968 <memmove+0x1a>
 800a958:	1e42      	subs	r2, r0, #1
 800a95a:	4299      	cmp	r1, r3
 800a95c:	d00a      	beq.n	800a974 <memmove+0x26>
 800a95e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a962:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a966:	e7f8      	b.n	800a95a <memmove+0xc>
 800a968:	4283      	cmp	r3, r0
 800a96a:	d9f5      	bls.n	800a958 <memmove+0xa>
 800a96c:	1881      	adds	r1, r0, r2
 800a96e:	1ad2      	subs	r2, r2, r3
 800a970:	42d3      	cmn	r3, r2
 800a972:	d100      	bne.n	800a976 <memmove+0x28>
 800a974:	bd10      	pop	{r4, pc}
 800a976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a97a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a97e:	e7f7      	b.n	800a970 <memmove+0x22>

0800a980 <memset>:
 800a980:	4402      	add	r2, r0
 800a982:	4603      	mov	r3, r0
 800a984:	4293      	cmp	r3, r2
 800a986:	d100      	bne.n	800a98a <memset+0xa>
 800a988:	4770      	bx	lr
 800a98a:	f803 1b01 	strb.w	r1, [r3], #1
 800a98e:	e7f9      	b.n	800a984 <memset+0x4>

0800a990 <_free_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4605      	mov	r5, r0
 800a994:	2900      	cmp	r1, #0
 800a996:	d045      	beq.n	800aa24 <_free_r+0x94>
 800a998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a99c:	1f0c      	subs	r4, r1, #4
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	bfb8      	it	lt
 800a9a2:	18e4      	addlt	r4, r4, r3
 800a9a4:	f000 fe90 	bl	800b6c8 <__malloc_lock>
 800a9a8:	4a1f      	ldr	r2, [pc, #124]	; (800aa28 <_free_r+0x98>)
 800a9aa:	6813      	ldr	r3, [r2, #0]
 800a9ac:	4610      	mov	r0, r2
 800a9ae:	b933      	cbnz	r3, 800a9be <_free_r+0x2e>
 800a9b0:	6063      	str	r3, [r4, #4]
 800a9b2:	6014      	str	r4, [r2, #0]
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9ba:	f000 be86 	b.w	800b6ca <__malloc_unlock>
 800a9be:	42a3      	cmp	r3, r4
 800a9c0:	d90c      	bls.n	800a9dc <_free_r+0x4c>
 800a9c2:	6821      	ldr	r1, [r4, #0]
 800a9c4:	1862      	adds	r2, r4, r1
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	bf04      	itt	eq
 800a9ca:	681a      	ldreq	r2, [r3, #0]
 800a9cc:	685b      	ldreq	r3, [r3, #4]
 800a9ce:	6063      	str	r3, [r4, #4]
 800a9d0:	bf04      	itt	eq
 800a9d2:	1852      	addeq	r2, r2, r1
 800a9d4:	6022      	streq	r2, [r4, #0]
 800a9d6:	6004      	str	r4, [r0, #0]
 800a9d8:	e7ec      	b.n	800a9b4 <_free_r+0x24>
 800a9da:	4613      	mov	r3, r2
 800a9dc:	685a      	ldr	r2, [r3, #4]
 800a9de:	b10a      	cbz	r2, 800a9e4 <_free_r+0x54>
 800a9e0:	42a2      	cmp	r2, r4
 800a9e2:	d9fa      	bls.n	800a9da <_free_r+0x4a>
 800a9e4:	6819      	ldr	r1, [r3, #0]
 800a9e6:	1858      	adds	r0, r3, r1
 800a9e8:	42a0      	cmp	r0, r4
 800a9ea:	d10b      	bne.n	800aa04 <_free_r+0x74>
 800a9ec:	6820      	ldr	r0, [r4, #0]
 800a9ee:	4401      	add	r1, r0
 800a9f0:	1858      	adds	r0, r3, r1
 800a9f2:	4282      	cmp	r2, r0
 800a9f4:	6019      	str	r1, [r3, #0]
 800a9f6:	d1dd      	bne.n	800a9b4 <_free_r+0x24>
 800a9f8:	6810      	ldr	r0, [r2, #0]
 800a9fa:	6852      	ldr	r2, [r2, #4]
 800a9fc:	605a      	str	r2, [r3, #4]
 800a9fe:	4401      	add	r1, r0
 800aa00:	6019      	str	r1, [r3, #0]
 800aa02:	e7d7      	b.n	800a9b4 <_free_r+0x24>
 800aa04:	d902      	bls.n	800aa0c <_free_r+0x7c>
 800aa06:	230c      	movs	r3, #12
 800aa08:	602b      	str	r3, [r5, #0]
 800aa0a:	e7d3      	b.n	800a9b4 <_free_r+0x24>
 800aa0c:	6820      	ldr	r0, [r4, #0]
 800aa0e:	1821      	adds	r1, r4, r0
 800aa10:	428a      	cmp	r2, r1
 800aa12:	bf04      	itt	eq
 800aa14:	6811      	ldreq	r1, [r2, #0]
 800aa16:	6852      	ldreq	r2, [r2, #4]
 800aa18:	6062      	str	r2, [r4, #4]
 800aa1a:	bf04      	itt	eq
 800aa1c:	1809      	addeq	r1, r1, r0
 800aa1e:	6021      	streq	r1, [r4, #0]
 800aa20:	605c      	str	r4, [r3, #4]
 800aa22:	e7c7      	b.n	800a9b4 <_free_r+0x24>
 800aa24:	bd38      	pop	{r3, r4, r5, pc}
 800aa26:	bf00      	nop
 800aa28:	200017e8 	.word	0x200017e8

0800aa2c <_malloc_r>:
 800aa2c:	b570      	push	{r4, r5, r6, lr}
 800aa2e:	1ccd      	adds	r5, r1, #3
 800aa30:	f025 0503 	bic.w	r5, r5, #3
 800aa34:	3508      	adds	r5, #8
 800aa36:	2d0c      	cmp	r5, #12
 800aa38:	bf38      	it	cc
 800aa3a:	250c      	movcc	r5, #12
 800aa3c:	2d00      	cmp	r5, #0
 800aa3e:	4606      	mov	r6, r0
 800aa40:	db01      	blt.n	800aa46 <_malloc_r+0x1a>
 800aa42:	42a9      	cmp	r1, r5
 800aa44:	d903      	bls.n	800aa4e <_malloc_r+0x22>
 800aa46:	230c      	movs	r3, #12
 800aa48:	6033      	str	r3, [r6, #0]
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	bd70      	pop	{r4, r5, r6, pc}
 800aa4e:	f000 fe3b 	bl	800b6c8 <__malloc_lock>
 800aa52:	4a21      	ldr	r2, [pc, #132]	; (800aad8 <_malloc_r+0xac>)
 800aa54:	6814      	ldr	r4, [r2, #0]
 800aa56:	4621      	mov	r1, r4
 800aa58:	b991      	cbnz	r1, 800aa80 <_malloc_r+0x54>
 800aa5a:	4c20      	ldr	r4, [pc, #128]	; (800aadc <_malloc_r+0xb0>)
 800aa5c:	6823      	ldr	r3, [r4, #0]
 800aa5e:	b91b      	cbnz	r3, 800aa68 <_malloc_r+0x3c>
 800aa60:	4630      	mov	r0, r6
 800aa62:	f000 fb05 	bl	800b070 <_sbrk_r>
 800aa66:	6020      	str	r0, [r4, #0]
 800aa68:	4629      	mov	r1, r5
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f000 fb00 	bl	800b070 <_sbrk_r>
 800aa70:	1c43      	adds	r3, r0, #1
 800aa72:	d124      	bne.n	800aabe <_malloc_r+0x92>
 800aa74:	230c      	movs	r3, #12
 800aa76:	6033      	str	r3, [r6, #0]
 800aa78:	4630      	mov	r0, r6
 800aa7a:	f000 fe26 	bl	800b6ca <__malloc_unlock>
 800aa7e:	e7e4      	b.n	800aa4a <_malloc_r+0x1e>
 800aa80:	680b      	ldr	r3, [r1, #0]
 800aa82:	1b5b      	subs	r3, r3, r5
 800aa84:	d418      	bmi.n	800aab8 <_malloc_r+0x8c>
 800aa86:	2b0b      	cmp	r3, #11
 800aa88:	d90f      	bls.n	800aaaa <_malloc_r+0x7e>
 800aa8a:	600b      	str	r3, [r1, #0]
 800aa8c:	50cd      	str	r5, [r1, r3]
 800aa8e:	18cc      	adds	r4, r1, r3
 800aa90:	4630      	mov	r0, r6
 800aa92:	f000 fe1a 	bl	800b6ca <__malloc_unlock>
 800aa96:	f104 000b 	add.w	r0, r4, #11
 800aa9a:	1d23      	adds	r3, r4, #4
 800aa9c:	f020 0007 	bic.w	r0, r0, #7
 800aaa0:	1ac3      	subs	r3, r0, r3
 800aaa2:	d0d3      	beq.n	800aa4c <_malloc_r+0x20>
 800aaa4:	425a      	negs	r2, r3
 800aaa6:	50e2      	str	r2, [r4, r3]
 800aaa8:	e7d0      	b.n	800aa4c <_malloc_r+0x20>
 800aaaa:	428c      	cmp	r4, r1
 800aaac:	684b      	ldr	r3, [r1, #4]
 800aaae:	bf16      	itet	ne
 800aab0:	6063      	strne	r3, [r4, #4]
 800aab2:	6013      	streq	r3, [r2, #0]
 800aab4:	460c      	movne	r4, r1
 800aab6:	e7eb      	b.n	800aa90 <_malloc_r+0x64>
 800aab8:	460c      	mov	r4, r1
 800aaba:	6849      	ldr	r1, [r1, #4]
 800aabc:	e7cc      	b.n	800aa58 <_malloc_r+0x2c>
 800aabe:	1cc4      	adds	r4, r0, #3
 800aac0:	f024 0403 	bic.w	r4, r4, #3
 800aac4:	42a0      	cmp	r0, r4
 800aac6:	d005      	beq.n	800aad4 <_malloc_r+0xa8>
 800aac8:	1a21      	subs	r1, r4, r0
 800aaca:	4630      	mov	r0, r6
 800aacc:	f000 fad0 	bl	800b070 <_sbrk_r>
 800aad0:	3001      	adds	r0, #1
 800aad2:	d0cf      	beq.n	800aa74 <_malloc_r+0x48>
 800aad4:	6025      	str	r5, [r4, #0]
 800aad6:	e7db      	b.n	800aa90 <_malloc_r+0x64>
 800aad8:	200017e8 	.word	0x200017e8
 800aadc:	200017ec 	.word	0x200017ec

0800aae0 <__sfputc_r>:
 800aae0:	6893      	ldr	r3, [r2, #8]
 800aae2:	3b01      	subs	r3, #1
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	b410      	push	{r4}
 800aae8:	6093      	str	r3, [r2, #8]
 800aaea:	da08      	bge.n	800aafe <__sfputc_r+0x1e>
 800aaec:	6994      	ldr	r4, [r2, #24]
 800aaee:	42a3      	cmp	r3, r4
 800aaf0:	db01      	blt.n	800aaf6 <__sfputc_r+0x16>
 800aaf2:	290a      	cmp	r1, #10
 800aaf4:	d103      	bne.n	800aafe <__sfputc_r+0x1e>
 800aaf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aafa:	f000 bb47 	b.w	800b18c <__swbuf_r>
 800aafe:	6813      	ldr	r3, [r2, #0]
 800ab00:	1c58      	adds	r0, r3, #1
 800ab02:	6010      	str	r0, [r2, #0]
 800ab04:	7019      	strb	r1, [r3, #0]
 800ab06:	4608      	mov	r0, r1
 800ab08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab0c:	4770      	bx	lr

0800ab0e <__sfputs_r>:
 800ab0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab10:	4606      	mov	r6, r0
 800ab12:	460f      	mov	r7, r1
 800ab14:	4614      	mov	r4, r2
 800ab16:	18d5      	adds	r5, r2, r3
 800ab18:	42ac      	cmp	r4, r5
 800ab1a:	d101      	bne.n	800ab20 <__sfputs_r+0x12>
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	e007      	b.n	800ab30 <__sfputs_r+0x22>
 800ab20:	463a      	mov	r2, r7
 800ab22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab26:	4630      	mov	r0, r6
 800ab28:	f7ff ffda 	bl	800aae0 <__sfputc_r>
 800ab2c:	1c43      	adds	r3, r0, #1
 800ab2e:	d1f3      	bne.n	800ab18 <__sfputs_r+0xa>
 800ab30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab34 <_vfiprintf_r>:
 800ab34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab38:	460c      	mov	r4, r1
 800ab3a:	b09d      	sub	sp, #116	; 0x74
 800ab3c:	4617      	mov	r7, r2
 800ab3e:	461d      	mov	r5, r3
 800ab40:	4606      	mov	r6, r0
 800ab42:	b118      	cbz	r0, 800ab4c <_vfiprintf_r+0x18>
 800ab44:	6983      	ldr	r3, [r0, #24]
 800ab46:	b90b      	cbnz	r3, 800ab4c <_vfiprintf_r+0x18>
 800ab48:	f000 fcd0 	bl	800b4ec <__sinit>
 800ab4c:	4b7c      	ldr	r3, [pc, #496]	; (800ad40 <_vfiprintf_r+0x20c>)
 800ab4e:	429c      	cmp	r4, r3
 800ab50:	d158      	bne.n	800ac04 <_vfiprintf_r+0xd0>
 800ab52:	6874      	ldr	r4, [r6, #4]
 800ab54:	89a3      	ldrh	r3, [r4, #12]
 800ab56:	0718      	lsls	r0, r3, #28
 800ab58:	d55e      	bpl.n	800ac18 <_vfiprintf_r+0xe4>
 800ab5a:	6923      	ldr	r3, [r4, #16]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d05b      	beq.n	800ac18 <_vfiprintf_r+0xe4>
 800ab60:	2300      	movs	r3, #0
 800ab62:	9309      	str	r3, [sp, #36]	; 0x24
 800ab64:	2320      	movs	r3, #32
 800ab66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab6a:	2330      	movs	r3, #48	; 0x30
 800ab6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab70:	9503      	str	r5, [sp, #12]
 800ab72:	f04f 0b01 	mov.w	fp, #1
 800ab76:	46b8      	mov	r8, r7
 800ab78:	4645      	mov	r5, r8
 800ab7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ab7e:	b10b      	cbz	r3, 800ab84 <_vfiprintf_r+0x50>
 800ab80:	2b25      	cmp	r3, #37	; 0x25
 800ab82:	d154      	bne.n	800ac2e <_vfiprintf_r+0xfa>
 800ab84:	ebb8 0a07 	subs.w	sl, r8, r7
 800ab88:	d00b      	beq.n	800aba2 <_vfiprintf_r+0x6e>
 800ab8a:	4653      	mov	r3, sl
 800ab8c:	463a      	mov	r2, r7
 800ab8e:	4621      	mov	r1, r4
 800ab90:	4630      	mov	r0, r6
 800ab92:	f7ff ffbc 	bl	800ab0e <__sfputs_r>
 800ab96:	3001      	adds	r0, #1
 800ab98:	f000 80c2 	beq.w	800ad20 <_vfiprintf_r+0x1ec>
 800ab9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab9e:	4453      	add	r3, sl
 800aba0:	9309      	str	r3, [sp, #36]	; 0x24
 800aba2:	f898 3000 	ldrb.w	r3, [r8]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	f000 80ba 	beq.w	800ad20 <_vfiprintf_r+0x1ec>
 800abac:	2300      	movs	r3, #0
 800abae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abb6:	9304      	str	r3, [sp, #16]
 800abb8:	9307      	str	r3, [sp, #28]
 800abba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abbe:	931a      	str	r3, [sp, #104]	; 0x68
 800abc0:	46a8      	mov	r8, r5
 800abc2:	2205      	movs	r2, #5
 800abc4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800abc8:	485e      	ldr	r0, [pc, #376]	; (800ad44 <_vfiprintf_r+0x210>)
 800abca:	f7f5 fb21 	bl	8000210 <memchr>
 800abce:	9b04      	ldr	r3, [sp, #16]
 800abd0:	bb78      	cbnz	r0, 800ac32 <_vfiprintf_r+0xfe>
 800abd2:	06d9      	lsls	r1, r3, #27
 800abd4:	bf44      	itt	mi
 800abd6:	2220      	movmi	r2, #32
 800abd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abdc:	071a      	lsls	r2, r3, #28
 800abde:	bf44      	itt	mi
 800abe0:	222b      	movmi	r2, #43	; 0x2b
 800abe2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abe6:	782a      	ldrb	r2, [r5, #0]
 800abe8:	2a2a      	cmp	r2, #42	; 0x2a
 800abea:	d02a      	beq.n	800ac42 <_vfiprintf_r+0x10e>
 800abec:	9a07      	ldr	r2, [sp, #28]
 800abee:	46a8      	mov	r8, r5
 800abf0:	2000      	movs	r0, #0
 800abf2:	250a      	movs	r5, #10
 800abf4:	4641      	mov	r1, r8
 800abf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abfa:	3b30      	subs	r3, #48	; 0x30
 800abfc:	2b09      	cmp	r3, #9
 800abfe:	d969      	bls.n	800acd4 <_vfiprintf_r+0x1a0>
 800ac00:	b360      	cbz	r0, 800ac5c <_vfiprintf_r+0x128>
 800ac02:	e024      	b.n	800ac4e <_vfiprintf_r+0x11a>
 800ac04:	4b50      	ldr	r3, [pc, #320]	; (800ad48 <_vfiprintf_r+0x214>)
 800ac06:	429c      	cmp	r4, r3
 800ac08:	d101      	bne.n	800ac0e <_vfiprintf_r+0xda>
 800ac0a:	68b4      	ldr	r4, [r6, #8]
 800ac0c:	e7a2      	b.n	800ab54 <_vfiprintf_r+0x20>
 800ac0e:	4b4f      	ldr	r3, [pc, #316]	; (800ad4c <_vfiprintf_r+0x218>)
 800ac10:	429c      	cmp	r4, r3
 800ac12:	bf08      	it	eq
 800ac14:	68f4      	ldreq	r4, [r6, #12]
 800ac16:	e79d      	b.n	800ab54 <_vfiprintf_r+0x20>
 800ac18:	4621      	mov	r1, r4
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	f000 fb08 	bl	800b230 <__swsetup_r>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d09d      	beq.n	800ab60 <_vfiprintf_r+0x2c>
 800ac24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac28:	b01d      	add	sp, #116	; 0x74
 800ac2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2e:	46a8      	mov	r8, r5
 800ac30:	e7a2      	b.n	800ab78 <_vfiprintf_r+0x44>
 800ac32:	4a44      	ldr	r2, [pc, #272]	; (800ad44 <_vfiprintf_r+0x210>)
 800ac34:	1a80      	subs	r0, r0, r2
 800ac36:	fa0b f000 	lsl.w	r0, fp, r0
 800ac3a:	4318      	orrs	r0, r3
 800ac3c:	9004      	str	r0, [sp, #16]
 800ac3e:	4645      	mov	r5, r8
 800ac40:	e7be      	b.n	800abc0 <_vfiprintf_r+0x8c>
 800ac42:	9a03      	ldr	r2, [sp, #12]
 800ac44:	1d11      	adds	r1, r2, #4
 800ac46:	6812      	ldr	r2, [r2, #0]
 800ac48:	9103      	str	r1, [sp, #12]
 800ac4a:	2a00      	cmp	r2, #0
 800ac4c:	db01      	blt.n	800ac52 <_vfiprintf_r+0x11e>
 800ac4e:	9207      	str	r2, [sp, #28]
 800ac50:	e004      	b.n	800ac5c <_vfiprintf_r+0x128>
 800ac52:	4252      	negs	r2, r2
 800ac54:	f043 0302 	orr.w	r3, r3, #2
 800ac58:	9207      	str	r2, [sp, #28]
 800ac5a:	9304      	str	r3, [sp, #16]
 800ac5c:	f898 3000 	ldrb.w	r3, [r8]
 800ac60:	2b2e      	cmp	r3, #46	; 0x2e
 800ac62:	d10e      	bne.n	800ac82 <_vfiprintf_r+0x14e>
 800ac64:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ac68:	2b2a      	cmp	r3, #42	; 0x2a
 800ac6a:	d138      	bne.n	800acde <_vfiprintf_r+0x1aa>
 800ac6c:	9b03      	ldr	r3, [sp, #12]
 800ac6e:	1d1a      	adds	r2, r3, #4
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	9203      	str	r2, [sp, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	bfb8      	it	lt
 800ac78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ac7c:	f108 0802 	add.w	r8, r8, #2
 800ac80:	9305      	str	r3, [sp, #20]
 800ac82:	4d33      	ldr	r5, [pc, #204]	; (800ad50 <_vfiprintf_r+0x21c>)
 800ac84:	f898 1000 	ldrb.w	r1, [r8]
 800ac88:	2203      	movs	r2, #3
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	f7f5 fac0 	bl	8000210 <memchr>
 800ac90:	b140      	cbz	r0, 800aca4 <_vfiprintf_r+0x170>
 800ac92:	2340      	movs	r3, #64	; 0x40
 800ac94:	1b40      	subs	r0, r0, r5
 800ac96:	fa03 f000 	lsl.w	r0, r3, r0
 800ac9a:	9b04      	ldr	r3, [sp, #16]
 800ac9c:	4303      	orrs	r3, r0
 800ac9e:	f108 0801 	add.w	r8, r8, #1
 800aca2:	9304      	str	r3, [sp, #16]
 800aca4:	f898 1000 	ldrb.w	r1, [r8]
 800aca8:	482a      	ldr	r0, [pc, #168]	; (800ad54 <_vfiprintf_r+0x220>)
 800acaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acae:	2206      	movs	r2, #6
 800acb0:	f108 0701 	add.w	r7, r8, #1
 800acb4:	f7f5 faac 	bl	8000210 <memchr>
 800acb8:	2800      	cmp	r0, #0
 800acba:	d037      	beq.n	800ad2c <_vfiprintf_r+0x1f8>
 800acbc:	4b26      	ldr	r3, [pc, #152]	; (800ad58 <_vfiprintf_r+0x224>)
 800acbe:	bb1b      	cbnz	r3, 800ad08 <_vfiprintf_r+0x1d4>
 800acc0:	9b03      	ldr	r3, [sp, #12]
 800acc2:	3307      	adds	r3, #7
 800acc4:	f023 0307 	bic.w	r3, r3, #7
 800acc8:	3308      	adds	r3, #8
 800acca:	9303      	str	r3, [sp, #12]
 800accc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acce:	444b      	add	r3, r9
 800acd0:	9309      	str	r3, [sp, #36]	; 0x24
 800acd2:	e750      	b.n	800ab76 <_vfiprintf_r+0x42>
 800acd4:	fb05 3202 	mla	r2, r5, r2, r3
 800acd8:	2001      	movs	r0, #1
 800acda:	4688      	mov	r8, r1
 800acdc:	e78a      	b.n	800abf4 <_vfiprintf_r+0xc0>
 800acde:	2300      	movs	r3, #0
 800ace0:	f108 0801 	add.w	r8, r8, #1
 800ace4:	9305      	str	r3, [sp, #20]
 800ace6:	4619      	mov	r1, r3
 800ace8:	250a      	movs	r5, #10
 800acea:	4640      	mov	r0, r8
 800acec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acf0:	3a30      	subs	r2, #48	; 0x30
 800acf2:	2a09      	cmp	r2, #9
 800acf4:	d903      	bls.n	800acfe <_vfiprintf_r+0x1ca>
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d0c3      	beq.n	800ac82 <_vfiprintf_r+0x14e>
 800acfa:	9105      	str	r1, [sp, #20]
 800acfc:	e7c1      	b.n	800ac82 <_vfiprintf_r+0x14e>
 800acfe:	fb05 2101 	mla	r1, r5, r1, r2
 800ad02:	2301      	movs	r3, #1
 800ad04:	4680      	mov	r8, r0
 800ad06:	e7f0      	b.n	800acea <_vfiprintf_r+0x1b6>
 800ad08:	ab03      	add	r3, sp, #12
 800ad0a:	9300      	str	r3, [sp, #0]
 800ad0c:	4622      	mov	r2, r4
 800ad0e:	4b13      	ldr	r3, [pc, #76]	; (800ad5c <_vfiprintf_r+0x228>)
 800ad10:	a904      	add	r1, sp, #16
 800ad12:	4630      	mov	r0, r6
 800ad14:	f3af 8000 	nop.w
 800ad18:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ad1c:	4681      	mov	r9, r0
 800ad1e:	d1d5      	bne.n	800accc <_vfiprintf_r+0x198>
 800ad20:	89a3      	ldrh	r3, [r4, #12]
 800ad22:	065b      	lsls	r3, r3, #25
 800ad24:	f53f af7e 	bmi.w	800ac24 <_vfiprintf_r+0xf0>
 800ad28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad2a:	e77d      	b.n	800ac28 <_vfiprintf_r+0xf4>
 800ad2c:	ab03      	add	r3, sp, #12
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	4622      	mov	r2, r4
 800ad32:	4b0a      	ldr	r3, [pc, #40]	; (800ad5c <_vfiprintf_r+0x228>)
 800ad34:	a904      	add	r1, sp, #16
 800ad36:	4630      	mov	r0, r6
 800ad38:	f000 f888 	bl	800ae4c <_printf_i>
 800ad3c:	e7ec      	b.n	800ad18 <_vfiprintf_r+0x1e4>
 800ad3e:	bf00      	nop
 800ad40:	0800d334 	.word	0x0800d334
 800ad44:	0800d2e0 	.word	0x0800d2e0
 800ad48:	0800d354 	.word	0x0800d354
 800ad4c:	0800d314 	.word	0x0800d314
 800ad50:	0800d2e6 	.word	0x0800d2e6
 800ad54:	0800d2ea 	.word	0x0800d2ea
 800ad58:	00000000 	.word	0x00000000
 800ad5c:	0800ab0f 	.word	0x0800ab0f

0800ad60 <_printf_common>:
 800ad60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad64:	4691      	mov	r9, r2
 800ad66:	461f      	mov	r7, r3
 800ad68:	688a      	ldr	r2, [r1, #8]
 800ad6a:	690b      	ldr	r3, [r1, #16]
 800ad6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad70:	4293      	cmp	r3, r2
 800ad72:	bfb8      	it	lt
 800ad74:	4613      	movlt	r3, r2
 800ad76:	f8c9 3000 	str.w	r3, [r9]
 800ad7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad7e:	4606      	mov	r6, r0
 800ad80:	460c      	mov	r4, r1
 800ad82:	b112      	cbz	r2, 800ad8a <_printf_common+0x2a>
 800ad84:	3301      	adds	r3, #1
 800ad86:	f8c9 3000 	str.w	r3, [r9]
 800ad8a:	6823      	ldr	r3, [r4, #0]
 800ad8c:	0699      	lsls	r1, r3, #26
 800ad8e:	bf42      	ittt	mi
 800ad90:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ad94:	3302      	addmi	r3, #2
 800ad96:	f8c9 3000 	strmi.w	r3, [r9]
 800ad9a:	6825      	ldr	r5, [r4, #0]
 800ad9c:	f015 0506 	ands.w	r5, r5, #6
 800ada0:	d107      	bne.n	800adb2 <_printf_common+0x52>
 800ada2:	f104 0a19 	add.w	sl, r4, #25
 800ada6:	68e3      	ldr	r3, [r4, #12]
 800ada8:	f8d9 2000 	ldr.w	r2, [r9]
 800adac:	1a9b      	subs	r3, r3, r2
 800adae:	42ab      	cmp	r3, r5
 800adb0:	dc28      	bgt.n	800ae04 <_printf_common+0xa4>
 800adb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800adb6:	6822      	ldr	r2, [r4, #0]
 800adb8:	3300      	adds	r3, #0
 800adba:	bf18      	it	ne
 800adbc:	2301      	movne	r3, #1
 800adbe:	0692      	lsls	r2, r2, #26
 800adc0:	d42d      	bmi.n	800ae1e <_printf_common+0xbe>
 800adc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800adc6:	4639      	mov	r1, r7
 800adc8:	4630      	mov	r0, r6
 800adca:	47c0      	blx	r8
 800adcc:	3001      	adds	r0, #1
 800adce:	d020      	beq.n	800ae12 <_printf_common+0xb2>
 800add0:	6823      	ldr	r3, [r4, #0]
 800add2:	68e5      	ldr	r5, [r4, #12]
 800add4:	f8d9 2000 	ldr.w	r2, [r9]
 800add8:	f003 0306 	and.w	r3, r3, #6
 800addc:	2b04      	cmp	r3, #4
 800adde:	bf08      	it	eq
 800ade0:	1aad      	subeq	r5, r5, r2
 800ade2:	68a3      	ldr	r3, [r4, #8]
 800ade4:	6922      	ldr	r2, [r4, #16]
 800ade6:	bf0c      	ite	eq
 800ade8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800adec:	2500      	movne	r5, #0
 800adee:	4293      	cmp	r3, r2
 800adf0:	bfc4      	itt	gt
 800adf2:	1a9b      	subgt	r3, r3, r2
 800adf4:	18ed      	addgt	r5, r5, r3
 800adf6:	f04f 0900 	mov.w	r9, #0
 800adfa:	341a      	adds	r4, #26
 800adfc:	454d      	cmp	r5, r9
 800adfe:	d11a      	bne.n	800ae36 <_printf_common+0xd6>
 800ae00:	2000      	movs	r0, #0
 800ae02:	e008      	b.n	800ae16 <_printf_common+0xb6>
 800ae04:	2301      	movs	r3, #1
 800ae06:	4652      	mov	r2, sl
 800ae08:	4639      	mov	r1, r7
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	47c0      	blx	r8
 800ae0e:	3001      	adds	r0, #1
 800ae10:	d103      	bne.n	800ae1a <_printf_common+0xba>
 800ae12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae1a:	3501      	adds	r5, #1
 800ae1c:	e7c3      	b.n	800ada6 <_printf_common+0x46>
 800ae1e:	18e1      	adds	r1, r4, r3
 800ae20:	1c5a      	adds	r2, r3, #1
 800ae22:	2030      	movs	r0, #48	; 0x30
 800ae24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae28:	4422      	add	r2, r4
 800ae2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae32:	3302      	adds	r3, #2
 800ae34:	e7c5      	b.n	800adc2 <_printf_common+0x62>
 800ae36:	2301      	movs	r3, #1
 800ae38:	4622      	mov	r2, r4
 800ae3a:	4639      	mov	r1, r7
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	47c0      	blx	r8
 800ae40:	3001      	adds	r0, #1
 800ae42:	d0e6      	beq.n	800ae12 <_printf_common+0xb2>
 800ae44:	f109 0901 	add.w	r9, r9, #1
 800ae48:	e7d8      	b.n	800adfc <_printf_common+0x9c>
	...

0800ae4c <_printf_i>:
 800ae4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ae54:	460c      	mov	r4, r1
 800ae56:	7e09      	ldrb	r1, [r1, #24]
 800ae58:	b085      	sub	sp, #20
 800ae5a:	296e      	cmp	r1, #110	; 0x6e
 800ae5c:	4617      	mov	r7, r2
 800ae5e:	4606      	mov	r6, r0
 800ae60:	4698      	mov	r8, r3
 800ae62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae64:	f000 80b3 	beq.w	800afce <_printf_i+0x182>
 800ae68:	d822      	bhi.n	800aeb0 <_printf_i+0x64>
 800ae6a:	2963      	cmp	r1, #99	; 0x63
 800ae6c:	d036      	beq.n	800aedc <_printf_i+0x90>
 800ae6e:	d80a      	bhi.n	800ae86 <_printf_i+0x3a>
 800ae70:	2900      	cmp	r1, #0
 800ae72:	f000 80b9 	beq.w	800afe8 <_printf_i+0x19c>
 800ae76:	2958      	cmp	r1, #88	; 0x58
 800ae78:	f000 8083 	beq.w	800af82 <_printf_i+0x136>
 800ae7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ae84:	e032      	b.n	800aeec <_printf_i+0xa0>
 800ae86:	2964      	cmp	r1, #100	; 0x64
 800ae88:	d001      	beq.n	800ae8e <_printf_i+0x42>
 800ae8a:	2969      	cmp	r1, #105	; 0x69
 800ae8c:	d1f6      	bne.n	800ae7c <_printf_i+0x30>
 800ae8e:	6820      	ldr	r0, [r4, #0]
 800ae90:	6813      	ldr	r3, [r2, #0]
 800ae92:	0605      	lsls	r5, r0, #24
 800ae94:	f103 0104 	add.w	r1, r3, #4
 800ae98:	d52a      	bpl.n	800aef0 <_printf_i+0xa4>
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	6011      	str	r1, [r2, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	da03      	bge.n	800aeaa <_printf_i+0x5e>
 800aea2:	222d      	movs	r2, #45	; 0x2d
 800aea4:	425b      	negs	r3, r3
 800aea6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800aeaa:	486f      	ldr	r0, [pc, #444]	; (800b068 <_printf_i+0x21c>)
 800aeac:	220a      	movs	r2, #10
 800aeae:	e039      	b.n	800af24 <_printf_i+0xd8>
 800aeb0:	2973      	cmp	r1, #115	; 0x73
 800aeb2:	f000 809d 	beq.w	800aff0 <_printf_i+0x1a4>
 800aeb6:	d808      	bhi.n	800aeca <_printf_i+0x7e>
 800aeb8:	296f      	cmp	r1, #111	; 0x6f
 800aeba:	d020      	beq.n	800aefe <_printf_i+0xb2>
 800aebc:	2970      	cmp	r1, #112	; 0x70
 800aebe:	d1dd      	bne.n	800ae7c <_printf_i+0x30>
 800aec0:	6823      	ldr	r3, [r4, #0]
 800aec2:	f043 0320 	orr.w	r3, r3, #32
 800aec6:	6023      	str	r3, [r4, #0]
 800aec8:	e003      	b.n	800aed2 <_printf_i+0x86>
 800aeca:	2975      	cmp	r1, #117	; 0x75
 800aecc:	d017      	beq.n	800aefe <_printf_i+0xb2>
 800aece:	2978      	cmp	r1, #120	; 0x78
 800aed0:	d1d4      	bne.n	800ae7c <_printf_i+0x30>
 800aed2:	2378      	movs	r3, #120	; 0x78
 800aed4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aed8:	4864      	ldr	r0, [pc, #400]	; (800b06c <_printf_i+0x220>)
 800aeda:	e055      	b.n	800af88 <_printf_i+0x13c>
 800aedc:	6813      	ldr	r3, [r2, #0]
 800aede:	1d19      	adds	r1, r3, #4
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	6011      	str	r1, [r2, #0]
 800aee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aeec:	2301      	movs	r3, #1
 800aeee:	e08c      	b.n	800b00a <_printf_i+0x1be>
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	6011      	str	r1, [r2, #0]
 800aef4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aef8:	bf18      	it	ne
 800aefa:	b21b      	sxthne	r3, r3
 800aefc:	e7cf      	b.n	800ae9e <_printf_i+0x52>
 800aefe:	6813      	ldr	r3, [r2, #0]
 800af00:	6825      	ldr	r5, [r4, #0]
 800af02:	1d18      	adds	r0, r3, #4
 800af04:	6010      	str	r0, [r2, #0]
 800af06:	0628      	lsls	r0, r5, #24
 800af08:	d501      	bpl.n	800af0e <_printf_i+0xc2>
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	e002      	b.n	800af14 <_printf_i+0xc8>
 800af0e:	0668      	lsls	r0, r5, #25
 800af10:	d5fb      	bpl.n	800af0a <_printf_i+0xbe>
 800af12:	881b      	ldrh	r3, [r3, #0]
 800af14:	4854      	ldr	r0, [pc, #336]	; (800b068 <_printf_i+0x21c>)
 800af16:	296f      	cmp	r1, #111	; 0x6f
 800af18:	bf14      	ite	ne
 800af1a:	220a      	movne	r2, #10
 800af1c:	2208      	moveq	r2, #8
 800af1e:	2100      	movs	r1, #0
 800af20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af24:	6865      	ldr	r5, [r4, #4]
 800af26:	60a5      	str	r5, [r4, #8]
 800af28:	2d00      	cmp	r5, #0
 800af2a:	f2c0 8095 	blt.w	800b058 <_printf_i+0x20c>
 800af2e:	6821      	ldr	r1, [r4, #0]
 800af30:	f021 0104 	bic.w	r1, r1, #4
 800af34:	6021      	str	r1, [r4, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d13d      	bne.n	800afb6 <_printf_i+0x16a>
 800af3a:	2d00      	cmp	r5, #0
 800af3c:	f040 808e 	bne.w	800b05c <_printf_i+0x210>
 800af40:	4665      	mov	r5, ip
 800af42:	2a08      	cmp	r2, #8
 800af44:	d10b      	bne.n	800af5e <_printf_i+0x112>
 800af46:	6823      	ldr	r3, [r4, #0]
 800af48:	07db      	lsls	r3, r3, #31
 800af4a:	d508      	bpl.n	800af5e <_printf_i+0x112>
 800af4c:	6923      	ldr	r3, [r4, #16]
 800af4e:	6862      	ldr	r2, [r4, #4]
 800af50:	429a      	cmp	r2, r3
 800af52:	bfde      	ittt	le
 800af54:	2330      	movle	r3, #48	; 0x30
 800af56:	f805 3c01 	strble.w	r3, [r5, #-1]
 800af5a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800af5e:	ebac 0305 	sub.w	r3, ip, r5
 800af62:	6123      	str	r3, [r4, #16]
 800af64:	f8cd 8000 	str.w	r8, [sp]
 800af68:	463b      	mov	r3, r7
 800af6a:	aa03      	add	r2, sp, #12
 800af6c:	4621      	mov	r1, r4
 800af6e:	4630      	mov	r0, r6
 800af70:	f7ff fef6 	bl	800ad60 <_printf_common>
 800af74:	3001      	adds	r0, #1
 800af76:	d14d      	bne.n	800b014 <_printf_i+0x1c8>
 800af78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af7c:	b005      	add	sp, #20
 800af7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af82:	4839      	ldr	r0, [pc, #228]	; (800b068 <_printf_i+0x21c>)
 800af84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800af88:	6813      	ldr	r3, [r2, #0]
 800af8a:	6821      	ldr	r1, [r4, #0]
 800af8c:	1d1d      	adds	r5, r3, #4
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	6015      	str	r5, [r2, #0]
 800af92:	060a      	lsls	r2, r1, #24
 800af94:	d50b      	bpl.n	800afae <_printf_i+0x162>
 800af96:	07ca      	lsls	r2, r1, #31
 800af98:	bf44      	itt	mi
 800af9a:	f041 0120 	orrmi.w	r1, r1, #32
 800af9e:	6021      	strmi	r1, [r4, #0]
 800afa0:	b91b      	cbnz	r3, 800afaa <_printf_i+0x15e>
 800afa2:	6822      	ldr	r2, [r4, #0]
 800afa4:	f022 0220 	bic.w	r2, r2, #32
 800afa8:	6022      	str	r2, [r4, #0]
 800afaa:	2210      	movs	r2, #16
 800afac:	e7b7      	b.n	800af1e <_printf_i+0xd2>
 800afae:	064d      	lsls	r5, r1, #25
 800afb0:	bf48      	it	mi
 800afb2:	b29b      	uxthmi	r3, r3
 800afb4:	e7ef      	b.n	800af96 <_printf_i+0x14a>
 800afb6:	4665      	mov	r5, ip
 800afb8:	fbb3 f1f2 	udiv	r1, r3, r2
 800afbc:	fb02 3311 	mls	r3, r2, r1, r3
 800afc0:	5cc3      	ldrb	r3, [r0, r3]
 800afc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800afc6:	460b      	mov	r3, r1
 800afc8:	2900      	cmp	r1, #0
 800afca:	d1f5      	bne.n	800afb8 <_printf_i+0x16c>
 800afcc:	e7b9      	b.n	800af42 <_printf_i+0xf6>
 800afce:	6813      	ldr	r3, [r2, #0]
 800afd0:	6825      	ldr	r5, [r4, #0]
 800afd2:	6961      	ldr	r1, [r4, #20]
 800afd4:	1d18      	adds	r0, r3, #4
 800afd6:	6010      	str	r0, [r2, #0]
 800afd8:	0628      	lsls	r0, r5, #24
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	d501      	bpl.n	800afe2 <_printf_i+0x196>
 800afde:	6019      	str	r1, [r3, #0]
 800afe0:	e002      	b.n	800afe8 <_printf_i+0x19c>
 800afe2:	066a      	lsls	r2, r5, #25
 800afe4:	d5fb      	bpl.n	800afde <_printf_i+0x192>
 800afe6:	8019      	strh	r1, [r3, #0]
 800afe8:	2300      	movs	r3, #0
 800afea:	6123      	str	r3, [r4, #16]
 800afec:	4665      	mov	r5, ip
 800afee:	e7b9      	b.n	800af64 <_printf_i+0x118>
 800aff0:	6813      	ldr	r3, [r2, #0]
 800aff2:	1d19      	adds	r1, r3, #4
 800aff4:	6011      	str	r1, [r2, #0]
 800aff6:	681d      	ldr	r5, [r3, #0]
 800aff8:	6862      	ldr	r2, [r4, #4]
 800affa:	2100      	movs	r1, #0
 800affc:	4628      	mov	r0, r5
 800affe:	f7f5 f907 	bl	8000210 <memchr>
 800b002:	b108      	cbz	r0, 800b008 <_printf_i+0x1bc>
 800b004:	1b40      	subs	r0, r0, r5
 800b006:	6060      	str	r0, [r4, #4]
 800b008:	6863      	ldr	r3, [r4, #4]
 800b00a:	6123      	str	r3, [r4, #16]
 800b00c:	2300      	movs	r3, #0
 800b00e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b012:	e7a7      	b.n	800af64 <_printf_i+0x118>
 800b014:	6923      	ldr	r3, [r4, #16]
 800b016:	462a      	mov	r2, r5
 800b018:	4639      	mov	r1, r7
 800b01a:	4630      	mov	r0, r6
 800b01c:	47c0      	blx	r8
 800b01e:	3001      	adds	r0, #1
 800b020:	d0aa      	beq.n	800af78 <_printf_i+0x12c>
 800b022:	6823      	ldr	r3, [r4, #0]
 800b024:	079b      	lsls	r3, r3, #30
 800b026:	d413      	bmi.n	800b050 <_printf_i+0x204>
 800b028:	68e0      	ldr	r0, [r4, #12]
 800b02a:	9b03      	ldr	r3, [sp, #12]
 800b02c:	4298      	cmp	r0, r3
 800b02e:	bfb8      	it	lt
 800b030:	4618      	movlt	r0, r3
 800b032:	e7a3      	b.n	800af7c <_printf_i+0x130>
 800b034:	2301      	movs	r3, #1
 800b036:	464a      	mov	r2, r9
 800b038:	4639      	mov	r1, r7
 800b03a:	4630      	mov	r0, r6
 800b03c:	47c0      	blx	r8
 800b03e:	3001      	adds	r0, #1
 800b040:	d09a      	beq.n	800af78 <_printf_i+0x12c>
 800b042:	3501      	adds	r5, #1
 800b044:	68e3      	ldr	r3, [r4, #12]
 800b046:	9a03      	ldr	r2, [sp, #12]
 800b048:	1a9b      	subs	r3, r3, r2
 800b04a:	42ab      	cmp	r3, r5
 800b04c:	dcf2      	bgt.n	800b034 <_printf_i+0x1e8>
 800b04e:	e7eb      	b.n	800b028 <_printf_i+0x1dc>
 800b050:	2500      	movs	r5, #0
 800b052:	f104 0919 	add.w	r9, r4, #25
 800b056:	e7f5      	b.n	800b044 <_printf_i+0x1f8>
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1ac      	bne.n	800afb6 <_printf_i+0x16a>
 800b05c:	7803      	ldrb	r3, [r0, #0]
 800b05e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b062:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b066:	e76c      	b.n	800af42 <_printf_i+0xf6>
 800b068:	0800d2f1 	.word	0x0800d2f1
 800b06c:	0800d302 	.word	0x0800d302

0800b070 <_sbrk_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	4c06      	ldr	r4, [pc, #24]	; (800b08c <_sbrk_r+0x1c>)
 800b074:	2300      	movs	r3, #0
 800b076:	4605      	mov	r5, r0
 800b078:	4608      	mov	r0, r1
 800b07a:	6023      	str	r3, [r4, #0]
 800b07c:	f7fb f9be 	bl	80063fc <_sbrk>
 800b080:	1c43      	adds	r3, r0, #1
 800b082:	d102      	bne.n	800b08a <_sbrk_r+0x1a>
 800b084:	6823      	ldr	r3, [r4, #0]
 800b086:	b103      	cbz	r3, 800b08a <_sbrk_r+0x1a>
 800b088:	602b      	str	r3, [r5, #0]
 800b08a:	bd38      	pop	{r3, r4, r5, pc}
 800b08c:	200017f4 	.word	0x200017f4

0800b090 <_raise_r>:
 800b090:	291f      	cmp	r1, #31
 800b092:	b538      	push	{r3, r4, r5, lr}
 800b094:	4604      	mov	r4, r0
 800b096:	460d      	mov	r5, r1
 800b098:	d904      	bls.n	800b0a4 <_raise_r+0x14>
 800b09a:	2316      	movs	r3, #22
 800b09c:	6003      	str	r3, [r0, #0]
 800b09e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0a2:	bd38      	pop	{r3, r4, r5, pc}
 800b0a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0a6:	b112      	cbz	r2, 800b0ae <_raise_r+0x1e>
 800b0a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0ac:	b94b      	cbnz	r3, 800b0c2 <_raise_r+0x32>
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f000 f830 	bl	800b114 <_getpid_r>
 800b0b4:	462a      	mov	r2, r5
 800b0b6:	4601      	mov	r1, r0
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0be:	f000 b817 	b.w	800b0f0 <_kill_r>
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d00a      	beq.n	800b0dc <_raise_r+0x4c>
 800b0c6:	1c59      	adds	r1, r3, #1
 800b0c8:	d103      	bne.n	800b0d2 <_raise_r+0x42>
 800b0ca:	2316      	movs	r3, #22
 800b0cc:	6003      	str	r3, [r0, #0]
 800b0ce:	2001      	movs	r0, #1
 800b0d0:	e7e7      	b.n	800b0a2 <_raise_r+0x12>
 800b0d2:	2400      	movs	r4, #0
 800b0d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b0d8:	4628      	mov	r0, r5
 800b0da:	4798      	blx	r3
 800b0dc:	2000      	movs	r0, #0
 800b0de:	e7e0      	b.n	800b0a2 <_raise_r+0x12>

0800b0e0 <raise>:
 800b0e0:	4b02      	ldr	r3, [pc, #8]	; (800b0ec <raise+0xc>)
 800b0e2:	4601      	mov	r1, r0
 800b0e4:	6818      	ldr	r0, [r3, #0]
 800b0e6:	f7ff bfd3 	b.w	800b090 <_raise_r>
 800b0ea:	bf00      	nop
 800b0ec:	200000f8 	.word	0x200000f8

0800b0f0 <_kill_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	4c07      	ldr	r4, [pc, #28]	; (800b110 <_kill_r+0x20>)
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	4605      	mov	r5, r0
 800b0f8:	4608      	mov	r0, r1
 800b0fa:	4611      	mov	r1, r2
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	f7fb f8f5 	bl	80062ec <_kill>
 800b102:	1c43      	adds	r3, r0, #1
 800b104:	d102      	bne.n	800b10c <_kill_r+0x1c>
 800b106:	6823      	ldr	r3, [r4, #0]
 800b108:	b103      	cbz	r3, 800b10c <_kill_r+0x1c>
 800b10a:	602b      	str	r3, [r5, #0]
 800b10c:	bd38      	pop	{r3, r4, r5, pc}
 800b10e:	bf00      	nop
 800b110:	200017f4 	.word	0x200017f4

0800b114 <_getpid_r>:
 800b114:	f7fb b8e2 	b.w	80062dc <_getpid>

0800b118 <_vsniprintf_r>:
 800b118:	b530      	push	{r4, r5, lr}
 800b11a:	1e14      	subs	r4, r2, #0
 800b11c:	4605      	mov	r5, r0
 800b11e:	b09b      	sub	sp, #108	; 0x6c
 800b120:	4618      	mov	r0, r3
 800b122:	da05      	bge.n	800b130 <_vsniprintf_r+0x18>
 800b124:	238b      	movs	r3, #139	; 0x8b
 800b126:	602b      	str	r3, [r5, #0]
 800b128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b12c:	b01b      	add	sp, #108	; 0x6c
 800b12e:	bd30      	pop	{r4, r5, pc}
 800b130:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b134:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b138:	bf14      	ite	ne
 800b13a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b13e:	4623      	moveq	r3, r4
 800b140:	9302      	str	r3, [sp, #8]
 800b142:	9305      	str	r3, [sp, #20]
 800b144:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b148:	9100      	str	r1, [sp, #0]
 800b14a:	9104      	str	r1, [sp, #16]
 800b14c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b150:	4602      	mov	r2, r0
 800b152:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b154:	4669      	mov	r1, sp
 800b156:	4628      	mov	r0, r5
 800b158:	f000 fb38 	bl	800b7cc <_svfiprintf_r>
 800b15c:	1c43      	adds	r3, r0, #1
 800b15e:	bfbc      	itt	lt
 800b160:	238b      	movlt	r3, #139	; 0x8b
 800b162:	602b      	strlt	r3, [r5, #0]
 800b164:	2c00      	cmp	r4, #0
 800b166:	d0e1      	beq.n	800b12c <_vsniprintf_r+0x14>
 800b168:	9b00      	ldr	r3, [sp, #0]
 800b16a:	2200      	movs	r2, #0
 800b16c:	701a      	strb	r2, [r3, #0]
 800b16e:	e7dd      	b.n	800b12c <_vsniprintf_r+0x14>

0800b170 <vsniprintf>:
 800b170:	b507      	push	{r0, r1, r2, lr}
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	4613      	mov	r3, r2
 800b176:	460a      	mov	r2, r1
 800b178:	4601      	mov	r1, r0
 800b17a:	4803      	ldr	r0, [pc, #12]	; (800b188 <vsniprintf+0x18>)
 800b17c:	6800      	ldr	r0, [r0, #0]
 800b17e:	f7ff ffcb 	bl	800b118 <_vsniprintf_r>
 800b182:	b003      	add	sp, #12
 800b184:	f85d fb04 	ldr.w	pc, [sp], #4
 800b188:	200000f8 	.word	0x200000f8

0800b18c <__swbuf_r>:
 800b18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b18e:	460e      	mov	r6, r1
 800b190:	4614      	mov	r4, r2
 800b192:	4605      	mov	r5, r0
 800b194:	b118      	cbz	r0, 800b19e <__swbuf_r+0x12>
 800b196:	6983      	ldr	r3, [r0, #24]
 800b198:	b90b      	cbnz	r3, 800b19e <__swbuf_r+0x12>
 800b19a:	f000 f9a7 	bl	800b4ec <__sinit>
 800b19e:	4b21      	ldr	r3, [pc, #132]	; (800b224 <__swbuf_r+0x98>)
 800b1a0:	429c      	cmp	r4, r3
 800b1a2:	d12a      	bne.n	800b1fa <__swbuf_r+0x6e>
 800b1a4:	686c      	ldr	r4, [r5, #4]
 800b1a6:	69a3      	ldr	r3, [r4, #24]
 800b1a8:	60a3      	str	r3, [r4, #8]
 800b1aa:	89a3      	ldrh	r3, [r4, #12]
 800b1ac:	071a      	lsls	r2, r3, #28
 800b1ae:	d52e      	bpl.n	800b20e <__swbuf_r+0x82>
 800b1b0:	6923      	ldr	r3, [r4, #16]
 800b1b2:	b363      	cbz	r3, 800b20e <__swbuf_r+0x82>
 800b1b4:	6923      	ldr	r3, [r4, #16]
 800b1b6:	6820      	ldr	r0, [r4, #0]
 800b1b8:	1ac0      	subs	r0, r0, r3
 800b1ba:	6963      	ldr	r3, [r4, #20]
 800b1bc:	b2f6      	uxtb	r6, r6
 800b1be:	4283      	cmp	r3, r0
 800b1c0:	4637      	mov	r7, r6
 800b1c2:	dc04      	bgt.n	800b1ce <__swbuf_r+0x42>
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	f000 f926 	bl	800b418 <_fflush_r>
 800b1cc:	bb28      	cbnz	r0, 800b21a <__swbuf_r+0x8e>
 800b1ce:	68a3      	ldr	r3, [r4, #8]
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	60a3      	str	r3, [r4, #8]
 800b1d4:	6823      	ldr	r3, [r4, #0]
 800b1d6:	1c5a      	adds	r2, r3, #1
 800b1d8:	6022      	str	r2, [r4, #0]
 800b1da:	701e      	strb	r6, [r3, #0]
 800b1dc:	6963      	ldr	r3, [r4, #20]
 800b1de:	3001      	adds	r0, #1
 800b1e0:	4283      	cmp	r3, r0
 800b1e2:	d004      	beq.n	800b1ee <__swbuf_r+0x62>
 800b1e4:	89a3      	ldrh	r3, [r4, #12]
 800b1e6:	07db      	lsls	r3, r3, #31
 800b1e8:	d519      	bpl.n	800b21e <__swbuf_r+0x92>
 800b1ea:	2e0a      	cmp	r6, #10
 800b1ec:	d117      	bne.n	800b21e <__swbuf_r+0x92>
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	f000 f911 	bl	800b418 <_fflush_r>
 800b1f6:	b190      	cbz	r0, 800b21e <__swbuf_r+0x92>
 800b1f8:	e00f      	b.n	800b21a <__swbuf_r+0x8e>
 800b1fa:	4b0b      	ldr	r3, [pc, #44]	; (800b228 <__swbuf_r+0x9c>)
 800b1fc:	429c      	cmp	r4, r3
 800b1fe:	d101      	bne.n	800b204 <__swbuf_r+0x78>
 800b200:	68ac      	ldr	r4, [r5, #8]
 800b202:	e7d0      	b.n	800b1a6 <__swbuf_r+0x1a>
 800b204:	4b09      	ldr	r3, [pc, #36]	; (800b22c <__swbuf_r+0xa0>)
 800b206:	429c      	cmp	r4, r3
 800b208:	bf08      	it	eq
 800b20a:	68ec      	ldreq	r4, [r5, #12]
 800b20c:	e7cb      	b.n	800b1a6 <__swbuf_r+0x1a>
 800b20e:	4621      	mov	r1, r4
 800b210:	4628      	mov	r0, r5
 800b212:	f000 f80d 	bl	800b230 <__swsetup_r>
 800b216:	2800      	cmp	r0, #0
 800b218:	d0cc      	beq.n	800b1b4 <__swbuf_r+0x28>
 800b21a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b21e:	4638      	mov	r0, r7
 800b220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b222:	bf00      	nop
 800b224:	0800d334 	.word	0x0800d334
 800b228:	0800d354 	.word	0x0800d354
 800b22c:	0800d314 	.word	0x0800d314

0800b230 <__swsetup_r>:
 800b230:	4b32      	ldr	r3, [pc, #200]	; (800b2fc <__swsetup_r+0xcc>)
 800b232:	b570      	push	{r4, r5, r6, lr}
 800b234:	681d      	ldr	r5, [r3, #0]
 800b236:	4606      	mov	r6, r0
 800b238:	460c      	mov	r4, r1
 800b23a:	b125      	cbz	r5, 800b246 <__swsetup_r+0x16>
 800b23c:	69ab      	ldr	r3, [r5, #24]
 800b23e:	b913      	cbnz	r3, 800b246 <__swsetup_r+0x16>
 800b240:	4628      	mov	r0, r5
 800b242:	f000 f953 	bl	800b4ec <__sinit>
 800b246:	4b2e      	ldr	r3, [pc, #184]	; (800b300 <__swsetup_r+0xd0>)
 800b248:	429c      	cmp	r4, r3
 800b24a:	d10f      	bne.n	800b26c <__swsetup_r+0x3c>
 800b24c:	686c      	ldr	r4, [r5, #4]
 800b24e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b252:	b29a      	uxth	r2, r3
 800b254:	0715      	lsls	r5, r2, #28
 800b256:	d42c      	bmi.n	800b2b2 <__swsetup_r+0x82>
 800b258:	06d0      	lsls	r0, r2, #27
 800b25a:	d411      	bmi.n	800b280 <__swsetup_r+0x50>
 800b25c:	2209      	movs	r2, #9
 800b25e:	6032      	str	r2, [r6, #0]
 800b260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b264:	81a3      	strh	r3, [r4, #12]
 800b266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b26a:	e03e      	b.n	800b2ea <__swsetup_r+0xba>
 800b26c:	4b25      	ldr	r3, [pc, #148]	; (800b304 <__swsetup_r+0xd4>)
 800b26e:	429c      	cmp	r4, r3
 800b270:	d101      	bne.n	800b276 <__swsetup_r+0x46>
 800b272:	68ac      	ldr	r4, [r5, #8]
 800b274:	e7eb      	b.n	800b24e <__swsetup_r+0x1e>
 800b276:	4b24      	ldr	r3, [pc, #144]	; (800b308 <__swsetup_r+0xd8>)
 800b278:	429c      	cmp	r4, r3
 800b27a:	bf08      	it	eq
 800b27c:	68ec      	ldreq	r4, [r5, #12]
 800b27e:	e7e6      	b.n	800b24e <__swsetup_r+0x1e>
 800b280:	0751      	lsls	r1, r2, #29
 800b282:	d512      	bpl.n	800b2aa <__swsetup_r+0x7a>
 800b284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b286:	b141      	cbz	r1, 800b29a <__swsetup_r+0x6a>
 800b288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b28c:	4299      	cmp	r1, r3
 800b28e:	d002      	beq.n	800b296 <__swsetup_r+0x66>
 800b290:	4630      	mov	r0, r6
 800b292:	f7ff fb7d 	bl	800a990 <_free_r>
 800b296:	2300      	movs	r3, #0
 800b298:	6363      	str	r3, [r4, #52]	; 0x34
 800b29a:	89a3      	ldrh	r3, [r4, #12]
 800b29c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b2a0:	81a3      	strh	r3, [r4, #12]
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	6063      	str	r3, [r4, #4]
 800b2a6:	6923      	ldr	r3, [r4, #16]
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	89a3      	ldrh	r3, [r4, #12]
 800b2ac:	f043 0308 	orr.w	r3, r3, #8
 800b2b0:	81a3      	strh	r3, [r4, #12]
 800b2b2:	6923      	ldr	r3, [r4, #16]
 800b2b4:	b94b      	cbnz	r3, 800b2ca <__swsetup_r+0x9a>
 800b2b6:	89a3      	ldrh	r3, [r4, #12]
 800b2b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b2bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2c0:	d003      	beq.n	800b2ca <__swsetup_r+0x9a>
 800b2c2:	4621      	mov	r1, r4
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	f000 f9bf 	bl	800b648 <__smakebuf_r>
 800b2ca:	89a2      	ldrh	r2, [r4, #12]
 800b2cc:	f012 0301 	ands.w	r3, r2, #1
 800b2d0:	d00c      	beq.n	800b2ec <__swsetup_r+0xbc>
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	60a3      	str	r3, [r4, #8]
 800b2d6:	6963      	ldr	r3, [r4, #20]
 800b2d8:	425b      	negs	r3, r3
 800b2da:	61a3      	str	r3, [r4, #24]
 800b2dc:	6923      	ldr	r3, [r4, #16]
 800b2de:	b953      	cbnz	r3, 800b2f6 <__swsetup_r+0xc6>
 800b2e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b2e8:	d1ba      	bne.n	800b260 <__swsetup_r+0x30>
 800b2ea:	bd70      	pop	{r4, r5, r6, pc}
 800b2ec:	0792      	lsls	r2, r2, #30
 800b2ee:	bf58      	it	pl
 800b2f0:	6963      	ldrpl	r3, [r4, #20]
 800b2f2:	60a3      	str	r3, [r4, #8]
 800b2f4:	e7f2      	b.n	800b2dc <__swsetup_r+0xac>
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	e7f7      	b.n	800b2ea <__swsetup_r+0xba>
 800b2fa:	bf00      	nop
 800b2fc:	200000f8 	.word	0x200000f8
 800b300:	0800d334 	.word	0x0800d334
 800b304:	0800d354 	.word	0x0800d354
 800b308:	0800d314 	.word	0x0800d314

0800b30c <__sflush_r>:
 800b30c:	898a      	ldrh	r2, [r1, #12]
 800b30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b312:	4605      	mov	r5, r0
 800b314:	0710      	lsls	r0, r2, #28
 800b316:	460c      	mov	r4, r1
 800b318:	d458      	bmi.n	800b3cc <__sflush_r+0xc0>
 800b31a:	684b      	ldr	r3, [r1, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	dc05      	bgt.n	800b32c <__sflush_r+0x20>
 800b320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b322:	2b00      	cmp	r3, #0
 800b324:	dc02      	bgt.n	800b32c <__sflush_r+0x20>
 800b326:	2000      	movs	r0, #0
 800b328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b32c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b32e:	2e00      	cmp	r6, #0
 800b330:	d0f9      	beq.n	800b326 <__sflush_r+0x1a>
 800b332:	2300      	movs	r3, #0
 800b334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b338:	682f      	ldr	r7, [r5, #0]
 800b33a:	6a21      	ldr	r1, [r4, #32]
 800b33c:	602b      	str	r3, [r5, #0]
 800b33e:	d032      	beq.n	800b3a6 <__sflush_r+0x9a>
 800b340:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b342:	89a3      	ldrh	r3, [r4, #12]
 800b344:	075a      	lsls	r2, r3, #29
 800b346:	d505      	bpl.n	800b354 <__sflush_r+0x48>
 800b348:	6863      	ldr	r3, [r4, #4]
 800b34a:	1ac0      	subs	r0, r0, r3
 800b34c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b34e:	b10b      	cbz	r3, 800b354 <__sflush_r+0x48>
 800b350:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b352:	1ac0      	subs	r0, r0, r3
 800b354:	2300      	movs	r3, #0
 800b356:	4602      	mov	r2, r0
 800b358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b35a:	6a21      	ldr	r1, [r4, #32]
 800b35c:	4628      	mov	r0, r5
 800b35e:	47b0      	blx	r6
 800b360:	1c43      	adds	r3, r0, #1
 800b362:	89a3      	ldrh	r3, [r4, #12]
 800b364:	d106      	bne.n	800b374 <__sflush_r+0x68>
 800b366:	6829      	ldr	r1, [r5, #0]
 800b368:	291d      	cmp	r1, #29
 800b36a:	d848      	bhi.n	800b3fe <__sflush_r+0xf2>
 800b36c:	4a29      	ldr	r2, [pc, #164]	; (800b414 <__sflush_r+0x108>)
 800b36e:	40ca      	lsrs	r2, r1
 800b370:	07d6      	lsls	r6, r2, #31
 800b372:	d544      	bpl.n	800b3fe <__sflush_r+0xf2>
 800b374:	2200      	movs	r2, #0
 800b376:	6062      	str	r2, [r4, #4]
 800b378:	04d9      	lsls	r1, r3, #19
 800b37a:	6922      	ldr	r2, [r4, #16]
 800b37c:	6022      	str	r2, [r4, #0]
 800b37e:	d504      	bpl.n	800b38a <__sflush_r+0x7e>
 800b380:	1c42      	adds	r2, r0, #1
 800b382:	d101      	bne.n	800b388 <__sflush_r+0x7c>
 800b384:	682b      	ldr	r3, [r5, #0]
 800b386:	b903      	cbnz	r3, 800b38a <__sflush_r+0x7e>
 800b388:	6560      	str	r0, [r4, #84]	; 0x54
 800b38a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b38c:	602f      	str	r7, [r5, #0]
 800b38e:	2900      	cmp	r1, #0
 800b390:	d0c9      	beq.n	800b326 <__sflush_r+0x1a>
 800b392:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b396:	4299      	cmp	r1, r3
 800b398:	d002      	beq.n	800b3a0 <__sflush_r+0x94>
 800b39a:	4628      	mov	r0, r5
 800b39c:	f7ff faf8 	bl	800a990 <_free_r>
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	6360      	str	r0, [r4, #52]	; 0x34
 800b3a4:	e7c0      	b.n	800b328 <__sflush_r+0x1c>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	47b0      	blx	r6
 800b3ac:	1c41      	adds	r1, r0, #1
 800b3ae:	d1c8      	bne.n	800b342 <__sflush_r+0x36>
 800b3b0:	682b      	ldr	r3, [r5, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d0c5      	beq.n	800b342 <__sflush_r+0x36>
 800b3b6:	2b1d      	cmp	r3, #29
 800b3b8:	d001      	beq.n	800b3be <__sflush_r+0xb2>
 800b3ba:	2b16      	cmp	r3, #22
 800b3bc:	d101      	bne.n	800b3c2 <__sflush_r+0xb6>
 800b3be:	602f      	str	r7, [r5, #0]
 800b3c0:	e7b1      	b.n	800b326 <__sflush_r+0x1a>
 800b3c2:	89a3      	ldrh	r3, [r4, #12]
 800b3c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3c8:	81a3      	strh	r3, [r4, #12]
 800b3ca:	e7ad      	b.n	800b328 <__sflush_r+0x1c>
 800b3cc:	690f      	ldr	r7, [r1, #16]
 800b3ce:	2f00      	cmp	r7, #0
 800b3d0:	d0a9      	beq.n	800b326 <__sflush_r+0x1a>
 800b3d2:	0793      	lsls	r3, r2, #30
 800b3d4:	680e      	ldr	r6, [r1, #0]
 800b3d6:	bf08      	it	eq
 800b3d8:	694b      	ldreq	r3, [r1, #20]
 800b3da:	600f      	str	r7, [r1, #0]
 800b3dc:	bf18      	it	ne
 800b3de:	2300      	movne	r3, #0
 800b3e0:	eba6 0807 	sub.w	r8, r6, r7
 800b3e4:	608b      	str	r3, [r1, #8]
 800b3e6:	f1b8 0f00 	cmp.w	r8, #0
 800b3ea:	dd9c      	ble.n	800b326 <__sflush_r+0x1a>
 800b3ec:	4643      	mov	r3, r8
 800b3ee:	463a      	mov	r2, r7
 800b3f0:	6a21      	ldr	r1, [r4, #32]
 800b3f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	47b0      	blx	r6
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	dc06      	bgt.n	800b40a <__sflush_r+0xfe>
 800b3fc:	89a3      	ldrh	r3, [r4, #12]
 800b3fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b402:	81a3      	strh	r3, [r4, #12]
 800b404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b408:	e78e      	b.n	800b328 <__sflush_r+0x1c>
 800b40a:	4407      	add	r7, r0
 800b40c:	eba8 0800 	sub.w	r8, r8, r0
 800b410:	e7e9      	b.n	800b3e6 <__sflush_r+0xda>
 800b412:	bf00      	nop
 800b414:	20400001 	.word	0x20400001

0800b418 <_fflush_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	690b      	ldr	r3, [r1, #16]
 800b41c:	4605      	mov	r5, r0
 800b41e:	460c      	mov	r4, r1
 800b420:	b1db      	cbz	r3, 800b45a <_fflush_r+0x42>
 800b422:	b118      	cbz	r0, 800b42c <_fflush_r+0x14>
 800b424:	6983      	ldr	r3, [r0, #24]
 800b426:	b90b      	cbnz	r3, 800b42c <_fflush_r+0x14>
 800b428:	f000 f860 	bl	800b4ec <__sinit>
 800b42c:	4b0c      	ldr	r3, [pc, #48]	; (800b460 <_fflush_r+0x48>)
 800b42e:	429c      	cmp	r4, r3
 800b430:	d109      	bne.n	800b446 <_fflush_r+0x2e>
 800b432:	686c      	ldr	r4, [r5, #4]
 800b434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b438:	b17b      	cbz	r3, 800b45a <_fflush_r+0x42>
 800b43a:	4621      	mov	r1, r4
 800b43c:	4628      	mov	r0, r5
 800b43e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b442:	f7ff bf63 	b.w	800b30c <__sflush_r>
 800b446:	4b07      	ldr	r3, [pc, #28]	; (800b464 <_fflush_r+0x4c>)
 800b448:	429c      	cmp	r4, r3
 800b44a:	d101      	bne.n	800b450 <_fflush_r+0x38>
 800b44c:	68ac      	ldr	r4, [r5, #8]
 800b44e:	e7f1      	b.n	800b434 <_fflush_r+0x1c>
 800b450:	4b05      	ldr	r3, [pc, #20]	; (800b468 <_fflush_r+0x50>)
 800b452:	429c      	cmp	r4, r3
 800b454:	bf08      	it	eq
 800b456:	68ec      	ldreq	r4, [r5, #12]
 800b458:	e7ec      	b.n	800b434 <_fflush_r+0x1c>
 800b45a:	2000      	movs	r0, #0
 800b45c:	bd38      	pop	{r3, r4, r5, pc}
 800b45e:	bf00      	nop
 800b460:	0800d334 	.word	0x0800d334
 800b464:	0800d354 	.word	0x0800d354
 800b468:	0800d314 	.word	0x0800d314

0800b46c <std>:
 800b46c:	2300      	movs	r3, #0
 800b46e:	b510      	push	{r4, lr}
 800b470:	4604      	mov	r4, r0
 800b472:	e9c0 3300 	strd	r3, r3, [r0]
 800b476:	6083      	str	r3, [r0, #8]
 800b478:	8181      	strh	r1, [r0, #12]
 800b47a:	6643      	str	r3, [r0, #100]	; 0x64
 800b47c:	81c2      	strh	r2, [r0, #14]
 800b47e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b482:	6183      	str	r3, [r0, #24]
 800b484:	4619      	mov	r1, r3
 800b486:	2208      	movs	r2, #8
 800b488:	305c      	adds	r0, #92	; 0x5c
 800b48a:	f7ff fa79 	bl	800a980 <memset>
 800b48e:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <std+0x38>)
 800b490:	6263      	str	r3, [r4, #36]	; 0x24
 800b492:	4b05      	ldr	r3, [pc, #20]	; (800b4a8 <std+0x3c>)
 800b494:	62a3      	str	r3, [r4, #40]	; 0x28
 800b496:	4b05      	ldr	r3, [pc, #20]	; (800b4ac <std+0x40>)
 800b498:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b49a:	4b05      	ldr	r3, [pc, #20]	; (800b4b0 <std+0x44>)
 800b49c:	6224      	str	r4, [r4, #32]
 800b49e:	6323      	str	r3, [r4, #48]	; 0x30
 800b4a0:	bd10      	pop	{r4, pc}
 800b4a2:	bf00      	nop
 800b4a4:	0800b9bd 	.word	0x0800b9bd
 800b4a8:	0800b9df 	.word	0x0800b9df
 800b4ac:	0800ba17 	.word	0x0800ba17
 800b4b0:	0800ba3b 	.word	0x0800ba3b

0800b4b4 <_cleanup_r>:
 800b4b4:	4901      	ldr	r1, [pc, #4]	; (800b4bc <_cleanup_r+0x8>)
 800b4b6:	f000 b885 	b.w	800b5c4 <_fwalk_reent>
 800b4ba:	bf00      	nop
 800b4bc:	0800b419 	.word	0x0800b419

0800b4c0 <__sfmoreglue>:
 800b4c0:	b570      	push	{r4, r5, r6, lr}
 800b4c2:	1e4a      	subs	r2, r1, #1
 800b4c4:	2568      	movs	r5, #104	; 0x68
 800b4c6:	4355      	muls	r5, r2
 800b4c8:	460e      	mov	r6, r1
 800b4ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4ce:	f7ff faad 	bl	800aa2c <_malloc_r>
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	b140      	cbz	r0, 800b4e8 <__sfmoreglue+0x28>
 800b4d6:	2100      	movs	r1, #0
 800b4d8:	e9c0 1600 	strd	r1, r6, [r0]
 800b4dc:	300c      	adds	r0, #12
 800b4de:	60a0      	str	r0, [r4, #8]
 800b4e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4e4:	f7ff fa4c 	bl	800a980 <memset>
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	bd70      	pop	{r4, r5, r6, pc}

0800b4ec <__sinit>:
 800b4ec:	6983      	ldr	r3, [r0, #24]
 800b4ee:	b510      	push	{r4, lr}
 800b4f0:	4604      	mov	r4, r0
 800b4f2:	bb33      	cbnz	r3, 800b542 <__sinit+0x56>
 800b4f4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b4f8:	6503      	str	r3, [r0, #80]	; 0x50
 800b4fa:	4b12      	ldr	r3, [pc, #72]	; (800b544 <__sinit+0x58>)
 800b4fc:	4a12      	ldr	r2, [pc, #72]	; (800b548 <__sinit+0x5c>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	6282      	str	r2, [r0, #40]	; 0x28
 800b502:	4298      	cmp	r0, r3
 800b504:	bf04      	itt	eq
 800b506:	2301      	moveq	r3, #1
 800b508:	6183      	streq	r3, [r0, #24]
 800b50a:	f000 f81f 	bl	800b54c <__sfp>
 800b50e:	6060      	str	r0, [r4, #4]
 800b510:	4620      	mov	r0, r4
 800b512:	f000 f81b 	bl	800b54c <__sfp>
 800b516:	60a0      	str	r0, [r4, #8]
 800b518:	4620      	mov	r0, r4
 800b51a:	f000 f817 	bl	800b54c <__sfp>
 800b51e:	2200      	movs	r2, #0
 800b520:	60e0      	str	r0, [r4, #12]
 800b522:	2104      	movs	r1, #4
 800b524:	6860      	ldr	r0, [r4, #4]
 800b526:	f7ff ffa1 	bl	800b46c <std>
 800b52a:	2201      	movs	r2, #1
 800b52c:	2109      	movs	r1, #9
 800b52e:	68a0      	ldr	r0, [r4, #8]
 800b530:	f7ff ff9c 	bl	800b46c <std>
 800b534:	2202      	movs	r2, #2
 800b536:	2112      	movs	r1, #18
 800b538:	68e0      	ldr	r0, [r4, #12]
 800b53a:	f7ff ff97 	bl	800b46c <std>
 800b53e:	2301      	movs	r3, #1
 800b540:	61a3      	str	r3, [r4, #24]
 800b542:	bd10      	pop	{r4, pc}
 800b544:	0800d2dc 	.word	0x0800d2dc
 800b548:	0800b4b5 	.word	0x0800b4b5

0800b54c <__sfp>:
 800b54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b54e:	4b1b      	ldr	r3, [pc, #108]	; (800b5bc <__sfp+0x70>)
 800b550:	681e      	ldr	r6, [r3, #0]
 800b552:	69b3      	ldr	r3, [r6, #24]
 800b554:	4607      	mov	r7, r0
 800b556:	b913      	cbnz	r3, 800b55e <__sfp+0x12>
 800b558:	4630      	mov	r0, r6
 800b55a:	f7ff ffc7 	bl	800b4ec <__sinit>
 800b55e:	3648      	adds	r6, #72	; 0x48
 800b560:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b564:	3b01      	subs	r3, #1
 800b566:	d503      	bpl.n	800b570 <__sfp+0x24>
 800b568:	6833      	ldr	r3, [r6, #0]
 800b56a:	b133      	cbz	r3, 800b57a <__sfp+0x2e>
 800b56c:	6836      	ldr	r6, [r6, #0]
 800b56e:	e7f7      	b.n	800b560 <__sfp+0x14>
 800b570:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b574:	b16d      	cbz	r5, 800b592 <__sfp+0x46>
 800b576:	3468      	adds	r4, #104	; 0x68
 800b578:	e7f4      	b.n	800b564 <__sfp+0x18>
 800b57a:	2104      	movs	r1, #4
 800b57c:	4638      	mov	r0, r7
 800b57e:	f7ff ff9f 	bl	800b4c0 <__sfmoreglue>
 800b582:	6030      	str	r0, [r6, #0]
 800b584:	2800      	cmp	r0, #0
 800b586:	d1f1      	bne.n	800b56c <__sfp+0x20>
 800b588:	230c      	movs	r3, #12
 800b58a:	603b      	str	r3, [r7, #0]
 800b58c:	4604      	mov	r4, r0
 800b58e:	4620      	mov	r0, r4
 800b590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b592:	4b0b      	ldr	r3, [pc, #44]	; (800b5c0 <__sfp+0x74>)
 800b594:	6665      	str	r5, [r4, #100]	; 0x64
 800b596:	e9c4 5500 	strd	r5, r5, [r4]
 800b59a:	60a5      	str	r5, [r4, #8]
 800b59c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b5a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b5a4:	2208      	movs	r2, #8
 800b5a6:	4629      	mov	r1, r5
 800b5a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5ac:	f7ff f9e8 	bl	800a980 <memset>
 800b5b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b5b8:	e7e9      	b.n	800b58e <__sfp+0x42>
 800b5ba:	bf00      	nop
 800b5bc:	0800d2dc 	.word	0x0800d2dc
 800b5c0:	ffff0001 	.word	0xffff0001

0800b5c4 <_fwalk_reent>:
 800b5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5c8:	4680      	mov	r8, r0
 800b5ca:	4689      	mov	r9, r1
 800b5cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b5d0:	2600      	movs	r6, #0
 800b5d2:	b914      	cbnz	r4, 800b5da <_fwalk_reent+0x16>
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5da:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b5de:	3f01      	subs	r7, #1
 800b5e0:	d501      	bpl.n	800b5e6 <_fwalk_reent+0x22>
 800b5e2:	6824      	ldr	r4, [r4, #0]
 800b5e4:	e7f5      	b.n	800b5d2 <_fwalk_reent+0xe>
 800b5e6:	89ab      	ldrh	r3, [r5, #12]
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d907      	bls.n	800b5fc <_fwalk_reent+0x38>
 800b5ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	d003      	beq.n	800b5fc <_fwalk_reent+0x38>
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	4640      	mov	r0, r8
 800b5f8:	47c8      	blx	r9
 800b5fa:	4306      	orrs	r6, r0
 800b5fc:	3568      	adds	r5, #104	; 0x68
 800b5fe:	e7ee      	b.n	800b5de <_fwalk_reent+0x1a>

0800b600 <__swhatbuf_r>:
 800b600:	b570      	push	{r4, r5, r6, lr}
 800b602:	460e      	mov	r6, r1
 800b604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b608:	2900      	cmp	r1, #0
 800b60a:	b096      	sub	sp, #88	; 0x58
 800b60c:	4614      	mov	r4, r2
 800b60e:	461d      	mov	r5, r3
 800b610:	da07      	bge.n	800b622 <__swhatbuf_r+0x22>
 800b612:	2300      	movs	r3, #0
 800b614:	602b      	str	r3, [r5, #0]
 800b616:	89b3      	ldrh	r3, [r6, #12]
 800b618:	061a      	lsls	r2, r3, #24
 800b61a:	d410      	bmi.n	800b63e <__swhatbuf_r+0x3e>
 800b61c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b620:	e00e      	b.n	800b640 <__swhatbuf_r+0x40>
 800b622:	466a      	mov	r2, sp
 800b624:	f000 fa30 	bl	800ba88 <_fstat_r>
 800b628:	2800      	cmp	r0, #0
 800b62a:	dbf2      	blt.n	800b612 <__swhatbuf_r+0x12>
 800b62c:	9a01      	ldr	r2, [sp, #4]
 800b62e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b632:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b636:	425a      	negs	r2, r3
 800b638:	415a      	adcs	r2, r3
 800b63a:	602a      	str	r2, [r5, #0]
 800b63c:	e7ee      	b.n	800b61c <__swhatbuf_r+0x1c>
 800b63e:	2340      	movs	r3, #64	; 0x40
 800b640:	2000      	movs	r0, #0
 800b642:	6023      	str	r3, [r4, #0]
 800b644:	b016      	add	sp, #88	; 0x58
 800b646:	bd70      	pop	{r4, r5, r6, pc}

0800b648 <__smakebuf_r>:
 800b648:	898b      	ldrh	r3, [r1, #12]
 800b64a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b64c:	079d      	lsls	r5, r3, #30
 800b64e:	4606      	mov	r6, r0
 800b650:	460c      	mov	r4, r1
 800b652:	d507      	bpl.n	800b664 <__smakebuf_r+0x1c>
 800b654:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b658:	6023      	str	r3, [r4, #0]
 800b65a:	6123      	str	r3, [r4, #16]
 800b65c:	2301      	movs	r3, #1
 800b65e:	6163      	str	r3, [r4, #20]
 800b660:	b002      	add	sp, #8
 800b662:	bd70      	pop	{r4, r5, r6, pc}
 800b664:	ab01      	add	r3, sp, #4
 800b666:	466a      	mov	r2, sp
 800b668:	f7ff ffca 	bl	800b600 <__swhatbuf_r>
 800b66c:	9900      	ldr	r1, [sp, #0]
 800b66e:	4605      	mov	r5, r0
 800b670:	4630      	mov	r0, r6
 800b672:	f7ff f9db 	bl	800aa2c <_malloc_r>
 800b676:	b948      	cbnz	r0, 800b68c <__smakebuf_r+0x44>
 800b678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b67c:	059a      	lsls	r2, r3, #22
 800b67e:	d4ef      	bmi.n	800b660 <__smakebuf_r+0x18>
 800b680:	f023 0303 	bic.w	r3, r3, #3
 800b684:	f043 0302 	orr.w	r3, r3, #2
 800b688:	81a3      	strh	r3, [r4, #12]
 800b68a:	e7e3      	b.n	800b654 <__smakebuf_r+0xc>
 800b68c:	4b0d      	ldr	r3, [pc, #52]	; (800b6c4 <__smakebuf_r+0x7c>)
 800b68e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b690:	89a3      	ldrh	r3, [r4, #12]
 800b692:	6020      	str	r0, [r4, #0]
 800b694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b698:	81a3      	strh	r3, [r4, #12]
 800b69a:	9b00      	ldr	r3, [sp, #0]
 800b69c:	6163      	str	r3, [r4, #20]
 800b69e:	9b01      	ldr	r3, [sp, #4]
 800b6a0:	6120      	str	r0, [r4, #16]
 800b6a2:	b15b      	cbz	r3, 800b6bc <__smakebuf_r+0x74>
 800b6a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f000 f9ff 	bl	800baac <_isatty_r>
 800b6ae:	b128      	cbz	r0, 800b6bc <__smakebuf_r+0x74>
 800b6b0:	89a3      	ldrh	r3, [r4, #12]
 800b6b2:	f023 0303 	bic.w	r3, r3, #3
 800b6b6:	f043 0301 	orr.w	r3, r3, #1
 800b6ba:	81a3      	strh	r3, [r4, #12]
 800b6bc:	89a3      	ldrh	r3, [r4, #12]
 800b6be:	431d      	orrs	r5, r3
 800b6c0:	81a5      	strh	r5, [r4, #12]
 800b6c2:	e7cd      	b.n	800b660 <__smakebuf_r+0x18>
 800b6c4:	0800b4b5 	.word	0x0800b4b5

0800b6c8 <__malloc_lock>:
 800b6c8:	4770      	bx	lr

0800b6ca <__malloc_unlock>:
 800b6ca:	4770      	bx	lr

0800b6cc <_realloc_r>:
 800b6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ce:	4607      	mov	r7, r0
 800b6d0:	4614      	mov	r4, r2
 800b6d2:	460e      	mov	r6, r1
 800b6d4:	b921      	cbnz	r1, 800b6e0 <_realloc_r+0x14>
 800b6d6:	4611      	mov	r1, r2
 800b6d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b6dc:	f7ff b9a6 	b.w	800aa2c <_malloc_r>
 800b6e0:	b922      	cbnz	r2, 800b6ec <_realloc_r+0x20>
 800b6e2:	f7ff f955 	bl	800a990 <_free_r>
 800b6e6:	4625      	mov	r5, r4
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6ec:	f000 fa00 	bl	800baf0 <_malloc_usable_size_r>
 800b6f0:	42a0      	cmp	r0, r4
 800b6f2:	d20f      	bcs.n	800b714 <_realloc_r+0x48>
 800b6f4:	4621      	mov	r1, r4
 800b6f6:	4638      	mov	r0, r7
 800b6f8:	f7ff f998 	bl	800aa2c <_malloc_r>
 800b6fc:	4605      	mov	r5, r0
 800b6fe:	2800      	cmp	r0, #0
 800b700:	d0f2      	beq.n	800b6e8 <_realloc_r+0x1c>
 800b702:	4631      	mov	r1, r6
 800b704:	4622      	mov	r2, r4
 800b706:	f7ff f917 	bl	800a938 <memcpy>
 800b70a:	4631      	mov	r1, r6
 800b70c:	4638      	mov	r0, r7
 800b70e:	f7ff f93f 	bl	800a990 <_free_r>
 800b712:	e7e9      	b.n	800b6e8 <_realloc_r+0x1c>
 800b714:	4635      	mov	r5, r6
 800b716:	e7e7      	b.n	800b6e8 <_realloc_r+0x1c>

0800b718 <__ssputs_r>:
 800b718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b71c:	688e      	ldr	r6, [r1, #8]
 800b71e:	429e      	cmp	r6, r3
 800b720:	4682      	mov	sl, r0
 800b722:	460c      	mov	r4, r1
 800b724:	4690      	mov	r8, r2
 800b726:	4699      	mov	r9, r3
 800b728:	d837      	bhi.n	800b79a <__ssputs_r+0x82>
 800b72a:	898a      	ldrh	r2, [r1, #12]
 800b72c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b730:	d031      	beq.n	800b796 <__ssputs_r+0x7e>
 800b732:	6825      	ldr	r5, [r4, #0]
 800b734:	6909      	ldr	r1, [r1, #16]
 800b736:	1a6f      	subs	r7, r5, r1
 800b738:	6965      	ldr	r5, [r4, #20]
 800b73a:	2302      	movs	r3, #2
 800b73c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b740:	fb95 f5f3 	sdiv	r5, r5, r3
 800b744:	f109 0301 	add.w	r3, r9, #1
 800b748:	443b      	add	r3, r7
 800b74a:	429d      	cmp	r5, r3
 800b74c:	bf38      	it	cc
 800b74e:	461d      	movcc	r5, r3
 800b750:	0553      	lsls	r3, r2, #21
 800b752:	d530      	bpl.n	800b7b6 <__ssputs_r+0x9e>
 800b754:	4629      	mov	r1, r5
 800b756:	f7ff f969 	bl	800aa2c <_malloc_r>
 800b75a:	4606      	mov	r6, r0
 800b75c:	b950      	cbnz	r0, 800b774 <__ssputs_r+0x5c>
 800b75e:	230c      	movs	r3, #12
 800b760:	f8ca 3000 	str.w	r3, [sl]
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b76a:	81a3      	strh	r3, [r4, #12]
 800b76c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b774:	463a      	mov	r2, r7
 800b776:	6921      	ldr	r1, [r4, #16]
 800b778:	f7ff f8de 	bl	800a938 <memcpy>
 800b77c:	89a3      	ldrh	r3, [r4, #12]
 800b77e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b786:	81a3      	strh	r3, [r4, #12]
 800b788:	6126      	str	r6, [r4, #16]
 800b78a:	6165      	str	r5, [r4, #20]
 800b78c:	443e      	add	r6, r7
 800b78e:	1bed      	subs	r5, r5, r7
 800b790:	6026      	str	r6, [r4, #0]
 800b792:	60a5      	str	r5, [r4, #8]
 800b794:	464e      	mov	r6, r9
 800b796:	454e      	cmp	r6, r9
 800b798:	d900      	bls.n	800b79c <__ssputs_r+0x84>
 800b79a:	464e      	mov	r6, r9
 800b79c:	4632      	mov	r2, r6
 800b79e:	4641      	mov	r1, r8
 800b7a0:	6820      	ldr	r0, [r4, #0]
 800b7a2:	f7ff f8d4 	bl	800a94e <memmove>
 800b7a6:	68a3      	ldr	r3, [r4, #8]
 800b7a8:	1b9b      	subs	r3, r3, r6
 800b7aa:	60a3      	str	r3, [r4, #8]
 800b7ac:	6823      	ldr	r3, [r4, #0]
 800b7ae:	441e      	add	r6, r3
 800b7b0:	6026      	str	r6, [r4, #0]
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	e7dc      	b.n	800b770 <__ssputs_r+0x58>
 800b7b6:	462a      	mov	r2, r5
 800b7b8:	f7ff ff88 	bl	800b6cc <_realloc_r>
 800b7bc:	4606      	mov	r6, r0
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	d1e2      	bne.n	800b788 <__ssputs_r+0x70>
 800b7c2:	6921      	ldr	r1, [r4, #16]
 800b7c4:	4650      	mov	r0, sl
 800b7c6:	f7ff f8e3 	bl	800a990 <_free_r>
 800b7ca:	e7c8      	b.n	800b75e <__ssputs_r+0x46>

0800b7cc <_svfiprintf_r>:
 800b7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d0:	461d      	mov	r5, r3
 800b7d2:	898b      	ldrh	r3, [r1, #12]
 800b7d4:	061f      	lsls	r7, r3, #24
 800b7d6:	b09d      	sub	sp, #116	; 0x74
 800b7d8:	4680      	mov	r8, r0
 800b7da:	460c      	mov	r4, r1
 800b7dc:	4616      	mov	r6, r2
 800b7de:	d50f      	bpl.n	800b800 <_svfiprintf_r+0x34>
 800b7e0:	690b      	ldr	r3, [r1, #16]
 800b7e2:	b96b      	cbnz	r3, 800b800 <_svfiprintf_r+0x34>
 800b7e4:	2140      	movs	r1, #64	; 0x40
 800b7e6:	f7ff f921 	bl	800aa2c <_malloc_r>
 800b7ea:	6020      	str	r0, [r4, #0]
 800b7ec:	6120      	str	r0, [r4, #16]
 800b7ee:	b928      	cbnz	r0, 800b7fc <_svfiprintf_r+0x30>
 800b7f0:	230c      	movs	r3, #12
 800b7f2:	f8c8 3000 	str.w	r3, [r8]
 800b7f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7fa:	e0c8      	b.n	800b98e <_svfiprintf_r+0x1c2>
 800b7fc:	2340      	movs	r3, #64	; 0x40
 800b7fe:	6163      	str	r3, [r4, #20]
 800b800:	2300      	movs	r3, #0
 800b802:	9309      	str	r3, [sp, #36]	; 0x24
 800b804:	2320      	movs	r3, #32
 800b806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b80a:	2330      	movs	r3, #48	; 0x30
 800b80c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b810:	9503      	str	r5, [sp, #12]
 800b812:	f04f 0b01 	mov.w	fp, #1
 800b816:	4637      	mov	r7, r6
 800b818:	463d      	mov	r5, r7
 800b81a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b81e:	b10b      	cbz	r3, 800b824 <_svfiprintf_r+0x58>
 800b820:	2b25      	cmp	r3, #37	; 0x25
 800b822:	d13e      	bne.n	800b8a2 <_svfiprintf_r+0xd6>
 800b824:	ebb7 0a06 	subs.w	sl, r7, r6
 800b828:	d00b      	beq.n	800b842 <_svfiprintf_r+0x76>
 800b82a:	4653      	mov	r3, sl
 800b82c:	4632      	mov	r2, r6
 800b82e:	4621      	mov	r1, r4
 800b830:	4640      	mov	r0, r8
 800b832:	f7ff ff71 	bl	800b718 <__ssputs_r>
 800b836:	3001      	adds	r0, #1
 800b838:	f000 80a4 	beq.w	800b984 <_svfiprintf_r+0x1b8>
 800b83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b83e:	4453      	add	r3, sl
 800b840:	9309      	str	r3, [sp, #36]	; 0x24
 800b842:	783b      	ldrb	r3, [r7, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	f000 809d 	beq.w	800b984 <_svfiprintf_r+0x1b8>
 800b84a:	2300      	movs	r3, #0
 800b84c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b854:	9304      	str	r3, [sp, #16]
 800b856:	9307      	str	r3, [sp, #28]
 800b858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b85c:	931a      	str	r3, [sp, #104]	; 0x68
 800b85e:	462f      	mov	r7, r5
 800b860:	2205      	movs	r2, #5
 800b862:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b866:	4850      	ldr	r0, [pc, #320]	; (800b9a8 <_svfiprintf_r+0x1dc>)
 800b868:	f7f4 fcd2 	bl	8000210 <memchr>
 800b86c:	9b04      	ldr	r3, [sp, #16]
 800b86e:	b9d0      	cbnz	r0, 800b8a6 <_svfiprintf_r+0xda>
 800b870:	06d9      	lsls	r1, r3, #27
 800b872:	bf44      	itt	mi
 800b874:	2220      	movmi	r2, #32
 800b876:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b87a:	071a      	lsls	r2, r3, #28
 800b87c:	bf44      	itt	mi
 800b87e:	222b      	movmi	r2, #43	; 0x2b
 800b880:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b884:	782a      	ldrb	r2, [r5, #0]
 800b886:	2a2a      	cmp	r2, #42	; 0x2a
 800b888:	d015      	beq.n	800b8b6 <_svfiprintf_r+0xea>
 800b88a:	9a07      	ldr	r2, [sp, #28]
 800b88c:	462f      	mov	r7, r5
 800b88e:	2000      	movs	r0, #0
 800b890:	250a      	movs	r5, #10
 800b892:	4639      	mov	r1, r7
 800b894:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b898:	3b30      	subs	r3, #48	; 0x30
 800b89a:	2b09      	cmp	r3, #9
 800b89c:	d94d      	bls.n	800b93a <_svfiprintf_r+0x16e>
 800b89e:	b1b8      	cbz	r0, 800b8d0 <_svfiprintf_r+0x104>
 800b8a0:	e00f      	b.n	800b8c2 <_svfiprintf_r+0xf6>
 800b8a2:	462f      	mov	r7, r5
 800b8a4:	e7b8      	b.n	800b818 <_svfiprintf_r+0x4c>
 800b8a6:	4a40      	ldr	r2, [pc, #256]	; (800b9a8 <_svfiprintf_r+0x1dc>)
 800b8a8:	1a80      	subs	r0, r0, r2
 800b8aa:	fa0b f000 	lsl.w	r0, fp, r0
 800b8ae:	4318      	orrs	r0, r3
 800b8b0:	9004      	str	r0, [sp, #16]
 800b8b2:	463d      	mov	r5, r7
 800b8b4:	e7d3      	b.n	800b85e <_svfiprintf_r+0x92>
 800b8b6:	9a03      	ldr	r2, [sp, #12]
 800b8b8:	1d11      	adds	r1, r2, #4
 800b8ba:	6812      	ldr	r2, [r2, #0]
 800b8bc:	9103      	str	r1, [sp, #12]
 800b8be:	2a00      	cmp	r2, #0
 800b8c0:	db01      	blt.n	800b8c6 <_svfiprintf_r+0xfa>
 800b8c2:	9207      	str	r2, [sp, #28]
 800b8c4:	e004      	b.n	800b8d0 <_svfiprintf_r+0x104>
 800b8c6:	4252      	negs	r2, r2
 800b8c8:	f043 0302 	orr.w	r3, r3, #2
 800b8cc:	9207      	str	r2, [sp, #28]
 800b8ce:	9304      	str	r3, [sp, #16]
 800b8d0:	783b      	ldrb	r3, [r7, #0]
 800b8d2:	2b2e      	cmp	r3, #46	; 0x2e
 800b8d4:	d10c      	bne.n	800b8f0 <_svfiprintf_r+0x124>
 800b8d6:	787b      	ldrb	r3, [r7, #1]
 800b8d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b8da:	d133      	bne.n	800b944 <_svfiprintf_r+0x178>
 800b8dc:	9b03      	ldr	r3, [sp, #12]
 800b8de:	1d1a      	adds	r2, r3, #4
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	9203      	str	r2, [sp, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	bfb8      	it	lt
 800b8e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b8ec:	3702      	adds	r7, #2
 800b8ee:	9305      	str	r3, [sp, #20]
 800b8f0:	4d2e      	ldr	r5, [pc, #184]	; (800b9ac <_svfiprintf_r+0x1e0>)
 800b8f2:	7839      	ldrb	r1, [r7, #0]
 800b8f4:	2203      	movs	r2, #3
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	f7f4 fc8a 	bl	8000210 <memchr>
 800b8fc:	b138      	cbz	r0, 800b90e <_svfiprintf_r+0x142>
 800b8fe:	2340      	movs	r3, #64	; 0x40
 800b900:	1b40      	subs	r0, r0, r5
 800b902:	fa03 f000 	lsl.w	r0, r3, r0
 800b906:	9b04      	ldr	r3, [sp, #16]
 800b908:	4303      	orrs	r3, r0
 800b90a:	3701      	adds	r7, #1
 800b90c:	9304      	str	r3, [sp, #16]
 800b90e:	7839      	ldrb	r1, [r7, #0]
 800b910:	4827      	ldr	r0, [pc, #156]	; (800b9b0 <_svfiprintf_r+0x1e4>)
 800b912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b916:	2206      	movs	r2, #6
 800b918:	1c7e      	adds	r6, r7, #1
 800b91a:	f7f4 fc79 	bl	8000210 <memchr>
 800b91e:	2800      	cmp	r0, #0
 800b920:	d038      	beq.n	800b994 <_svfiprintf_r+0x1c8>
 800b922:	4b24      	ldr	r3, [pc, #144]	; (800b9b4 <_svfiprintf_r+0x1e8>)
 800b924:	bb13      	cbnz	r3, 800b96c <_svfiprintf_r+0x1a0>
 800b926:	9b03      	ldr	r3, [sp, #12]
 800b928:	3307      	adds	r3, #7
 800b92a:	f023 0307 	bic.w	r3, r3, #7
 800b92e:	3308      	adds	r3, #8
 800b930:	9303      	str	r3, [sp, #12]
 800b932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b934:	444b      	add	r3, r9
 800b936:	9309      	str	r3, [sp, #36]	; 0x24
 800b938:	e76d      	b.n	800b816 <_svfiprintf_r+0x4a>
 800b93a:	fb05 3202 	mla	r2, r5, r2, r3
 800b93e:	2001      	movs	r0, #1
 800b940:	460f      	mov	r7, r1
 800b942:	e7a6      	b.n	800b892 <_svfiprintf_r+0xc6>
 800b944:	2300      	movs	r3, #0
 800b946:	3701      	adds	r7, #1
 800b948:	9305      	str	r3, [sp, #20]
 800b94a:	4619      	mov	r1, r3
 800b94c:	250a      	movs	r5, #10
 800b94e:	4638      	mov	r0, r7
 800b950:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b954:	3a30      	subs	r2, #48	; 0x30
 800b956:	2a09      	cmp	r2, #9
 800b958:	d903      	bls.n	800b962 <_svfiprintf_r+0x196>
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d0c8      	beq.n	800b8f0 <_svfiprintf_r+0x124>
 800b95e:	9105      	str	r1, [sp, #20]
 800b960:	e7c6      	b.n	800b8f0 <_svfiprintf_r+0x124>
 800b962:	fb05 2101 	mla	r1, r5, r1, r2
 800b966:	2301      	movs	r3, #1
 800b968:	4607      	mov	r7, r0
 800b96a:	e7f0      	b.n	800b94e <_svfiprintf_r+0x182>
 800b96c:	ab03      	add	r3, sp, #12
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	4622      	mov	r2, r4
 800b972:	4b11      	ldr	r3, [pc, #68]	; (800b9b8 <_svfiprintf_r+0x1ec>)
 800b974:	a904      	add	r1, sp, #16
 800b976:	4640      	mov	r0, r8
 800b978:	f3af 8000 	nop.w
 800b97c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b980:	4681      	mov	r9, r0
 800b982:	d1d6      	bne.n	800b932 <_svfiprintf_r+0x166>
 800b984:	89a3      	ldrh	r3, [r4, #12]
 800b986:	065b      	lsls	r3, r3, #25
 800b988:	f53f af35 	bmi.w	800b7f6 <_svfiprintf_r+0x2a>
 800b98c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b98e:	b01d      	add	sp, #116	; 0x74
 800b990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b994:	ab03      	add	r3, sp, #12
 800b996:	9300      	str	r3, [sp, #0]
 800b998:	4622      	mov	r2, r4
 800b99a:	4b07      	ldr	r3, [pc, #28]	; (800b9b8 <_svfiprintf_r+0x1ec>)
 800b99c:	a904      	add	r1, sp, #16
 800b99e:	4640      	mov	r0, r8
 800b9a0:	f7ff fa54 	bl	800ae4c <_printf_i>
 800b9a4:	e7ea      	b.n	800b97c <_svfiprintf_r+0x1b0>
 800b9a6:	bf00      	nop
 800b9a8:	0800d2e0 	.word	0x0800d2e0
 800b9ac:	0800d2e6 	.word	0x0800d2e6
 800b9b0:	0800d2ea 	.word	0x0800d2ea
 800b9b4:	00000000 	.word	0x00000000
 800b9b8:	0800b719 	.word	0x0800b719

0800b9bc <__sread>:
 800b9bc:	b510      	push	{r4, lr}
 800b9be:	460c      	mov	r4, r1
 800b9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c4:	f000 f89c 	bl	800bb00 <_read_r>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	bfab      	itete	ge
 800b9cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9ce:	89a3      	ldrhlt	r3, [r4, #12]
 800b9d0:	181b      	addge	r3, r3, r0
 800b9d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9d6:	bfac      	ite	ge
 800b9d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9da:	81a3      	strhlt	r3, [r4, #12]
 800b9dc:	bd10      	pop	{r4, pc}

0800b9de <__swrite>:
 800b9de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e2:	461f      	mov	r7, r3
 800b9e4:	898b      	ldrh	r3, [r1, #12]
 800b9e6:	05db      	lsls	r3, r3, #23
 800b9e8:	4605      	mov	r5, r0
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	4616      	mov	r6, r2
 800b9ee:	d505      	bpl.n	800b9fc <__swrite+0x1e>
 800b9f0:	2302      	movs	r3, #2
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f8:	f000 f868 	bl	800bacc <_lseek_r>
 800b9fc:	89a3      	ldrh	r3, [r4, #12]
 800b9fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba06:	81a3      	strh	r3, [r4, #12]
 800ba08:	4632      	mov	r2, r6
 800ba0a:	463b      	mov	r3, r7
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba12:	f000 b817 	b.w	800ba44 <_write_r>

0800ba16 <__sseek>:
 800ba16:	b510      	push	{r4, lr}
 800ba18:	460c      	mov	r4, r1
 800ba1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba1e:	f000 f855 	bl	800bacc <_lseek_r>
 800ba22:	1c43      	adds	r3, r0, #1
 800ba24:	89a3      	ldrh	r3, [r4, #12]
 800ba26:	bf15      	itete	ne
 800ba28:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba32:	81a3      	strheq	r3, [r4, #12]
 800ba34:	bf18      	it	ne
 800ba36:	81a3      	strhne	r3, [r4, #12]
 800ba38:	bd10      	pop	{r4, pc}

0800ba3a <__sclose>:
 800ba3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba3e:	f000 b813 	b.w	800ba68 <_close_r>
	...

0800ba44 <_write_r>:
 800ba44:	b538      	push	{r3, r4, r5, lr}
 800ba46:	4c07      	ldr	r4, [pc, #28]	; (800ba64 <_write_r+0x20>)
 800ba48:	4605      	mov	r5, r0
 800ba4a:	4608      	mov	r0, r1
 800ba4c:	4611      	mov	r1, r2
 800ba4e:	2200      	movs	r2, #0
 800ba50:	6022      	str	r2, [r4, #0]
 800ba52:	461a      	mov	r2, r3
 800ba54:	f7fa fc81 	bl	800635a <_write>
 800ba58:	1c43      	adds	r3, r0, #1
 800ba5a:	d102      	bne.n	800ba62 <_write_r+0x1e>
 800ba5c:	6823      	ldr	r3, [r4, #0]
 800ba5e:	b103      	cbz	r3, 800ba62 <_write_r+0x1e>
 800ba60:	602b      	str	r3, [r5, #0]
 800ba62:	bd38      	pop	{r3, r4, r5, pc}
 800ba64:	200017f4 	.word	0x200017f4

0800ba68 <_close_r>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4c06      	ldr	r4, [pc, #24]	; (800ba84 <_close_r+0x1c>)
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	4605      	mov	r5, r0
 800ba70:	4608      	mov	r0, r1
 800ba72:	6023      	str	r3, [r4, #0]
 800ba74:	f7fa fc8d 	bl	8006392 <_close>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	d102      	bne.n	800ba82 <_close_r+0x1a>
 800ba7c:	6823      	ldr	r3, [r4, #0]
 800ba7e:	b103      	cbz	r3, 800ba82 <_close_r+0x1a>
 800ba80:	602b      	str	r3, [r5, #0]
 800ba82:	bd38      	pop	{r3, r4, r5, pc}
 800ba84:	200017f4 	.word	0x200017f4

0800ba88 <_fstat_r>:
 800ba88:	b538      	push	{r3, r4, r5, lr}
 800ba8a:	4c07      	ldr	r4, [pc, #28]	; (800baa8 <_fstat_r+0x20>)
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	4605      	mov	r5, r0
 800ba90:	4608      	mov	r0, r1
 800ba92:	4611      	mov	r1, r2
 800ba94:	6023      	str	r3, [r4, #0]
 800ba96:	f7fa fc88 	bl	80063aa <_fstat>
 800ba9a:	1c43      	adds	r3, r0, #1
 800ba9c:	d102      	bne.n	800baa4 <_fstat_r+0x1c>
 800ba9e:	6823      	ldr	r3, [r4, #0]
 800baa0:	b103      	cbz	r3, 800baa4 <_fstat_r+0x1c>
 800baa2:	602b      	str	r3, [r5, #0]
 800baa4:	bd38      	pop	{r3, r4, r5, pc}
 800baa6:	bf00      	nop
 800baa8:	200017f4 	.word	0x200017f4

0800baac <_isatty_r>:
 800baac:	b538      	push	{r3, r4, r5, lr}
 800baae:	4c06      	ldr	r4, [pc, #24]	; (800bac8 <_isatty_r+0x1c>)
 800bab0:	2300      	movs	r3, #0
 800bab2:	4605      	mov	r5, r0
 800bab4:	4608      	mov	r0, r1
 800bab6:	6023      	str	r3, [r4, #0]
 800bab8:	f7fa fc87 	bl	80063ca <_isatty>
 800babc:	1c43      	adds	r3, r0, #1
 800babe:	d102      	bne.n	800bac6 <_isatty_r+0x1a>
 800bac0:	6823      	ldr	r3, [r4, #0]
 800bac2:	b103      	cbz	r3, 800bac6 <_isatty_r+0x1a>
 800bac4:	602b      	str	r3, [r5, #0]
 800bac6:	bd38      	pop	{r3, r4, r5, pc}
 800bac8:	200017f4 	.word	0x200017f4

0800bacc <_lseek_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	4c07      	ldr	r4, [pc, #28]	; (800baec <_lseek_r+0x20>)
 800bad0:	4605      	mov	r5, r0
 800bad2:	4608      	mov	r0, r1
 800bad4:	4611      	mov	r1, r2
 800bad6:	2200      	movs	r2, #0
 800bad8:	6022      	str	r2, [r4, #0]
 800bada:	461a      	mov	r2, r3
 800badc:	f7fa fc80 	bl	80063e0 <_lseek>
 800bae0:	1c43      	adds	r3, r0, #1
 800bae2:	d102      	bne.n	800baea <_lseek_r+0x1e>
 800bae4:	6823      	ldr	r3, [r4, #0]
 800bae6:	b103      	cbz	r3, 800baea <_lseek_r+0x1e>
 800bae8:	602b      	str	r3, [r5, #0]
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	200017f4 	.word	0x200017f4

0800baf0 <_malloc_usable_size_r>:
 800baf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baf4:	1f18      	subs	r0, r3, #4
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	bfbc      	itt	lt
 800bafa:	580b      	ldrlt	r3, [r1, r0]
 800bafc:	18c0      	addlt	r0, r0, r3
 800bafe:	4770      	bx	lr

0800bb00 <_read_r>:
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	4c07      	ldr	r4, [pc, #28]	; (800bb20 <_read_r+0x20>)
 800bb04:	4605      	mov	r5, r0
 800bb06:	4608      	mov	r0, r1
 800bb08:	4611      	mov	r1, r2
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	6022      	str	r2, [r4, #0]
 800bb0e:	461a      	mov	r2, r3
 800bb10:	f7fa fc06 	bl	8006320 <_read>
 800bb14:	1c43      	adds	r3, r0, #1
 800bb16:	d102      	bne.n	800bb1e <_read_r+0x1e>
 800bb18:	6823      	ldr	r3, [r4, #0]
 800bb1a:	b103      	cbz	r3, 800bb1e <_read_r+0x1e>
 800bb1c:	602b      	str	r3, [r5, #0]
 800bb1e:	bd38      	pop	{r3, r4, r5, pc}
 800bb20:	200017f4 	.word	0x200017f4

0800bb24 <_init>:
 800bb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb26:	bf00      	nop
 800bb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb2a:	bc08      	pop	{r3}
 800bb2c:	469e      	mov	lr, r3
 800bb2e:	4770      	bx	lr

0800bb30 <_fini>:
 800bb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb32:	bf00      	nop
 800bb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb36:	bc08      	pop	{r3}
 800bb38:	469e      	mov	lr, r3
 800bb3a:	4770      	bx	lr
